<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MYSQL知识整理（MYSQL主从复制-----基本原理）</title>
      <link href="/2019/07/03/MYSQL%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88MYSQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6-%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%EF%BC%89/"/>
      <url>/2019/07/03/MYSQL%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88MYSQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6-%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>MYSQL知识整理（MYSQL主从复制—–基本原理）<br><a id="more"></a></p><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><h3 id="主从复制定义"><a href="#主从复制定义" class="headerlink" title="主从复制定义"></a>主从复制定义</h3><blockquote><p>一个MySQL数据库服务器主节点的数据复制到一个或多个从子节点</p></blockquote><h3 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h3><blockquote><p>默认为异步复制模式</p></blockquote><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><blockquote><p>读写分离：可以划分读服务器和写服务器</p><p>故障分析：节点发生故障可以迅速切换其他服务器</p><p>高可用HA：通过尽量缩短因日常维护操作（计划）和突发的系统崩溃（非计划）所导致的停机时间，以提高系统和应用的可用性</p><p>易扩展：容易增加子数据库服务器节点，减少大数据下哥服务器压力</p></blockquote><h3 id="主从形式"><a href="#主从形式" class="headerlink" title="主从形式"></a>主从形式</h3><blockquote><p>单主单从</p><p>单主多从</p><p>多主单从</p><p>多主复制</p><p>联级复制</p></blockquote><p><br></p><h2 id="2-复制原理"><a href="#2-复制原理" class="headerlink" title="2.复制原理"></a>2.复制原理</h2><h3 id="涉及线程"><a href="#涉及线程" class="headerlink" title="涉及线程"></a>涉及线程</h3><blockquote><p>主节点线程<br>子节点I/O线程<br>子节点线程</p></blockquote><h3 id="主节点线程"><a href="#主节点线程" class="headerlink" title="主节点线程"></a>主节点线程</h3><blockquote><p>① 子节点连接主节点<br>② 主节点创建log dump线程(此线程每个子节点创建一个)发送log_bin文件（log_bin发送完成前会上锁）</p></blockquote><h3 id="子节点I-O线程"><a href="#子节点I-O线程" class="headerlink" title="子节点I/O线程"></a>子节点I/O线程</h3><blockquote><p>① 子节点start slave，I/O线程被创建<br>② 请求主库中更新的bin-log<br>③ I/O线程接收主节点binlog dump<br>④ 请求的信息保存在本地relay-log</p></blockquote><h3 id="子节点线程"><a href="#子节点线程" class="headerlink" title="子节点线程"></a>子节点线程</h3><blockquote><p>读取relay log中的内容</p></blockquote><h3 id="完整过程"><a href="#完整过程" class="headerlink" title="完整过程"></a>完整过程</h3><blockquote><p>① 的I/O进程连接主节点，请求日志内容</p><p>② 主节点接收从节点的I/O请求，返回指定日志指定位置之后的日志信息，返回给从节点（返回信息中除了日志所包含的信息之外，还包括本次返回的信息的bin-log file 的以及bin-log position）</p><p>③ 从节点的I/O进程接收内容，将接收到的日志内容更新到本机relay log，并将读取到的binary log文件名和位置保存到master-info 文件中，以便在下一次读取的时候能够清楚的告诉Master“我需要从某个bin-log的哪个位置开始往后的日志内容，请发给我”；</p><p>④ 子节点线程检测到relay-log中新增加了内容后，会将relay-log的内容解析成在祝节点上实际执行过的操作，并在本数据库中执行。</p></blockquote><p><br></p><h2 id="3-模式"><a href="#3-模式" class="headerlink" title="3.模式"></a>3.模式</h2><h3 id="异步模式"><a href="#异步模式" class="headerlink" title="异步模式"></a>异步模式</h3><blockquote><p>英文名“mysql async-mode”</p><p>默认的主从复制模式</p><p>主节点不会主动push bin log到子节点（故有可能导致同步不一致）</p></blockquote><h3 id="半同步模式"><a href="#半同步模式" class="headerlink" title="半同步模式"></a>半同步模式</h3><blockquote><p>英文名“mysql semi-sync”</p><p>主节点只要接收到其中一台子节点的返回信息，就会commit</p><p>或者需要等待直到超时时间然后切换成异步模式再提交</p><p>数据延迟减小，事务安全</p><p>性能降低、响应变长</p></blockquote><h3 id="全同步模式"><a href="#全同步模式" class="headerlink" title="全同步模式"></a>全同步模式</h3><blockquote><p>主节点和子节点全部执行了commit并确认才会向客户端返回成功</p></blockquote><p>（1）binlog记录格式</p><blockquote><p>基于SQL语句的复制(SBR)：记录sql语句在bin log中</p><p>基于行的复制（RBR）：将SQL语句分解为基于Row更改的语句并记录在bin log中（只记录修改的样子）</p><p>混合模式复制（MBR）：对于一般的复制使用STATEMENT模式保存到binlog；对于STATEMENT模式无法复制的操作则使用ROW模式来保存</p></blockquote><p>（2）GTID复制模式</p><blockquote><p>无需找到binlog和pos点<br>只需要知道主节点的ip，端口，以及账号密码就行，因为复制是自动的，MySQL会通过内部机制GTID自动找点同步</p></blockquote><p>GIID原理:</p><blockquote><p>主节点更新数据时，会在事务前产生GTID，一起记录到binlog日志中</p><p>从节点的I/O线程将变更的bin log，写入到本地的relay log中</p><p>SQL线程从relay log中获取GTID，然后对比本地binlog是否有记录（所以MySQL从节点必须要开启binary log）</p><p>如果有记录，说明该GTID的事务已经执行，从节点会忽略</p><p>如果没有记录，从节点就会从relay log中执行该GTID的事务，并记录到bin log</p><p>在解析过程中会判断是否有主键，如果没有就用二级索引，如果有就用全部扫描</p></blockquote><p><br></p><h2 id="主从复制配置"><a href="#主从复制配置" class="headerlink" title="主从复制配置"></a>主从复制配置</h2><p>① 在主数据库my.cnf添加三行，并重启：</p><pre><code>//将mysql二进制日志取名为mysql-binlog-bin=mysql-bin  //二进制日志的格式，有三种：statement/row/mixed,具体分别不多做解释，这里使用mixedbinlog_format=mixed //为服务器设置一个独一无二的id便于区分，这里使用ip地址的最后一位充当server-idserver-id=101 </code></pre><p>② 子数据库my.cnf也添加这三行（参数的值不同），并重启</p><p>③ 为主数据库分配权限</p><pre><code>GRANT replication slave ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;root&apos;;  </code></pre><p>注：</p><blockquote><p>replication slave:复制权限<br><em>.</em>：可以操作的数据库<br>第一个root：用户名<br>%：所有电脑皆可使用<br>第二个root：密码</p></blockquote><p>④ 查看参数记录：</p><pre><code>show master status</code></pre><p>⑤ 在子数据库中输入：</p><blockquote><p>MASTER_HOST : 设置要连接的主服务器的ip地址</p><p>MASTER_USER : 设置要连接的主服务器的用户名</p><p>MASTER_PASSWORD : 设置要连接的主服务器的密码</p><p>MASTER_LOG_FILE : 设置要连接的主服务器的bin日志的日志名称，即第3步得到的信息</p><p>MASTER_LOG_POS : 设置要连接的主服务器的bin日志的记录位置，即第3步得到的信息，（这里注意，最后一项不需要加引号。否则配置失败）</p></blockquote><p>⑥ 开启子数据库：start slave</p><p>⑦ 输入：show slave status;（为yes即成功）</p>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
          <category> MYSQL主从复制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL知识整理（MYSQL锁机制---锁分类）</title>
      <link href="/2019/07/02/MYSQL%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88MYSQL%E9%94%81%E6%9C%BA%E5%88%B6-%E9%94%81%E5%88%86%E7%B1%BB%EF%BC%89/"/>
      <url>/2019/07/02/MYSQL%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88MYSQL%E9%94%81%E6%9C%BA%E5%88%B6-%E9%94%81%E5%88%86%E7%B1%BB%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>MYSQL知识整理（MYSQL锁机制—锁分类）<br><a id="more"></a></p><h2 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>认为获取锁是非常有可能失败的，因此要先确保获取锁成功再进行业务操作<br>悲观的把每次操作当成危险操作，每次都必须获取锁才能操作<br>英文：Pessimistic Lock</p></blockquote><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><blockquote><p>先获取锁，再进行业务操作</p></blockquote><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><blockquote><p>不适合“读”操作频繁的场合<br>适合“写”操作频繁的场合4</p></blockquote><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><blockquote><p>行锁（包括：共享锁，排他锁）<br>表锁（包括：读锁，写锁）</p></blockquote><p><br></p><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><blockquote><p>乐观的认为数据不会被修改，不进行业务处理不会拿锁<br>数据只有被业务处理操作时才会获得锁<br>英文：Optimistic Lock</p></blockquote><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><blockquote><p>先进行业务操作，不到万不得已不去拿锁</p></blockquote><h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><blockquote><p>不适合“写”操作频繁的场合<br>适合“读”操作频繁的场合</p></blockquote><p><br></p><h2 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h2><h3 id="读锁"><a href="#读锁" class="headerlink" title="读锁"></a>读锁</h3><p>定义：</p><blockquote><p>获得锁的前提时没有其他线程对该数据的写锁与读锁<br>其他和本线程都可以读操作，都不可以写操作<br>获得锁的线程如果对其他行进行读操作，会报 “tablename was not locked with LOCK TABLES”</p></blockquote><p>基本语句（显式）：</p><pre><code>//上锁LOCK TABLE table_name [ AS alias_name ] READ//解锁UNLOCK table_name</code></pre><h3 id="写锁"><a href="#写锁" class="headerlink" title="写锁"></a>写锁</h3><p>定义：</p><blockquote><p>获得锁的前提时没有其他线程对该数据的写锁<br>只能该线程对数据进行写操作，其他线程不可对其做任何操作<br>被增加写锁的表，其他请求无法在对该表增加读锁和写锁<br>可以指定锁的优先级</p></blockquote><p>基本语句（显式）：</p><pre><code>//上锁OCK TABLE table_name [AS alias_name] [ LOW_PRIORITY ] WRITE//解锁UNLOCK table_name</code></pre><p><br></p><h2 id="行级锁"><a href="#行级锁" class="headerlink" title="行级锁"></a>行级锁</h2><h3 id="共享锁-S-LOCK"><a href="#共享锁-S-LOCK" class="headerlink" title="共享锁(S LOCK)"></a>共享锁(S LOCK)</h3><p>定义：</p><blockquote><p>无x锁才可获得s锁<br>被s锁的数据仍可被其他线程获得锁</p></blockquote><p>基本语句（显式）：</p><pre><code>SELECT ...LOCK IN SHARE MODE;</code></pre><h3 id="排他锁-X-LOCK"><a href="#排他锁-X-LOCK" class="headerlink" title="排他锁(X LOCK)"></a>排他锁(X LOCK)</h3><p>定义：</p><blockquote><p>无x锁才可获得x锁</p></blockquote><p>基本语句：</p><pre><code>SELECT ...LOCK FOR UPDATE;</code></pre><p><br></p><h2 id="引擎支持"><a href="#引擎支持" class="headerlink" title="引擎支持"></a>引擎支持</h2><table><thead><tr><th style="text-align:left">对比名称</th><th style="text-align:left">MyISAM</th><th>InnoDB</th><th>BDB</th></tr></thead><tbody><tr><td style="text-align:left">行锁</td><td style="text-align:left">否</td><td>是</td><td>否 ｜</td></tr><tr><td style="text-align:left">页锁</td><td style="text-align:left">否</td><td>否</td><td>是 ｜</td></tr><tr><td style="text-align:left">表锁</td><td style="text-align:left">是</td><td>是</td><td>是  ｜</td></tr></tbody></table><p>注：</p><blockquote><p>BDB已经被InnoDB所取代<br>InnoDB行锁是通过给索引上的索引项加锁来实现的</p></blockquote><p><br></p><h2 id="不同锁的对比"><a href="#不同锁的对比" class="headerlink" title="不同锁的对比"></a>不同锁的对比</h2><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">开销</th><th style="text-align:left">加锁速度</th><th style="text-align:left">死锁</th><th style="text-align:left">粒度</th><th style="text-align:left">并 发性能</th></tr></thead><tbody><tr><td style="text-align:left">表所</td><td style="text-align:left">小</td><td style="text-align:left">快</td><td style="text-align:left">不会</td><td style="text-align:left">高</td><td style="text-align:left">低</td></tr><tr><td style="text-align:left">行锁</td><td style="text-align:left">大</td><td style="text-align:left">慢</td><td style="text-align:left">会</td><td style="text-align:left">低</td><td style="text-align:left">高</td></tr><tr><td style="text-align:left">页锁</td><td style="text-align:left">中</td><td style="text-align:left">中</td><td style="text-align:left">会</td><td style="text-align:left">中</td><td style="text-align:left">一般</td></tr></tbody></table><p>注：表锁适合查询和少量更新的操作，行锁适合大量更新的操作</p>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
          <category> MYSQL锁机制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL知识整理（MYSQL性能优化---查询截取分析）</title>
      <link href="/2019/07/02/MYSQL%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88MYSQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E6%9F%A5%E8%AF%A2%E6%88%AA%E5%8F%96%E5%88%86%E6%9E%90%EF%BC%89/"/>
      <url>/2019/07/02/MYSQL%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88MYSQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E6%9F%A5%E8%AF%A2%E6%88%AA%E5%8F%96%E5%88%86%E6%9E%90%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>MYSQL知识整理（MYSQL性能优化—查询截取分析）<br><a id="more"></a></p><h2 id="1-查询优化"><a href="#1-查询优化" class="headerlink" title="1.查询优化"></a>1.查询优化</h2><h3 id="永远小表驱动大表"><a href="#永远小表驱动大表" class="headerlink" title="永远小表驱动大表"></a>永远小表驱动大表</h3><p>select * from tableA where exists ( 子查询语句)</p><p>解释：</p><blockquote><p>把主数据放到子数据中做查询条件，根据条件决定主数据是否查询<br>如主数据数据大于子数据，优先用in查询做子查询<br>如主数据数据小于子数据，优先用exists子查询</p></blockquote><h3 id="order-by-关键字优化"><a href="#order-by-关键字优化" class="headerlink" title="order by 关键字优化"></a>order by 关键字优化</h3><p>（1）mysql排序：</p><blockquote><p>FileSort:效率低<br>Index:MySQL扫描索引本身完成排序(即使用索引定义的排序),效率高</p></blockquote><p>注意：当ORDER BY语句使用索引最左前列，并且Where子句与ORDER BY子句条件列组合满足索引最左前列时，使用index</p><p>（2）FileSort介绍</p><blockquote><p>尽量在索引时排序，否则会启动filesort（双路排序和单路排序）算法</p><p>双路排序：两次扫描磁盘，最终得到数据，读取行指针和orderby列，对他们进行排序，然后扫描已经排序好的列表，按照列表中的值重新从列表中读取对应的数据输出。从磁盘取排序字段，在buffer进行排序，再从磁盘取其他字段(读两次磁盘，速度较慢)</p><p>单路排序：从磁盘读取查询需要的所有列，按照order by列在buffer对他们进行排序，然后扫描排序后的列表进行输出（速率较快，但i/o操作多，占用内存大）</p></blockquote><p>（3）优化策略</p><blockquote><p>增大sort_buffer-size参数的设置<br>增大max_length_for_sort_data参数的设置</p></blockquote><p>（4）为排序使用索引</p><h3 id="group-by-关键字优化"><a href="#group-by-关键字优化" class="headerlink" title="group by 关键字优化"></a>group by 关键字优化</h3><blockquote><p>group by实质是先排序后进行分组，遵照索引建的最佳左前缀</p><p>当无法使用索引列，增大max_length_for_sort_data参数的设置+增大sort buffer size参数的设置</p><p>where高于having，能写在where限定的条件就不要去having限定</p></blockquote><p><br></p><h2 id="2-慢查询日志"><a href="#2-慢查询日志" class="headerlink" title="2.慢查询日志"></a>2.慢查询日志</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>其为日志记录，用来记录在MySQL中响应时间超过阀值的语句（具体指运行时间超过long_query_time值的SQL），可以根据long_query_time的值进行分析</p></blockquote><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>（1）使用说明</p><blockquote><p>其默认不开启，需手动开启</p><p>状态查看：SHOW VARIABLES LIKE ‘%slow_query_log%’;</p></blockquote><h3 id="开启"><a href="#开启" class="headerlink" title="开启"></a>开启</h3><pre><code>//手动开启，重启数据库会关闭SET GLOBAL slow_query_log = 1;//修改配置文件my.cnf才能永久开启slow_query_log=1slow_query_log_file=/var/lib/mysql/why-solw.log</code></pre><h3 id="记录何内容"><a href="#记录何内容" class="headerlink" title="记录何内容"></a>记录何内容</h3><pre><code>//查询时间，默认10.000000SHOW VARIABLES LIKE &apos;%long_query_time%&apos;;//更改SET GLOBAL long_query_time = 3;</code></pre><p>注意：其会记录响应时间超过这个参数值的内容（此值可修改）</p><p><br></p><h2 id="3-批量数据脚本"><a href="#3-批量数据脚本" class="headerlink" title="3.批量数据脚本"></a>3.批量数据脚本</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>（1）建表</p><blockquote><p>建立所需要的表</p></blockquote><p>（2）设置参数log_bin_trust_function_creators</p><blockquote><p>不设置，可能报 this fuction is none of ‘deterministric’…</p></blockquote><p>（3）创建函数，保证每条数据不同</p><blockquote><p>随机产生各字段所需内容</p></blockquote><p>（4）创建存储过程</p><p>（5）调用存储过程</p><p><br></p><h2 id="4-Show-Profile"><a href="#4-Show-Profile" class="headerlink" title="4.Show Profile"></a>4.Show Profile</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>mysql提供可以用来分析当前会话中语句执行的资源消耗情况，可以用于SQL的调优的测量，默认情况下，参数处于关闭状态，并保存最近15次的运行结果。</p></blockquote><h3 id="开启状态"><a href="#开启状态" class="headerlink" title="开启状态"></a>开启状态</h3><pre><code>//默认关闭   SHOW VARIABLES LIKE &apos;profiling&apos;</code></pre><h3 id="开启方式"><a href="#开启方式" class="headerlink" title="开启方式"></a>开启方式</h3><pre><code>SET profiling = ON;</code></pre><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><pre><code>show profiles;</code></pre><h3 id="问题数据"><a href="#问题数据" class="headerlink" title="问题数据"></a>问题数据</h3><pre><code>show profile cpu,block,io for query</code></pre><p>type内容：</p><blockquote><p>ALL:所有开销信息<br>BLOCK IO：IO相关信息<br>CPU：cpu开销<br>IPC：发送和接受开销<br>MEMORY：内存开销<br>PAGE FALUTS：页面错误开销<br>SOURCE：source_function,source_file,source_line开销<br>SWAPS：交换次数开销<br>CONTEXT SWITCHES ：上下文切换开销</p></blockquote><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><blockquote><p>converting HEAP to MyISAM  查询结果太大，内存不足<br>Creating tmp table 创建临时表<br>Copying to tmp table on disk 把内存中临时表复制到磁盘，危险<br>locked</p></blockquote><p><br></p><h2 id="5-全局查询日志"><a href="#5-全局查询日志" class="headerlink" title="5.全局查询日志"></a>5.全局查询日志</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>　保存mysql所有sql的执行记录<br>　用于测试环境，不建议在生产环境中使用</p></blockquote><h3 id="查看-1"><a href="#查看-1" class="headerlink" title="查看"></a>查看</h3><pre><code>SHOW VARIABLES LIKE &apos;%general%&apos;</code></pre><h3 id="开启方式-1"><a href="#开启方式-1" class="headerlink" title="开启方式"></a>开启方式</h3><pre><code>SET　global general = １;set　global log_output=&apos;table&apos;或修改配置文件my.cnf，非配置重启后失效</code></pre>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
          <category> MYSQL性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL知识整理（MYSQL性能优化---索引优化）</title>
      <link href="/2019/07/01/MYSQL%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88MYSQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%EF%BC%89/"/>
      <url>/2019/07/01/MYSQL%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88MYSQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>MYSQL知识整理（MYSQL性能优化—索引优化）<br><a id="more"></a></p><h2 id="1-索引介绍"><a href="#1-索引介绍" class="headerlink" title="1.索引介绍"></a>1.索引介绍</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><blockquote><p>快速定位数据,加快查询速度</p></blockquote><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><blockquote><p>增加磁盘的开销<br>写数据：需要更新索引，对数据库是个很大的开销，降低表更新、添加和删除的速度</p></blockquote><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><blockquote><p>表记录数据多<br>查询次数多</p></blockquote><h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><p>（1）普通索引</p><p>定义：无任何限制</p><p>基本语句</p><pre><code>CREATE INDEX indexName ON tablename(column1[,column2,……])</code></pre><p>（2）唯一索引</p><p>定义：列值唯一可空</p><p>基本语句</p><pre><code>CREATE TABLE tablename    (ID INT NOTNULL,    username VARCHAR(16) NOT NULL,    PRIMARY KEY(ID) );</code></pre><p>（3）组合索引</p><p>定义：选择表中某些数据作为索引列</p><p>基本语句</p><p>  <code>CREATE INDEX username_city_age ON mytable(username,city,age);</code></p><p>注：组合索引列id,usename，password相当于建立“id,usename，password”、“id,usename”、“id”,<br>从左边的列开始组合，无单独的password和username，故顺序对于组合所以十分重要</p><p>（4）全文索引</p><p>定义：只适用MyISAM，对文本域进行索引（char、varchar、text），非常消耗硬盘空间</p><p>基本语句</p><pre><code>CREATE FULLTEXT INDEX indexname ON tablename(column)</code></pre><h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><p>基本语句</p><pre><code>show index from tablename;或show keys from tablename</code></pre><h2 id="2-性能优化"><a href="#2-性能优化" class="headerlink" title="2.性能优化"></a>2.性能优化</h2><h3 id="性能瓶颈定位"><a href="#性能瓶颈定位" class="headerlink" title="性能瓶颈定位"></a>性能瓶颈定位</h3><blockquote><p>mpstat, iostat, sar，vmstat<br>使用索引，使用EXPLAIN分析查询以及调整MySQL的内部配置</p></blockquote><h3 id="查询与索引优化分析"><a href="#查询与索引优化分析" class="headerlink" title="查询与索引优化分析"></a>查询与索引优化分析</h3><p>（1）show 命令;</p><blockquote><p>查看MySQL状态及变量，找到系统的瓶颈<br>show global status、show variables等</p></blockquote><p>（2）慢查询日志</p><p>开启方式：</p><p>①：在配置文件my.cnf中在[mysqld]一行下面加入3个配置参数，并重启mysql服务</p><pre><code>slow_query_log = 1    //0关闭  1开启slow_query_log_file = /usr/local/mysql/data/slow-query.log    //慢查询日志存放地点long_query_time = 1                              //表示查询超过1秒才记录  </code></pre><p>②：通过命令行设置变量来即时启动慢日志查询</p><pre><code>mysql&gt; set global slow_query_log =on;mysql&gt; set long_query_time = 0.01;mysql&gt; set global slow_query_log_file= &quot;/usr/local/mysql/data/slow-query.log&quot;;</code></pre><p>（3）explain分析查询</p><blockquote><p>EXPLAIN字段：<br>Table：显示这一行的数据是关于哪张表的<br>type：这是最重要的字段之一，显示查询使用了何种类型。从最好到最差的连接类型为system、const、eq_reg、ref、range、index和ALL<br>possible_keys：显示可能应用在这张表中的索引。如果为空，没有可能的索引。<br>key：实际使用的索引。如果为NULL，则没有使用索引。<br>key_len：使用的索引的长度。在不损失精确性的情况下，长度越短越好<br>ref：显示索引的哪一列被使用了，如果可能的话，是一个常数<br>rows：MySQL认为必须检索的用来返回请求数据的行数<br>Extra：关于MYSQL如何解析查询的额外信息</p></blockquote><p>（4）profiling分析查询</p><p>查询状态：</p><pre><code>show variables like &apos;%profiling%&apos;;//off表示未开启或select @@profiling; //0表示未开启</code></pre><p>开启与关闭语句：</p><pre><code>set profiling=1; //开启set profiling=0; //关闭</code></pre><p>查询语句：</p><pre><code>SHOW PROFILE [type [, type] ... ]  [FOR QUERY n]type:  ALL:显示所有的开销信息  BLOCK IO:显示块IO相关开销  CPU:显示用户CPU时间、系统CPU时间  IPC:显示发送和接收相关开销信息   PAGE FAULTS:显示页面错误相关开销信息   SWAPS:显示交换次数相关开销的信息</code></pre><h2 id="3-索引优化"><a href="#3-索引优化" class="headerlink" title="3.索引优化"></a>3.索引优化</h2><h3 id="连接请求的变量"><a href="#连接请求的变量" class="headerlink" title="连接请求的变量"></a>连接请求的变量</h3><p>（1）max_connections—MySQL的最大连接数</p><p>查看：</p><pre><code>mysql&gt;show variables like ‘max_connections’ 最大连接数mysql&gt;show  status like ‘max_used_connections’ 响应的连接数max_used_connections / max_connections * 100% （理想值≈ 85%） </code></pre><p>修改（/etc/my.cnf文件）：</p><pre><code>max_connections = 1024</code></pre><blockquote><p>数值过小：ERROR 1040: Too many connections<br>max_used_connections跟max_connections相同那么就是max_connections设置过低或者超过服务器负载上限了，低于10%则设置过大</p></blockquote><p>(2)back_log—暂存的连接数量</p><h3 id="连接请求的变量-1"><a href="#连接请求的变量-1" class="headerlink" title="连接请求的变量"></a>连接请求的变量</h3><h3 id="连接请求的变量-2"><a href="#连接请求的变量-2" class="headerlink" title="连接请求的变量"></a>连接请求的变量</h3><h3 id="连接请求的变量-3"><a href="#连接请求的变量-3" class="headerlink" title="连接请求的变量"></a>连接请求的变量</h3><h3 id="连接请求的变量-4"><a href="#连接请求的变量-4" class="headerlink" title="连接请求的变量"></a>连接请求的变量</h3><h3 id="连接请求的变量-5"><a href="#连接请求的变量-5" class="headerlink" title="连接请求的变量"></a>连接请求的变量</h3>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
          <category> MYSQL性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL知识整理（MYSQL性能优化---性能因素分析）</title>
      <link href="/2019/07/01/MYSQL%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88MYSQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E6%80%A7%E8%83%BD%E5%9B%A0%E7%B4%A0%E5%88%86%E6%9E%90%EF%BC%89/"/>
      <url>/2019/07/01/MYSQL%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88MYSQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E6%80%A7%E8%83%BD%E5%9B%A0%E7%B4%A0%E5%88%86%E6%9E%90%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>MYSQL知识整理（MYSQL性能优化—性能因素分析）<br><a id="more"></a></p><h2 id="1-商业需求对性能的影响"><a href="#1-商业需求对性能的影响" class="headerlink" title="1.商业需求对性能的影响"></a>1.商业需求对性能的影响</h2><blockquote><p>不合理需求造成资源投入产出比过低</p><p>是否创建单独功能表</p><p>无需使用实时刷新时使用实时刷新</p><p>MyISAM 和Innodb 选取</p></blockquote><h2 id="2-系统架构及实现的影响"><a href="#2-系统架构及实现的影响" class="headerlink" title="2.系统架构及实现的影响"></a>2.系统架构及实现的影响</h2><h3 id="数据是否存放类型合理"><a href="#数据是否存放类型合理" class="headerlink" title="数据是否存放类型合理"></a>数据是否存放类型合理</h3><blockquote><p>二进制多媒体数据:是否存放图片 、视频等类型文件，其会造成内存资源匮乏</p><p>超大文本数据：造成性能低下，空间占用浪费问题</p></blockquote><h3 id="是否使用缓存"><a href="#是否使用缓存" class="headerlink" title="是否使用缓存"></a>是否使用缓存</h3><blockquote><p>Cache机制 ：大量的查询会浪费系统资源消耗，可采用Cache，加快查询速率</p></blockquote><h2 id="3-其他因素"><a href="#3-其他因素" class="headerlink" title="3.其他因素"></a>3.其他因素</h2><h3 id="查询语句对性能的影响"><a href="#查询语句对性能的影响" class="headerlink" title="查询语句对性能的影响"></a>查询语句对性能的影响</h3><blockquote><p>查询语句的优化</p></blockquote><h3 id="数据库Schema设计对性能的影响"><a href="#数据库Schema设计对性能的影响" class="headerlink" title="数据库Schema设计对性能的影响"></a>数据库Schema设计对性能的影响</h3><blockquote><p>优化表设计</p></blockquote><h3 id="硬件选择对性能的影响"><a href="#硬件选择对性能的影响" class="headerlink" title="硬件选择对性能的影响"></a>硬件选择对性能的影响</h3><blockquote><p>硬件按需选取及性能优化</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
          <category> MYSQL性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL知识整理（MYSQL基础--流程控制结构）</title>
      <link href="/2019/07/01/MYSQL%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88MYSQL%E5%9F%BA%E7%A1%80-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84%EF%BC%89/"/>
      <url>/2019/07/01/MYSQL%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88MYSQL%E5%9F%BA%E7%A1%80-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>MYSQL知识整理（MYSQL基础–流程控制结构）<br><a id="more"></a></p><h2 id="1-结构介绍"><a href="#1-结构介绍" class="headerlink" title="1.结构介绍"></a>1.结构介绍</h2><table><thead><tr><th style="text-align:left">结构名称</th><th style="text-align:left">定义</th></tr></thead><tbody><tr><td style="text-align:left">顺序结构</td><td style="text-align:left">默认，按顺序执行</td></tr><tr><td style="text-align:left">分支结构</td><td style="text-align:left">设置多条执行方向，按条件选择一条执行</td></tr><tr><td style="text-align:left">循环结构</td><td style="text-align:left">按条件，重复执行一段代码</td></tr></tbody></table><h2 id="2-顺序结构"><a href="#2-顺序结构" class="headerlink" title="2.顺序结构"></a>2.顺序结构</h2><p>定义：按代码编写顺序自上而下执行，为默认。</p><h2 id="3-分支结构"><a href="#3-分支结构" class="headerlink" title="3.分支结构"></a>3.分支结构</h2><h3 id="IF函数"><a href="#IF函数" class="headerlink" title="IF函数"></a>IF函数</h3><p>定义：双分支方向选择</p><p>基本语句：</p><pre><code>if(表达式1,表达式2,表达式3)</code></pre><p>注：表达式1成立返回表达式2，否则表达式3</p><h3 id="CASE结构"><a href="#CASE结构" class="headerlink" title="CASE结构"></a>CASE结构</h3><p>定义：根据条件判断选择分支方向，类似switch</p><p>基本语句：</p><pre><code>case 变量|表达式|字段when 要判断的值 then 返回的值1或语句1;when 要判断的值 then 返回的值2或语句2;...else 要返回的值n或语句n;end case;</code></pre><h3 id="IF结构"><a href="#IF结构" class="headerlink" title="IF结构"></a>IF结构</h3><p>定义：根据条件判断选择分支方向，类似IF</p><p>基本语句：</p><pre><code>if 条件1 then 语句1;else if 条件2 then 语句2;...else 语句n;    #可以省略end if;</code></pre><h2 id="3-循环结构"><a href="#3-循环结构" class="headerlink" title="3.循环结构"></a>3.循环结构</h2><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>定义：根据条件判断是否执行，类似while，先判断后执行（可能0次执行）</p><p>基本语句：</p><pre><code>while 循环条件 do循环体;end while ;</code></pre><h3 id="while-1"><a href="#while-1" class="headerlink" title="while"></a>while</h3><p>定义：无限循环循环体，类似死锁，可使用LEAVE退出</p><p>基本语句：</p><pre><code>loop循环体;end loop </code></pre><h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h3><p>定义：根据条件判断是否执行， 先执行后判断（至少1次执行）</p><p>基本语句：</p><pre><code>repeat循环体;until 结束循环的条件end repeat </code></pre>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
          <category> MYSQL基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL知识整理（MYSQL性能优化---架构介绍）</title>
      <link href="/2019/06/28/MYSQL%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88MYSQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D%EF%BC%89/"/>
      <url>/2019/06/28/MYSQL%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88MYSQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>MYSQL知识整理（MYSQL性能优化—架构介绍）<br><a id="more"></a></p><h2 id="1-基本内容"><a href="#1-基本内容" class="headerlink" title="1.基本内容"></a>1.基本内容</h2><blockquote><p>mysql内核<br>sql优化工程师<br>mysql服务器的优化<br>查询语句优化<br>主重复制<br>软硬件升级<br>容灾备份<br>sql编程</p></blockquote><h2 id="2-逻辑架构介绍"><a href="#2-逻辑架构介绍" class="headerlink" title="2.逻辑架构介绍"></a>2.逻辑架构介绍</h2><h3 id="（1）连接层"><a href="#（1）连接层" class="headerlink" title="（1）连接层"></a>（1）连接层</h3><blockquote><p>最上层是一些客户端和连接服务，包含本地sock通信和大多数基于客户端/服务端工具实现的类似tcp/ip的通信。主要完成一些类似于连接处理、授权认证以及相关的安全方案。在该层上引起了线程池的的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全连接。服务器也会为安全接入的每个客户端验证它锁具有的操作权限</p></blockquote><h3 id="（2）服务层"><a href="#（2）服务层" class="headerlink" title="（2）服务层"></a>（2）服务层</h3><blockquote><p>第二层架构主要完成大多数的核心服务功能。如SQL接口，并完成缓存的查询。SQL的分析和优化以及部分内置函数的执行。所有跨存储引擎的功能也在这层实现。如过程、函数等、在该层，服务器会解析查询并创建相应的内部解析树，并对其完成相应的优化如确定查询表的顺序，是否利用索引等。最后生成相应的执行操作。如果是select语句。服务器会查询内部的缓存。如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提高系统的性能</p></blockquote><h3 id="（3）引擎层"><a href="#（3）引擎层" class="headerlink" title="（3）引擎层"></a>（3）引擎层</h3><blockquote><p>存储引擎层，存储引擎真正的负责mysq中数据的存储和提取。服务器通过API与存储引擎进行通信。不同的存储引擎具有的功能不同。这样我们可以根据自己的实际需要进行选取。常用的有Innodb、MyIsam等</p></blockquote><h3 id="（4）存储层"><a href="#（4）存储层" class="headerlink" title="（4）存储层"></a>（4）存储层</h3><blockquote><p>数据存储层，主要将数据存储在运行于裸设备的文件系统上，并完成与存储引擎的交互</p></blockquote><h3 id="（5）细项分析"><a href="#（5）细项分析" class="headerlink" title="（5）细项分析"></a>（5）细项分析</h3><p><img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/mysql/advance/mysql1-1.png" height="60%" width="100%"></p><blockquote><p>Connectors ：不同语言中与SQL的交互</p><p>Management Serveices &amp; Utilities： 系统管理和控制工具</p><p>Connection Pool: 连接池 管理缓冲用户连接，线程处理等需要缓存的需求。 负责监听对 MySQL Server 的各种请求，接收连接请求，转发所有连接请求到线程管理模块。每一个连接上 MySQL Server 的客户端请求都会被分配 （或创建）一个连接线程为其单独服务。而连接线程的主要工作就是负责 MySQL Server 与客户端的通信， 接受客户端的命令请求，传递 Server 端的结果信息等。线程管理模块则负责管理维护这些连接线程。包括线程的创建，线程的 cache 等。</p><p>SQL Interface: SQL接口。接受用户的SQL命令，并且返回用户需要查询的结果</p><p>Parser: 解析器。SQL命令传递到解析器的时候会被解析器验证和解析。解析器是由Lex和YACC实现的，是一个很长的脚本。 在 MySQL中我们习惯将所有 Client 端发送给Server 端的命令都称为 query ，在 MySQL Server 里面，连接线程接收到客户端的一个 Query 后， 会直接将该 query 传递给专门负责将各种 Query 进行分类然后转发给各个对应的处理模块。<br>主要功能：<br>　　 a . 将SQL语句进行语义和语法的分析，分解成数据结构，然后按照不同的操作类型进行分类，然后做出针对性的转发到后续步骤，以后SQL语句的传递和处理就是基于这个结构的。</p><p>　　 b. 如果在分解构成中遇到错误，那么就说明这个sql语句是不合理的</p><p>Optimizer: 查询优化器。SQL语句在查询之前会使用查询优化器对查询进行优化。就是优化客户端请求的 query（sql语句） ，根据客户端请求的 query 语句，和数据库中的一些统计信息，在一系列算法的基础上进行分析，得出一个最优的策略，告诉后面的程序如何取得这个 query 语句的结果 他使用的是“选取-投影-联接”策略进行查询。</p><p>Cache和Buffer： 查询缓存。他的主要功能是将客户端提交 给MySQL 的 Select 类 query 请求的返回结果集 cache 到内存中，与该 query 的一个 hash 值 做一个对应。该 Query所取数据的基表发生任何数据的变化之后， MySQL 会自动使该 query 的Cache 失效。在读写比例非常高的应用系统中， Query Cache 对性能的提高是非常显著的。当然它对内存 的消耗也是非常大的。 如果查询缓存有命中的查询结果，查询语句就可以直接去查询缓存中取数据。这个缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，key缓存，权限缓存等</p><p>存储引擎接口：存储引擎接口模块可以说是 MySQL 数据库中最有特色的一点了。目前各种数据库产品中，基本上只有 MySQL 可以实现其底层数据存储引擎的插件式管理。这个模块实际上只是 一个抽象类，但正是因为它成功地将各种数据处理高度抽象化，才成就了今天 MySQL 可插拔存储引擎的特色。</p></blockquote><h2 id="3-引擎对比"><a href="#3-引擎对比" class="headerlink" title="3.引擎对比"></a>3.引擎对比</h2><h3 id="查看引擎"><a href="#查看引擎" class="headerlink" title="查看引擎"></a>查看引擎</h3><pre><code>show engines; 查看引擎show variables like &apos;%storage_engine%&apos;;#查看默认与当前的存储引擎</code></pre><h3 id="引擎对比细项"><a href="#引擎对比细项" class="headerlink" title="引擎对比细项"></a>引擎对比细项</h3><table><thead><tr><th style="text-align:left">对比名称</th><th style="text-align:left">MyISAM</th><th>InnoDB</th></tr></thead><tbody><tr><td style="text-align:left">主外键</td><td style="text-align:left">不支持</td><td>支持</td></tr><tr><td style="text-align:left">事务</td><td style="text-align:left">不支持</td><td>支持</td></tr><tr><td style="text-align:left">行表锁</td><td style="text-align:left">表锁，即使操作一条记录也会锁住整个表，不适合高并发的</td><td>行锁，操作时候只锁住某一行，不对其他行有影响适合高并发的操作操作</td></tr><tr><td style="text-align:left">缓存</td><td style="text-align:left">只缓存索引，不缓存真实数据</td><td>不仅缓存索引还要缓存真实数据，对内存要求.比较高，而且内存大小对性能有决定性的影响</td></tr><tr><td style="text-align:left">空间</td><td style="text-align:left">小</td><td>大</td></tr><tr><td style="text-align:left">注重点</td><td style="text-align:left">性能</td><td>事务</td></tr><tr><td style="text-align:left">mysql是否集成</td><td style="text-align:left">是</td><td>是</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
          <category> MYSQL性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/06/24/hexo_test/"/>
      <url>/2019/06/24/hexo_test/</url>
      
        <content type="html"><![CDATA[<p>hexo简单小命令<br><a id="more"></a></p><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL知识整理（MYSQL基础--函数）</title>
      <link href="/2019/06/24/MYSQL%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88MYSQL%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%EF%BC%89/"/>
      <url>/2019/06/24/MYSQL%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88MYSQL%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>MYSQL知识整理（MYSQL基础–函数）<br><a id="more"></a></p><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>是一组为了完成特定功能的SQL语句集，经编译后存储在数据库中，用户通过指定存储过程的名字并给定参数（如果该存储过程带有参数）来调用执行它</p></blockquote><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><blockquote><p>灵活性：可完成复杂运算及使用<br>组件化：存储过程可被多次调用<br>速度较快：预编译<br>网络流量低：各个操作使用调用方式，降低负载<br>安全性较高：能权限操作限制</p></blockquote><h2 id="2-基本操作"><a href="#2-基本操作" class="headerlink" title="2.基本操作"></a>2.基本操作</h2><h3 id="基本语句"><a href="#基本语句" class="headerlink" title="基本语句"></a>基本语句</h3><pre><code>CREATE FUNCTION fu_name ([func_parameter[,...]]) RETURNS type  [characteristic ...] routine_body</code></pre><p>注：</p><blockquote><p>fc_name：参数是存储函数的名称</p><p>func_parameter：表示存储函数的参数列表</p><p>RETURNS type：指定返回值的类型</p><p>characteristic：参数指定存储函数的特性</p><p>routine_body：SQL代码的内容，用BEGIN…END来标志SQL代码的开始和结束</p></blockquote><p>例子：</p><pre><code>CREATE  FUNCTION  name_from_employee (emp_id INT )    RETURNS VARCHAR(20)    BEGIN    RETURN  (SELECT  name    FROM  employee    WHERE  num=emp_id );    END </code></pre><h3 id="变量的声明及赋值"><a href="#变量的声明及赋值" class="headerlink" title="变量的声明及赋值"></a>变量的声明及赋值</h3><p>声明：</p><pre><code>DECLARE  var_name[,...]  type  [DEFAULT value]//例子DECLARE  my_sql  INT  DEFAULT 10 ;</code></pre><p>赋值：</p><pre><code>SET  var_name = expr [, var_name = expr] ... //例子SET  my_sql = 30 ; select  into赋值SELECT  col_name[,…]  INTO  var_name[,…] FROM  table_name  WEHRE  condition </code></pre><h3 id="调用语句"><a href="#调用语句" class="headerlink" title="调用语句"></a>调用语句</h3><pre><code>函数名即可，如getYear();</code></pre><h3 id="删除语句"><a href="#删除语句" class="headerlink" title="删除语句"></a>删除语句</h3><pre><code>DROP FUNCTION 函数名</code></pre><h3 id="查看语句"><a href="#查看语句" class="headerlink" title="查看语句"></a>查看语句</h3><pre><code>SHOW CREATE FUNCTION  方法名</code></pre><h2 id="3-定义条件和处理程序"><a href="#3-定义条件和处理程序" class="headerlink" title="3.定义条件和处理程序"></a>3.定义条件和处理程序</h2><h3 id="定义条件"><a href="#定义条件" class="headerlink" title="定义条件"></a>定义条件</h3><p>基本语句：</p><pre><code>DECLARE  condition_name  CONDITION  FOR  condition_value  condition_value:    SQLSTATE [VALUE] sqlstate_value | mysql_error_code </code></pre><p>注：</p><blockquote><p>condition_name：参数表示条件的名称</p><p>condition_value：参数表示条件的类型</p><p>sqlstate_value：参数和mysql_error_code参数都可以表示MySQL的错误。例如ERROR 1146(42S02)中，sqlstate_value值是42S02，mysql_error_code值是1146</p></blockquote><h3 id="处理程序"><a href="#处理程序" class="headerlink" title="处理程序"></a>处理程序</h3><p>基本语句</p><pre><code>DECLARE handler_type HANDLER FOR condition_value[,...] sp_statement  handler_type:  CONTINUE | EXIT | UNDO  condition_value:  SQLSTATE [VALUE] sqlstate_value |condition_name  | SQLWARNING     | NOT FOUND  | SQLEXCEPTION  | mysql_error_code </code></pre><p>注：</p><blockquote><p>handler_type：参数指明错误的处理方式，分别是CONTINUE、EXIT和UNDO</p><p>CONTINUE：表示遇到错误不进行处理，继续向下执行</p><p>EXIT表示遇到错误后马上退出</p><p>UNDO表示遇到错误后撤回之前的操作，MySQL中暂时还不支持这种处理方式</p><p>condition_value：参数指明错误类型，该参数有6个取值</p><p>sqlstate_value和mysql_error_code与条件定义中的是同一个意思<br>condition_name：DECLARE定义的条件名称</p><p>SQLWARNING：表示所有以01开头的sqlstate_value值</p><p>NOT FOUND：表示所有以02开头的sqlstate_value值</p><p>SQLEXCEPTION表示所有没有被SQLWARNING或NOT FOUND捕获的sqlstate_value值。sp_statemen表示一些存储过程或函数的执行语句</p></blockquote><p>程序捕获方式：</p><pre><code>//方法一：捕获sqlstate_value  DECLARE CONTINUE HANDLER FOR SQLSTATE &apos;42S02&apos;SET @info=&apos;CAN NOT FIND&apos;;  //方法二：捕获mysql_error_code  DECLARE CONTINUE HANDLER FOR 1146 SET @info=&apos;CAN NOT FIND&apos;;  //方法三：先定义条件，然后调用  DECLARE  can_not_find  CONDITION  FOR  1146 ;  DECLARE CONTINUE HANDLER FOR can_not_find SET @info=&apos;CAN NOT FIND&apos;;  //方法四：使用SQLWARNING  DECLARE EXIT HANDLER FOR SQLWARNING SET @info=&apos;ERROR&apos;;  //方法五：使用NOT FOUND  DECLARE EXIT HANDLER FOR NOT FOUND SET @info=&apos;CAN NOT FIND&apos;;  //方法六：使用SQLEXCEPTION  DECLARE EXIT HANDLER FOR SQLEXCEPTION SET @info=&apos;ERROR&apos;; </code></pre>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
          <category> MYSQL基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL知识整理（MYSQL基础--变量）</title>
      <link href="/2019/06/24/MYSQL%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88MYSQL%E5%9F%BA%E7%A1%80-%E5%8F%98%E9%87%8F%EF%BC%89/"/>
      <url>/2019/06/24/MYSQL%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88MYSQL%E5%9F%BA%E7%A1%80-%E5%8F%98%E9%87%8F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>MYSQL知识整理（MYSQL基础–变量）<br><a id="more"></a></p><h2 id="变量分类"><a href="#变量分类" class="headerlink" title="变量分类"></a>变量分类</h2><p>① 用户自定义变量</p><blockquote><p>局部变量<br>会话变量（用户变量）</p></blockquote><p>② 系统变量</p><blockquote><p>会话变量<br>全局变量</p></blockquote><h2 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h2><p>基本语句：</p><pre><code>第一种（default生命默认值）：declare user_name varchar default &apos;yiyu&apos;；第二种：set user_name=&apos;yiyu&apos;;第三种：select  into 语句</code></pre><h3 id="局部变量（用户）"><a href="#局部变量（用户）" class="headerlink" title="局部变量（用户）"></a>局部变量（用户）</h3><p>定义：作用于sql语块中，作用域仅限于该语句块内</p><p>例子(k为局部变量)</p><pre><code>drop procedure if exists bianliang;  create procedure bianliang  (  in i int,  in j int  )  begin  declare k int default 0;  set k = i * j;  select k as k;  end;</code></pre><h3 id="会话变量（用户）"><a href="#会话变量（用户）" class="headerlink" title="会话变量（用户）"></a>会话变量（用户）</h3><p>定义：为服务器为每个客户端连接维护的变量，每个客户端只能更改自己的变量</p><p>例子：</p><pre><code>//设值set session user_name = value;set @@session.user_name = value;set user_name = value;//取值select @@user_nameselect @@session.user_name;show session variables like &quot;%user%&quot;;//模糊查询法</code></pre><h3 id="全话变量（用户）"><a href="#全话变量（用户）" class="headerlink" title="全话变量（用户）"></a>全话变量（用户）</h3><p>定义：一般是用于初始化系统参数，生命周期直至重启或关闭，更改时需SUPER权限，并且重启后会被初始化为默认值。</p><p>例子：</p><pre><code>//设值set global user_name = value; set @@global.user_name = value;//取值select @@global.user_name;show global variables like &quot;%user%&quot;;</code></pre><p>注：如果global写明时，默认为session (其有GLOBAL、SESSION或者LOCAL)</p><h2 id="用户自定义变量"><a href="#用户自定义变量" class="headerlink" title="用户自定义变量"></a>用户自定义变量</h2><p>定义：</p><blockquote><p>由字母、数字、“.”、“_”和“$”组成<br>级别：会话级别（session）<br>作用域：其对应的客户端链接，断开即失效<br>不区分大小写<br>变量类型：整形、浮点型、二进制与非二进制串和NULL</p></blockquote><p>设值语句：</p><pre><code>SET @user_name = expr[, @var_name = expr] ...</code></pre><p>注：为了解决某些冲突问题，赋值有“=”和“:=”两种</p><p>例子：</p><pre><code>SET @user1=1, @user2=2, @user3:=4;SELECT @suer1, @user2, @user3, @user4 := @user1+@user2+@user3;</code></pre><p>注：</p><blockquote><p>不要在同一个非SET语句中同时赋值并使用同一个用户自定义变量<br>变量的值是在SQL发送到客户端后才计算的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
          <category> MYSQL基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL知识整理（MYSQL基础--存储过程）</title>
      <link href="/2019/06/24/MYSQL%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88MYSQL%E5%9F%BA%E7%A1%80-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%EF%BC%89/"/>
      <url>/2019/06/24/MYSQL%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88MYSQL%E5%9F%BA%E7%A1%80-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>MYSQL知识整理（MYSQL基础–存储过程）<br><a id="more"></a></p><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>是一组为了完成特定功能的SQL语句集，经编译后存储在数据库中，用户通过指定存储过程的名字并给定参数（如果该存储过程带有参数）来调用执行它</p></blockquote><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><blockquote><p>灵活性：可完成复杂运算及使用<br>组件化：存储过程可被多次调用<br>速度较快：预编译<br>网络流量低：各个操作使用调用方式，降低负载<br>安全性较高：能权限操作限制</p></blockquote><h2 id="2-基本操作"><a href="#2-基本操作" class="headerlink" title="2.基本操作"></a>2.基本操作</h2><h3 id="基本语句"><a href="#基本语句" class="headerlink" title="基本语句"></a>基本语句</h3><pre><code>//类型一CREATE PROCEDURE  过程名([[IN|OUT|INOUT] 参数名 数据类型[,[IN|OUT|INOUT] 参数名 数据类型…]]) [特性 ...] 过程体//类型二DELIMITER //  CREATE PROCEDURE myproc  (    OUT s int    )BEGIN  SELECT COUNT(*) INTO s FROM students;END//DELIMITER ;</code></pre><p>注：</p><blockquote><p>“//“：为分隔符，表明其中间的内容为存储过程，否则为sql语句（$）</p><p>在mysql中，其语句遇到”;”回车后会执行此句，但有时候不想如此，用DELIMITER，其中间的内容遇到”;”回车后不会立即执行，而是全部加载完成后再执行</p><p>多个参数用”,”分隔</p><p>参数类型：IN（必须在调用存储过程时指定，该参数的值不能被返回）,OUT（该值可在存储过程内部被改变，并可返回）,INOUT（用时指定，并且可被改变和返回）</p><p>过程体：使用BEGIN与END进行标识,如果只有一句话，其可省略</p><p>可使用set（赋值）和declare（声明）</p><p>更改只能更改名字及定义，内容不可更换</p><p>带@的参数为用户变量</p></blockquote><h3 id="调用语句"><a href="#调用语句" class="headerlink" title="调用语句"></a>调用语句</h3><pre><code>//定义过程create procedure getcount(in count int,declear sum int,set price = 100)beginset sum:=count+price;end//输出1000call getcount(10)</code></pre><h3 id="删除语句"><a href="#删除语句" class="headerlink" title="删除语句"></a>删除语句</h3><pre><code>DROP PROCEDURE 存储过程名</code></pre><h3 id="查看语句"><a href="#查看语句" class="headerlink" title="查看语句"></a>查看语句</h3><pre><code>SHOW CREATE PROCEDURE 存储过程名</code></pre>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
          <category> MYSQL基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL知识整理（MYSQL基础--视图）</title>
      <link href="/2019/06/21/MYSQL%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88MYSQL%E5%9F%BA%E7%A1%80-%E8%A7%86%E5%9B%BE%EF%BC%89/"/>
      <url>/2019/06/21/MYSQL%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88MYSQL%E5%9F%BA%E7%A1%80-%E8%A7%86%E5%9B%BE%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>MYSQL知识整理（MYSQL基础–视图）<br><a id="more"></a></p><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><blockquote><p>数据库中的虚拟逻辑表，自定义展现基表（用来创建视图的表）</p></blockquote><h2 id="2-好处"><a href="#2-好处" class="headerlink" title="2.好处"></a>2.好处</h2><blockquote><p>简单：数据为已经过滤好的集合，无需关系复杂的表结构<br>安全：用户只能看到视图规定的数据<br>独立：基表的增加对视图无影响</p></blockquote><p>注：为了保障数据安全性，提高查询效率</p><h3 id="3-基本语句"><a href="#3-基本语句" class="headerlink" title="3.基本语句"></a>3.基本语句</h3><pre><code>CREATE [OR REPLACE] [ALGORITHM = {UNDEFINED | MERGE | TEMPTABLE}]VIEW view_name [(column_list)]AS select_statement[WITH [CASCADED | LOCAL] CHECK OPTION]</code></pre><p>简化：</p><pre><code>create view &lt;视图名称&gt;[(column_list)]as select语句with check option;</code></pre><p>例子：</p><p>create view userView(编号,名字,性别,密码)<br>as<br>select userID,username,usersex,password from userInfo<br>where sex=’男’<br>with check option;</p><p>注：多表同理，视图名后面的列的数量必须匹配select子句中的列的数量</p><h2 id="4-视图查看"><a href="#4-视图查看" class="headerlink" title="4.视图查看"></a>4.视图查看</h2><p>查看视图信息：</p><pre><code>show create view viewname</code></pre><p>查看数图数据：</p><pre><code>select * from viewname;</code></pre><h2 id="5-视图更改"><a href="#5-视图更改" class="headerlink" title="5.视图更改"></a>5.视图更改</h2><p>基本格式：</p><pre><code>create or replace view view_name as select</code></pre><p>ALTER格式：</p><pre><code>ALTER    [ALGORITHM = {UNDEFINED | MERGE | TEMPTABLE}]    [DEFINER = { user | CURRENT_USER }]    [SQL SECURITY { DEFINER | INVOKER }]VIEW view_name [(column_list)]    AS select_statement    [WITH [CASCADED | LOCAL] CHECK OPTION]</code></pre><p>注：修改视图是指修改数据库中已存在的表的定义，当基表的某些字段发生改变时，可以通过修改视图来保持视图和基本表之间一致</p><h2 id="6-视图删除"><a href="#6-视图删除" class="headerlink" title="6.视图删除"></a>6.视图删除</h2><p>基本语句:</p><pre><code>DROP VIEW [IF EXISTS]   view_name [, view_name] ...</code></pre><p>注：只能删除视图的定义，不会删除数据</p><h2 id="7-视图无法处理"><a href="#7-视图无法处理" class="headerlink" title="7.视图无法处理"></a>7.视图无法处理</h2><blockquote><p>①select子句中包含distinct</p><p>②select子句中包含组函数</p><p>③select语句中包含group by子句</p><p>④select语句中包含order by子句</p><p>⑤select语句中包含union 、union all等集合运算符</p><p>⑥where子句中包含相关子查询</p><p>⑦from子句中包含多个表</p><p>⑧如果视图中有计算列，则不能更新</p><p>⑨如果基表中有某个具有非空约束的列未出现在视图定义中，则不能做insert操作</p></blockquote><h2 id="8-WITH-CHECK-OPTION"><a href="#8-WITH-CHECK-OPTION" class="headerlink" title="8.WITH CHECK OPTION"></a>8.WITH CHECK OPTION</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><blockquote><p>对视图所做的DML操作的结果，不能违反视图的WHERE条件的限制.未返回抛出异常</p></blockquote><h3 id="检查程度"><a href="#检查程度" class="headerlink" title="检查程度"></a>检查程度</h3><blockquote><p>①WITH CASCADED CHECK OPTION：检查所有的视图<br>例如：嵌套视图及其底层的视图</p><p>②WITH LOCAL CHECK OPTION：只检查将要更新的视图本身<br>对嵌套视图不检查其底层的视图</p></blockquote><h3 id="ALGORITHM选项"><a href="#ALGORITHM选项" class="headerlink" title="ALGORITHM选项　"></a>ALGORITHM选项　</h3><p>定义：处理定义视图的select语句中使用的方法</p><blockquote><p>①UNDEFINED：MySQL将自动选择所要使用的算法（默认）</p><p>②MERGE：将视图的语句与视图定义合并起来，使得视图定义的某一部分取代语句的对应部分</p><p>③TEMPTABLE：将视图的结果存入临时表，然后使用临时表执行语句</p></blockquote><h3 id="DEFINER选项"><a href="#DEFINER选项" class="headerlink" title="DEFINER选项　"></a>DEFINER选项　</h3><p>定义:出谁是视图的创建者或定义者</p><blockquote><p>①definer= ‘用户名‘@’登录主机’</p><p>②如果不指定该选项，则创建视图的用户就是定义者，指定关键字CURRENT_USER(当前用户)和不指定该选项效果相同</p></blockquote><h3 id="SQL-SECURITY选项"><a href="#SQL-SECURITY选项" class="headerlink" title="SQL SECURITY选项　"></a>SQL SECURITY选项　</h3><p>定义：视图的select权限</p><blockquote><p>①SQL SECURITY DEFINER：定义(创建)视图的用户必须对视图所访问的表具有select权限，也就是说将来其他用户访问表的时候以定义者的身份，此时其他用户并没有访问权限。（默认）</p><p>②SQL SECURITY INVOKER：访问视图的用户必须对视图所访问的表具有select权限。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
          <category> MYSQL基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL知识整理（MYSQL基础--TCL事务控制语言）</title>
      <link href="/2019/06/21/MYSQL%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88MYSQL%E5%9F%BA%E7%A1%80-TCL%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6%E8%AF%AD%E8%A8%80%EF%BC%89/"/>
      <url>/2019/06/21/MYSQL%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88MYSQL%E5%9F%BA%E7%A1%80-TCL%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6%E8%AF%AD%E8%A8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>MYSQL知识整理（MYSQL基础–TCL事务控制语言）<br><a id="more"></a></p><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><blockquote><p>一个或一组sql语句组成一个执行单元，这个执行单元要么全部执行，要么全部不执行</p></blockquote><h2 id="2-特性"><a href="#2-特性" class="headerlink" title="2.特性"></a>2.特性</h2><blockquote><p>原子性：一个事务不可再分割，要么都执行要么都不执行<br>一致性：一个事务执行会使数据从一个一致状态切换到另外一个一致状态<br>隔离性：一个事务的执行不受其他事务的干扰<br>持久性：一个事务一旦提交，则会永久的改变数据库的数据</p></blockquote><h2 id="3-事务的隔离级别"><a href="#3-事务的隔离级别" class="headerlink" title="3.事务的隔离级别"></a>3.事务的隔离级别</h2><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">脏读</th><th style="text-align:left">不可重复度</th><th style="text-align:left">幻度</th></tr></thead><tbody><tr><td style="text-align:left">read uncommitted</td><td style="text-align:left">是</td><td style="text-align:left">是</td><td style="text-align:left">是</td></tr><tr><td style="text-align:left">read committed</td><td style="text-align:left">否</td><td style="text-align:left">是</td><td style="text-align:left">是</td></tr><tr><td style="text-align:left">repeatable read</td><td style="text-align:left">否</td><td style="text-align:left">否</td><td style="text-align:left">是</td></tr><tr><td style="text-align:left">serializable</td><td style="text-align:left">否</td><td style="text-align:left">否</td><td style="text-align:left">否</td></tr></tbody></table><blockquote><p>读未提交（read uncommited）：即事务对数据库数据所做的修改，在事务未提交之前，可以被其他事务看到。A事务对数据库数据做的修改，在A事务未提交时，事务B可读到A事务对数据所做的修改。<br>容易产生的问题：脏读。由于事务B可读到事务A所做的修改，但是A并没有提交，如果事务A执行过程中发生异常回滚，则会导致事务B读到的是错误数据，即脏数据</p><p>读已提交（read commited）：A、B两个数据同时对数据库中同一条数据做修改，A事务开启，读取数据，此时，B事务也开启，读取数据，并对数据做出修改，然后提交，此时事务A继续执行，执行完后，再次读取数据，发现两次读取的结果不一样，由此产生不可重复读的问题。</p><p>可重复读（repeatable read）：A事务读取数据库数据，在处理业务的过程中事务B读取数据并修改完成后，事务A再次读取数据时，所得结果和之前读取的数据一致，并且事务A提交后，不会损害数据的一致性。可能产生的问题：幻读。如：事务A开启，读取用户x的age为15，B事务开启age读取用户x的age并加1，此时用户x的age为16，A事务继续执行，将用户x的age加1，提交后，发现x用户的age值为17.从用户的角度来看，数据的一致性并没有被破坏，但A事务可能将读取到的数据15返回给用户，导致幻读。</p><p>串行化（serializable）：表上的一个事务开启后，在该事务提交之前，其他事务不能对表中的数据做任何修改。该隔离级别会锁表。</p></blockquote><p>注：</p><blockquote><p>mysql中默认 第三个隔离级别 repeatable read</p><p>查看隔离级别，select @@tx_isolation;</p><p>设置隔离级别，set session|global transaction isolation level 隔离级别</p><p>查看事务自动提交是否开启(on表示开启，off表示关闭)，SHOW VARIABLES LIKE ‘autocommit’</p><p>查看数据库支持的存储引擎，SHOW ENGINES</p><p>innodb支持事务，而myisam、memory等不支持事务</p></blockquote><h2 id="4-事务的创建"><a href="#4-事务的创建" class="headerlink" title="4.事务的创建"></a>4.事务的创建</h2><h3 id="隐式"><a href="#隐式" class="headerlink" title="隐式"></a>隐式</h3><blockquote><p>定义：没有明显的开启和结束标记，一般insert、update、delete等会自动触发</p></blockquote><h3 id="显式"><a href="#显式" class="headerlink" title="显式"></a>显式</h3><blockquote><p>定义：有明显的开启和结束标记，需先设置自动提交功能为禁用（set autocommit=0;1为开启）<br>START TRANSACTION能强制开启事务</p></blockquote><p>开启步骤：</p><blockquote><p>1：set autocommit=0;<br>2：编写事务中的条件语句，如insert、update、delete等<br>3：commit命令提交事务<br>4：如果想要回滚事务，rollback（savepoint 节点名，为设置保存点）</p></blockquote><h2 id="5-事务机制"><a href="#5-事务机制" class="headerlink" title="5.事务机制"></a>5.事务机制</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>MyISAM存储引擎采用的是表级锁<br>InnoDB存储引擎采用的是行级锁、也支表级锁</p></blockquote><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><blockquote><p>共享读锁/共享锁（lock table 表名 read，S锁）—自己只能读，其他（读-可以，写-堵塞）<br>独占写锁/排它锁（lock table 表名 write，X锁）—自己可读可写，其他（读-堵塞，写-堵塞）</p></blockquote><p>注：释放方式（unlock table）</p><h3 id="MyISAM表锁"><a href="#MyISAM表锁" class="headerlink" title="MyISAM表锁"></a>MyISAM表锁</h3><p>定义：MyISAM只支持表锁，锁的是整张表，读取数据的时候会加S锁，增删改的时候会加X锁</p><h3 id="InnoDB表锁"><a href="#InnoDB表锁" class="headerlink" title="InnoDB表锁"></a>InnoDB表锁</h3><p>定义：innoDB既支持表锁也支持行锁，可以锁行级别的数据，增删改的时候会对数据对象（可能是一行或者多行或者一张表）加X锁，读取的时候一般不加锁</p><h3 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h3><p>定义：行锁就是锁一条数据</p>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
          <category> MYSQL基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL知识整理（MYSQL基础--DML数据操作语言）</title>
      <link href="/2019/06/20/MYSQL%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88MYSQL%E5%9F%BA%E7%A1%80-DML%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E8%AF%AD%E8%A8%80%EF%BC%89/"/>
      <url>/2019/06/20/MYSQL%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88MYSQL%E5%9F%BA%E7%A1%80-DML%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E8%AF%AD%E8%A8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>MYSQL知识整理（MYSQL基础–DML数据操作语言）<br><a id="more"></a></p><h2 id="1-数据库插入"><a href="#1-数据库插入" class="headerlink" title="1.数据库插入"></a>1.数据库插入</h2><h3 id="基本语句"><a href="#基本语句" class="headerlink" title="基本语句"></a>基本语句</h3><pre><code>INSERT INTO table_name ( field1, field2,...fieldN ) VALUES( value1, value2,...valueN )</code></pre><p>例子：</p><pre><code>insert into userInfo (userID,username,password) values(2,&apos;yiyu&apos;,&apos;123456&apos;)</code></pre><p>注：如果插入所有列，( field1, field2,…fieldN )可省略</p><p>例子：<br>    insert into userInfo  values(2,’yiyu’,’123456’,’哈哈哈’)</p><h3 id="插入多值"><a href="#插入多值" class="headerlink" title="插入多值"></a>插入多值</h3><pre><code>INSERT INTO table_name (field1, field2,...fieldN) VALUES (value1, value2,...valueN ),  (value1, value2,...valueN ),..., (value1, value2,...valueN );</code></pre><p>例子：</p><p>insert into userInfo (userID,username,password) values(1,’yiyu1’,’123456’)，<br>values(2,’yiyu2’,’789’)，values(3,’yiyu3’,’abc’)</p><h3 id="插入查询语句"><a href="#插入查询语句" class="headerlink" title="插入查询语句"></a>插入查询语句</h3><pre><code>INSERT INTO  table_name  (column_list) SELECT (column_list) FROM table_name WHERE (condition)</code></pre><p>例子：</p><pre><code>insert into userInfo (userID,username,password)select  userID,username,password from userInfo where username =&apos;yiyu&apos;</code></pre><p>2.数据库更新</p><h3 id="基本语句-1"><a href="#基本语句-1" class="headerlink" title="基本语句"></a>基本语句</h3><pre><code>UPDATE table_name SET field1=value1, field2=value2,... [WHERE condition]</code></pre><p>解释：</p><blockquote><p>更新自疑惑多个字段<br>可设置条件更新指定字段<br>value可以使函数，如REPLACE(field1 ‘yiyu’, ‘yiyuhaha’)<br>where 条件语句可以使子查询</p></blockquote><p>例子：</p><pre><code>UPDATE userInfo SET username=&apos;yiyu&apos;, password=123456 WHERE userID=10</code></pre><h3 id="作用在多表的更新"><a href="#作用在多表的更新" class="headerlink" title="作用在多表的更新"></a>作用在多表的更新</h3><pre><code>UPDATE table_nameA a join table_nameB b on a. column_name1=b. column_name1SET a.column_name1 = value1,a.column_name2=value2,……,a.column_namen=valuenWHERE b. column_name2&gt;20</code></pre><p>注：根据table_nameB的条件更新table_nameA的数据</p><p>例子：</p><pre><code>update userInfo a join personIfo bon a.userID=b.userID set a.username=&apos;yiyu&apos;,a.password=123456where b.personID =100 </code></pre><h2 id="数据库删除"><a href="#数据库删除" class="headerlink" title="数据库删除"></a>数据库删除</h2><h3 id="基本语句-2"><a href="#基本语句-2" class="headerlink" title="基本语句"></a>基本语句</h3><pre><code>DELETE FROM table_name [WHERE condition]</code></pre><p>注：where条件可以使子查询</p><p>例子：</p><pre><code>delete drom userInfo where userID = 2</code></pre><p>作用在多表的删除</p><p>delete from userInfo a join personInfo b on a.userID=b.userID<br>where b.personID = 100</p><p>注：根据b条件删除a的数据</p>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
          <category> MYSQL基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL知识整理（MYSQL基础--DDL数据定义语言）</title>
      <link href="/2019/06/20/MYSQL%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88MYSQL%E5%9F%BA%E7%A1%80-DDL%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80%EF%BC%89/"/>
      <url>/2019/06/20/MYSQL%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88MYSQL%E5%9F%BA%E7%A1%80-DDL%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>MYSQL知识整理（MYSQL基础–DDL数据定义语言）<br><a id="more"></a></p><h2 id="1-库的管理"><a href="#1-库的管理" class="headerlink" title="1.库的管理"></a>1.库的管理</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><pre><code>create database [if not exists]库名 [character set 字符集名];</code></pre><p>例子：</p><pre><code>create database IF NOT EXISTS userInfo SET gbk；或create database userInfo；</code></pre><p>注：创建时库已存在会提示已存在</p><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><pre><code>ALTER DATABASE 库名 [character set 字符集名];</code></pre><p>例子：ALTER DATABASE userInfo CHARACTER SET gbk;</p><p>注：由于此操作不安全，风险大，不建议</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><pre><code>DROP DATABASE IF EXISTS 库名;</code></pre><p>例子：</p><pre><code>DROP DATABASE IF EXISTS userInfo;</code></pre><p>注：存在删除，不存在不删除</p><h2 id="2-表的管理"><a href="#2-表的管理" class="headerlink" title="2.表的管理"></a>2.表的管理</h2><h3 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h3><pre><code>create table if not exists 表名(列名 列的类型【(长度) 约束】,…[PRIMARY KEY (主键)])</code></pre><p>例子：</p><pre><code>create table if not exists userInfo(userID int AUTO_INCREMENT,username varchar(20) NOT NULL,password varchar(30),PRIMARY KEY (userID))</code></pre><h3 id="修改-1"><a href="#修改-1" class="headerlink" title="修改"></a>修改</h3><p>修改列名：</p><pre><code>alter table 表名 change column 旧列名 新列名 类型;</code></pre><p>修改类型约束：</p><pre><code>alter table 表名 modify column 列名 新类型 【新约束】;</code></pre><p>新增列：</p><pre><code>alter table 表名 add column 列名 类型 【first|after 字段名】;</code></pre><p>删除列：</p><pre><code>alter table 表名 drop column 列名;</code></pre><p>修改表名：</p><pre><code>alter table 表名 rename 【to】 新表名;</code></pre><h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><pre><code>DROP TABLE IF EXISTS 表名;</code></pre><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><p>仅复制表结构：</p><pre><code>CREATE TABLE copy LIKE author;</code></pre><p>仅复制表数据：</p><pre><code>CREATE TABLE 新表名 SELECT * FROM 旧表名;</code></pre><p>复制表的结构+数据：</p><pre><code>CREATE TABLE 新表名SELECT 列名1，列名2，...，列名nFROM 旧表名 WHERE condition;</code></pre><p>仅复制某些字段：</p><pre><code>CREATE TABLE 新表名 SELECT 列名1，列名2，...，列名nFROM 旧表名WHERE 0;</code></pre><p>跨库复制：</p><pre><code>CREATE TABLE 新表名SELECT 列名1，列名2，...，列名nFROM 旧库名.旧表名;</code></pre><h2 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3.数据类型"></a>3.数据类型</h2><h3 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h3><table><thead><tr><th style="text-align:left">类型名称</th><th style="text-align:left">定义</th></tr></thead><tbody><tr><td style="text-align:left">date</td><td style="text-align:left">‘2019-6-21’</td></tr><tr><td style="text-align:left">time</td><td style="text-align:left">‘08 : 21 : 55’</td></tr><tr><td style="text-align:left">datetime</td><td style="text-align:left">‘2019-6-21 08 : 22 : 06’</td></tr><tr><td style="text-align:left">timestamp</td><td style="text-align:left">‘会随其他字段修改的时候自动刷新’</td></tr><tr><td style="text-align:left">year</td><td style="text-align:left">‘2019’</td></tr></tbody></table><h3 id="字符串型"><a href="#字符串型" class="headerlink" title="字符串型"></a>字符串型</h3><table><thead><tr><th style="text-align:left">类型名称</th><th style="text-align:left">定义</th></tr></thead><tbody><tr><td style="text-align:left">char(n)</td><td style="text-align:left">‘定长，可至255字符’</td></tr><tr><td style="text-align:left">varchar(n)</td><td style="text-align:left">‘变长，可至65535字符’</td></tr><tr><td style="text-align:left">tinytext</td><td style="text-align:left">‘变长，可至255字符’</td></tr><tr><td style="text-align:left">mediumtext</td><td style="text-align:left">‘变长，可至2的24次方-1字符’</td></tr><tr><td style="text-align:left">longtext</td><td style="text-align:left">‘变长，2的32次方-1字符’</td></tr><tr><td style="text-align:left">text</td><td style="text-align:left">‘变长，可至65535字符’</td></tr></tbody></table><p>注：</p><blockquote><p>char(n) ,长度为n，实际长度不足补空格，实际字符串后不可有空格，检索速度快与varchar<br>varchar(n)，长度为实际字符个数+1，可直接创建索引,检索速度大于text<br>text，不能指定长度，长度为实际字符个数+2，创建索引要指定前多少个字符</p></blockquote><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><table><thead><tr><th style="text-align:left">类型名称</th><th style="text-align:left">定义</th></tr></thead><tbody><tr><td style="text-align:left">tinyint(m)</td><td style="text-align:left">‘1个字节  范围(-128~127)’</td></tr><tr><td style="text-align:left">smallint(m)</td><td style="text-align:left">‘2个字节  范围(-32768~32767)’</td></tr><tr><td style="text-align:left">mediumint(m)</td><td style="text-align:left">‘3个字节  范围(-8388608~8388607)’</td></tr><tr><td style="text-align:left">int(m)</td><td style="text-align:left">‘4个字节  范围(-2147483648~2147483647)’</td></tr><tr><td style="text-align:left">bigint(m)</td><td style="text-align:left">‘8个字节  范围(+-9.22*10的18次方)’</td></tr></tbody></table><p>注：加入unsigned，范围加倍</p><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><table><thead><tr><th style="text-align:left">类型名称</th><th style="text-align:left">定义</th></tr></thead><tbody><tr><td style="text-align:left">float(m,d)</td><td style="text-align:left">‘单精度浮点型，8位精度(4字节)，m总个数，d小数位’</td></tr><tr><td style="text-align:left">double(m,d)</td><td style="text-align:left">‘双精度浮点型，16位精度(8字节)，m总个数，d小数位’</td></tr></tbody></table><h3 id="定点型"><a href="#定点型" class="headerlink" title="定点型"></a>定点型</h3><table><thead><tr><th style="text-align:left">类型名称</th><th style="text-align:left">定义</th></tr></thead><tbody><tr><td style="text-align:left">decimal(m,d)</td><td style="text-align:left">‘存放精确值， m&lt;65 是总个数，d&lt;30 且 d&lt;m 是小数位’</td></tr></tbody></table><h3 id="二进制数据"><a href="#二进制数据" class="headerlink" title="二进制数据"></a>二进制数据</h3><table><thead><tr><th style="text-align:left">类型名称</th><th style="text-align:left">定义</th></tr></thead><tbody><tr><td style="text-align:left">_BLOB</td><td style="text-align:left">‘二进制存储，不区分大小写，数据需整体读入，无需指定字符集’</td></tr><tr><td style="text-align:left">TINYBLOB</td><td style="text-align:left">‘最大255字节的二进制’</td></tr><tr><td style="text-align:left">TINYTEXT</td><td style="text-align:left">‘最大255字节的文本’</td></tr><tr><td style="text-align:left">_text</td><td style="text-align:left">‘以文本方式存储，区分大小写，可指定字符集’</td></tr><tr><td style="text-align:left">MEDIUMBLOB</td><td style="text-align:left">‘最大16777215字节的二进制’</td></tr><tr><td style="text-align:left">MEDIUMTEXT</td><td style="text-align:left">‘最大16777215字节的文本’</td></tr><tr><td style="text-align:left">LONGBLOB</td><td style="text-align:left">‘最大4294967295字节的二进制’</td></tr><tr><td style="text-align:left">LONGTEXT</td><td style="text-align:left">‘最大4294967295字节的文本’</td></tr></tbody></table><h3 id="汉字编码"><a href="#汉字编码" class="headerlink" title="汉字编码"></a>汉字编码</h3><blockquote><p>UTF－8：一个汉字＝3个字节</p><p>GBK：一个汉字＝2个字节</p></blockquote><h2 id="4-常见约束"><a href="#4-常见约束" class="headerlink" title="4.常见约束"></a>4.常见约束</h2><table><thead><tr><th style="text-align:left">类型关键字</th><th style="text-align:left">定义</th></tr></thead><tbody><tr><td style="text-align:left">NULL</td><td style="text-align:left">‘null值，该列不能为空’</td></tr><tr><td style="text-align:left">NOT NULL</td><td style="text-align:left">‘非nul值，该列可以为空’</td></tr><tr><td style="text-align:left">DEFAULT</td><td style="text-align:left">‘默认值’</td></tr><tr><td style="text-align:left">PRIMARY KEY</td><td style="text-align:left">‘主键’</td></tr><tr><td style="text-align:left">AUTO_INCREMENT</td><td style="text-align:left">‘自增，整型数据’</td></tr><tr><td style="text-align:left">UNSIGNED</td><td style="text-align:left">‘无符号’</td></tr><tr><td style="text-align:left">CHARACTER SET name</td><td style="text-align:left">‘设置值字符集’</td></tr><tr><td style="text-align:left">UNIQUE</td><td style="text-align:left">‘每一列的值唯一’</td></tr><tr><td style="text-align:left">PRIMARY KEY</td><td style="text-align:left">‘外键’</td></tr><tr><td style="text-align:left">CHECK</td><td style="text-align:left">‘检查字段的值是否为指定的值。mysql不支持’</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
          <category> MYSQL基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL知识整理（MYSQL基础--DQL数据查询语言）</title>
      <link href="/2019/06/19/MYSQL%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88MYSQL%E5%9F%BA%E7%A1%80-DQL%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%EF%BC%89/"/>
      <url>/2019/06/19/MYSQL%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88MYSQL%E5%9F%BA%E7%A1%80-DQL%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>MYSQL知识整理（MYSQL基础–DQL数据查询语言）<br><a id="more"></a></p><h2 id="1-基础查询"><a href="#1-基础查询" class="headerlink" title="1.基础查询"></a>1.基础查询</h2><p>查询语句：</p><pre><code>select * from tablename</code></pre><h2 id="2-条件查询"><a href="#2-条件查询" class="headerlink" title="2.条件查询"></a>2.条件查询</h2><p>查询语句：</p><pre><code>select * from tablename where filed = &apos;condiction&apos;</code></pre><p>符号：</p><pre><code>&gt;、 &lt;、 &lt;=、 &gt;=、 =、 &lt;&gt;BETWEEN...ANDin，如in(数据1，数据2)like（通配符%、_）is nulland 或 &amp;&amp;、or 或 || not 或 ! </code></pre><h2 id="3-排序查询"><a href="#3-排序查询" class="headerlink" title="3.排序查询"></a>3.排序查询</h2><p>查询语句：</p><pre><code>select * from tablename order by filed1 ASC，filed2 desc</code></pre><p>符号：</p><pre><code>asc 默认，升序desc 降序</code></pre><h2 id="4-常见函数"><a href="#4-常见函数" class="headerlink" title="4.常见函数"></a>4.常见函数</h2><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><blockquote><p>count()： 统计不为null的列<br>max()：计算列最大值，如为字符串，使用字符串排序<br>min()：计算列最小值，如为字符串，使用字符串排序<br>sum()：计算列的和，如该列不为数字，其为0<br>avg()：计算列平均值，如该列不为数字，其为0</p></blockquote><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><blockquote><p> PI()：计算圆的面积<br> CEIL(-12.3)：向上取整,大于这个数的最小的整数，12<br> FLOOR(-12.3)：向下取整,小于这个数的最大整数，13<br> ROUND(12.54,-1)：四舍五入,第二个参数代表从小数点的第几位开始四舍五入,-1代表小数点前一位<br> ROUND(12.54)：小数点大于等于5，向上取整，13<br> ROUND(12.54,1)：#保留小数点后一位数，4小于5,向下取，12.5<br> ABS(-10)：取绝对值，10<br> RAND()：0-1左闭右开<br> POW(2,3)：幂运算，8<br> SQRT(25)：开方</p></blockquote><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><blockquote><p> LOWER(filed):转成小写<br> UPPER(filed):转成大写<br> CONCAT(‘e-‘,filed)：#拼接字符串<br> SUBSTR(‘yiyu’,1,3)：取子串,这里的1为初始位置,3是代表长度，yiy<br> REPLACE(‘yiyuhaha’,’haha’,’niubi’)：替换<br> TRIM(‘    a   a  ‘)：清除前后空格<br> LENGTH(‘aa’)：长度<br> LPAD(‘abc’,10,’<em>‘):左填充至第二个参数长度,用</em><br> RPAD(‘abc’,10,’<em>‘):左填充至第二个参数长度,用</em></p></blockquote><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><blockquote><p> NOW()：获取当前日期时间<br> SYSDATE()：获取当前系统日期时间<br> CURRENT_TIMESTAMP()：获取当前时间戳<br> CURRENT_TIME()：获取当前时间,时分秒<br> CURRENT_DATE()：获取当前日期:年月日<br> YEAR(NOW())：获取年<br> MONTH(date)：获取月<br> DAY(date)：获取得日<br> DATE_ADD(NOW(),interval 2 MONTH)：第一个参数日期的后2个月的时间<br> LAST_DAY(NOW())：传入时间的月份的最后一天</p></blockquote><h3 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数"></a>加密函数</h3><blockquote><p>MD5(‘yiyu’):无法逆转<br>SHA(‘yiyu’)<br>PASSWORD(‘yiyu’)</p></blockquote><h2 id="5-分组查询"><a href="#5-分组查询" class="headerlink" title="5.分组查询"></a>5.分组查询</h2><p>查询语句：</p><pre><code>select username,count(userclass) from username group by username having count(userclass)&gt;5</code></pre><p>符号：</p><blockquote><p>group by：分组字段<br>having ：分组条件</p></blockquote><h2 id="6-连接查询（多表查询）"><a href="#6-连接查询（多表查询）" class="headerlink" title="6.连接查询（多表查询）"></a>6.连接查询（多表查询）</h2><p>定义：如果查询涉及两个以上的表需连接查询</p><h3 id="一-内连接"><a href="#一-内连接" class="headerlink" title="一 内连接"></a>一 内连接</h3><p>基本语句：</p><pre><code>select 查询列表 from 表1 别名 inner join 表2 别名 on 连接条件;</code></pre><p>解释：</p><blockquote><p>可把 inner join on 省略 ，写成多表以英文逗号隔开</p></blockquote><h4 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h4><p>查询语句：</p><pre><code>select a.username,b.personname from userInfo a,personInfo b where a.userid=b.userid</code></pre><p>解释：</p><blockquote><p>多表等值关联（交集）<br>多表中无顺序可言<br>为每个表起别名（默认该表名称为其别名）</p></blockquote><h4 id="非等值连接"><a href="#非等值连接" class="headerlink" title="非等值连接"></a>非等值连接</h4><p>查询语句：</p><pre><code>select a.username,a.userid from userInfo a,personInfo b where a.userid BETWEEN  b.low AND b.high</code></pre><p>解释：</p><blockquote><p>条件为非等号<br>where 列名 BETWEEN … AND ….<br>根据 personInfo 的条件查询 userInfo 的数据</p></blockquote><h4 id="自连接（特殊等值连接）"><a href="#自连接（特殊等值连接）" class="headerlink" title="自连接（特殊等值连接）"></a>自连接（特殊等值连接）</h4><p>查询语句：</p><pre><code>select a.username,b.username from userInfo a,userInfo b where a.userid=b.userid</code></pre><p>解释：</p><blockquote><p>自己与自己连接（该表与该表的副本连接）<br>解决同一个表，列与副本同一列逻辑关系的问题</p></blockquote><h3 id="二-外连接"><a href="#二-外连接" class="headerlink" title="二 外连接"></a>二 外连接</h3><p>定义： 分为主、从表，不管从表是否匹配，主表必显示（即显示主表所有数据，从表无，置null）</p><h4 id="左外链接"><a href="#左外链接" class="headerlink" title="左外链接"></a>左外链接</h4><p>查询语句：</p><pre><code>select a.username,b.personname from userInfo a left out join  personInfo b on a.userid=b.userid</code></pre><p>解释：</p><blockquote><p>主表为userInfo，会显示所有此数据<br>从表为personInfo,显示与主表关联的数据，如没有，显示null</p></blockquote><h4 id="右外链接"><a href="#右外链接" class="headerlink" title="右外链接"></a>右外链接</h4><p>查询语句：</p><pre><code>select a.username,b.personname from userInfo a right out join  personInfo b on a.userid=b.userid</code></pre><p>解释：</p><blockquote><p>主表为personInfo，会显示所有此数据<br>从表为userInfo,显示与主表关联的数据，如没有，显示null</p></blockquote><h4 id="全外链接"><a href="#全外链接" class="headerlink" title="全外链接"></a>全外链接</h4><p>查询语句：</p><pre><code>select a.username,b.personname from userInfo a full out join  personInfo b on a.userid=b.userid</code></pre><p>解释：</p><blockquote><p>无主从表，表之间互围主从表<br>会显示所有表的数据，如无关联，其两表相应部分设为null<br>mysql不支持此操作</p></blockquote><h3 id="三-交叉查询"><a href="#三-交叉查询" class="headerlink" title="三 交叉查询"></a>三 交叉查询</h3><p>查询语句：</p><pre><code>SELECT a.username,b.username FROM useInfo a,personInfo b;</code></pre><p>解释：</p><blockquote><p>与表关系无关<br>显示多表的笛卡尔积</p></blockquote><h2 id="7-子查询"><a href="#7-子查询" class="headerlink" title="7.子查询"></a>7.子查询</h2><p>定义：一个查询是另一个查询的条件（可用于增、删、查、改）</p><p>列举select子查询：</p><p>select * from userInfo where userID in<br>（select userID from personInfo where personname=’yiyu’）</p><p>解释：</p><blockquote><p> 根据 personInfo 的条件查询关联的userInfo信息<br> in表示符合子查询的条件，not in为不符合（或等号皆可）</p></blockquote><h2 id="8-分页查询"><a href="#8-分页查询" class="headerlink" title="8.分页查询"></a>8.分页查询</h2><p>定义：根据限制查询对应数量的数据</p><p>基本语句：</p><pre><code>SELECT * FROM table LIMIT [offset,] rows | rows OFFSET offset</code></pre><p>解释：</p><blockquote><p>offset为偏移量，表示从哪开始截取数据（不包含该值）<br>row表示截取多少行数据</p></blockquote><p>例子：截取1001-1010的数据</p><pre><code>select * from orders where limit 1000,10;</code></pre><h2 id="9-联合查询"><a href="#9-联合查询" class="headerlink" title="9.联合查询"></a>9.联合查询</h2><p>定义：要查询的结果来自多个表，且多个表没有直接的连接关系，但查询的信息一致</p><p>基本语句：</p><pre><code>select * from userInfounion（all）select * from personInfo</code></pre><p>解释：</p><blockquote><p>多条查询语句的查询列数要一致<br>多条查询语句的查询的每一列的类型和顺序要保持一致<br>union 去重<br>union all 包含重复项</p></blockquote><p>注意：MYSQL 不支持intersect（交集）与minus（差集）</p>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
          <category> MYSQL基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL知识整理（MYSQL基础--基础内容）</title>
      <link href="/2019/06/18/MYSQL%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88MYSQL%E5%9F%BA%E7%A1%80-%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9%EF%BC%89/"/>
      <url>/2019/06/18/MYSQL%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88MYSQL%E5%9F%BA%E7%A1%80-%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>MYSQL知识整理（MYSQL基础–基础内容）<br><a id="more"></a></p><h2 id="1-相关概念"><a href="#1-相关概念" class="headerlink" title="1.相关概念"></a>1.相关概念</h2><p>百度百科：</p><blockquote><p>MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品MySQL 是最流行的关系型数据库管理系统之一，在 WEB 应用方面，MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。</p><p>MySQL是一种关系数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</p><p>MySQL所使用的 SQL 语言是用于访问数据库的最常用标准化语言。</p><p>MySQL 软件采用了双授权政策，分为社区版和商业版，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发都选择 MySQL 作为网站数据库。</p><p>由于其社区版的性能卓越，搭配 PHP 和 Apache 可组成良好的开发环境。</p></blockquote><h2 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.配置文件"></a>2.配置文件</h2><ol><li>port：端口</li><li>basedir：mysql安装的绝对路径</li><li>datadir：mysql数据存放的绝对路径</li><li>socket：套接字文件（mysql.sock）</li><li>plugin_dir：mysql plugin插件路径</li><li>log-error：mysql错误日志文件</li><li>symbolic-links：默认0，如果为1mysql数据库和表数据支持存储datadir目录之外的路径</li><li>local-infile：0表示关闭服务器从本地load功能，1打开</li><li>max-connections：设置mysql最大连接数</li><li>query_cache_limit：单个查询缓冲区大小（默认1M）</li><li>query_cache_size：查询缓存的大小</li><li>query_cache_type：设置缓存的类型（0禁用；1缓存所有结果；2之缓存select语句通过sql_cache制定需要的缓存查询）</li><li>max_user_connections：用户连接的最大值设置</li><li>wait_timeout:超时等待时间</li><li>connect_timeout:客户端与服务器连接时，服务器返回错误的握手协议前，等待数据包的最大时间（s）</li><li>thread_cache_size：缓存空闲线程</li><li>key_buffer_size：指定索引缓冲区大小</li><li>join_buffer_size：join查询缓存大小</li><li>max_heap_table_size：设置用户可创建内存表大小</li><li>low_priority_updates：服务器降低些操作的优先级，1位以读为主</li><li>max_seeks_for_key：设置key查询最大查找次数</li><li>max_allowd_packet：设置消息传输最大值</li><li>sort_buffer_size：设置group by和order by性能</li><li>read_buffer_size：设置服务器读缓存区大小</li><li>max_connect_errors：客户端连接服务器失败，累计时间超过此值，服务器将会阻止此客户端后续所有访问</li><li>myisam_sort_buffer_size：服务器重建索引时允许创建最大临时文件的大小</li><li>tmp_table_size：设置临时内部堆积表的大小</li><li>read_rnd_buffer_size：设置服务器随机读取缓冲区的大小</li><li>open_file_limit：控制文件发开的个数</li></ol><h2 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3.常用命令"></a>3.常用命令</h2><p>① 基本操作：</p><ol><li><p>创建数据库：</p><blockquote><p>create database createname;</p></blockquote></li><li><p>选择数据库</p><blockquote><p>user databasename;</p></blockquote></li><li><p>删除数据库(无提示)</p><blockquote><p>drop database name;</p></blockquote></li><li><p>显示表</p><blockquote><p>show tables;</p></blockquote></li><li><p>标的详细描述</p><blockquote><p>describe tablename;</p></blockquote></li><li><p>select去重</p><blockquote><p>select distinct</p></blockquote></li><li><p>删除数据库（有提示）</p><blockquote><p>mysqladmin drop databasename;</p></blockquote></li><li><p>显示mysql版本和日期</p><blockquote><p>select version(),current_date;</p></blockquote></li></ol><p>② mysql修改root密码</p><p>mysqladmin -u用户名 -p旧密码 password 新密码</p><p>③ 授权（grant）<br>查看权限：show grants(查看其他用户的加上 for dba@localhost)</p><p>grant select on 数据库.<em> to 用户名@登录主机 identified by “密码”<br>    grant select, insert, update, delete on testdb.</em> to common_user@’%’</p><p>创建表、索引、视图、存储过程、函数。。。等权限同理</p><p>撤销权限：revoke all on <em>.</em> from dba@localhost;</p><p>④ 数据库备份</p><p>备份：<br>mysqldump -u 用户名 -p 数据库名 &gt; 导出的文件名<br>mysqldump -h host -u root -p dbname &gt;dbname_backup.sql</p><p>恢复：<br>mysqladmin -h myhost -u root -p create dbname<br>mysqldump -h host -u root -p dbname &lt; dbname_backup.sql</p><p>⑤ 启动<br>连接 mysql -h主机地址 -u用户名 －p用户密码</p><p>启动MYSQL服务 net start mysql </p><p>停止MYSQL服务 net stop mysql</p><p>查看被监听的端口 netstat –na | findstr 3306 </p><p>退出：quit  exit </p><p>显示当前用户 SELECT USER();</p><p>显示当前数据库 SELECT DATABASE();</p><h2 id="4-语法规范"><a href="#4-语法规范" class="headerlink" title="4.语法规范"></a>4.语法规范</h2><ol><li>其不区分大小写（规范：关键字函数名大写，表名列名小写）</li><li>命令结尾用英文分号（；）结束</li><li>换行，缩进（这行操作）</li><li>注释（单行：#文字；多行：/<em> 文字 </em>/）</li><li>别名 （使用as或者空格）</li><li>去重（distinct）</li><li>加号（+）（加法运算，如为字符，系统自动转数值，成功加法运算）</li><li>concat（str1,str2）:连接字符串</li><li>不要使用mysql保留字作为数据库名称，表名称，字段名称</li></ol><h2 id="5-sql的语言分类"><a href="#5-sql的语言分类" class="headerlink" title="5.sql的语言分类"></a>5.sql的语言分类</h2><p>① DDL数据库定义语言：</p><p>定义：定义了不同的数据段、数据库、表、列、索引等数据库对象，主要是用在定义或改变表（TABLE）的结构，数据类型，表之间的链接和约束等初始化工作上</p><p>常用：CREATE ALTER DROP TRUNCATE COMMENT RENAME</p><p>② DCL数据库控制语言：</p><p>定义：用来设置或更改数据库用户或角色权限的语句</p><p>常用：grant,deny,revoke</p><p>③ DML数据库操作语言：</p><p>定义：实现对数据库中的数据进行操作</p><p>常用：INSERT UPDATE DELETE MERGE CALL （EXPLAIN PLAN） （LOCK TABLE）</p><p>④ TCL事务控制语言：</p><p>定义：保证原子性、一致性、完整性、持久性</p><p>常用：SAVEPOINT ROLLBACK （SET </p><p>⑤ DQL数据查询语言</p><p>定义：按条件查询语句</p><p>常用：SELECR * FROM TABLENAME</p>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
          <category> MYSQL基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（软考架构师笔记二十一）虚拟化、云计算与物联网</title>
      <link href="/2019/06/12/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E4%BA%8C%E5%8D%81%E4%B8%80%EF%BC%89%E8%99%9A%E6%8B%9F%E5%8C%96%E3%80%81%E4%BA%91%E8%AE%A1%E7%AE%97%E4%B8%8E%E7%89%A9%E8%81%94%E7%BD%91/"/>
      <url>/2019/06/12/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E4%BA%8C%E5%8D%81%E4%B8%80%EF%BC%89%E8%99%9A%E6%8B%9F%E5%8C%96%E3%80%81%E4%BA%91%E8%AE%A1%E7%AE%97%E4%B8%8E%E7%89%A9%E8%81%94%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<p>（软考架构师笔记二十一）虚拟化、云计算与物联网<br><a id="more"></a></p><h2 id="1-虚拟化"><a href="#1-虚拟化" class="headerlink" title="1.虚拟化"></a>1.虚拟化</h2><p>（1）定义</p><blockquote><p>① 虚拟化代表着对计算资源的抽象，而不仅仅局限于虚拟机的概念</p></blockquote><p>（2）分类<br>① 平台虚拟化</p><blockquote><p>是针对计算机和操作系统的虚拟化，通过使用控制程序（Control Program，也称为 Virtual<br>Machine Monitor 或 Hypervisor），隐藏特定计算平台的实际物理特性，为用户提供抽象的、统一的、模拟的计算环境</p><p>全虚拟化：虚拟机模拟了完整的底层硬件，包括处理器、物理内存、时钟、外设等，使得为原始硬件设计的操作系统或其他系统软件完全不作任何修改就可以在虚拟机中运行</p><p>超虚拟化：是一种修改 Guest OS 部分访问特权状态的代码以便直接与 VMM 交互的技术</p><p>硬件辅助虚拟化：借助硬件（主要是主机处理器）的支持来实现高效的全虚拟化</p><p>部分虚拟化：VMM 只模拟部分底层硬件，因此客户机操作系统不作修改是无法在虚拟机中运行的，其他程序可能也需要进行修改</p><p>操作系统级虚拟化：是一种在服务器操作系统中使用的轻量级的虚拟化技术，内核通过创建多个虚拟的操作系统实例（内核和库）来隔离不同的进程，不同实例中的进程完全不了解对方的存在</p></blockquote><p>② 资源虚拟化：</p><blockquote><p>针对特定的系统资源的虚拟化，比如内存、存储、网络资源等</p></blockquote><p>③ 应用程序虚拟化</p><blockquote><p>应用程序虚拟化（Application Virtualization），包括仿真、模拟、解释技术<br>使用了一种被称为动态二进制翻译的技术把对特权状态的访问转换成对影子状态的操作，从而避免了低效的 Trap-And-Emulate 的处理方式，这与超虚拟化相似，只不过超虚拟化是静态地修改程序代码</p></blockquote><p>（3）虚拟化的模式</p><p>① 单一资源多个逻辑表示：</p><blockquote><p>只包含一个物理资源，但是它向消费者呈现的逻辑表示却仿佛它包含多个资源一样</p></blockquote><p>② 多个资源单一逻辑表示：</p><blockquote><p>包含了多个组合资源，以便将这些资源表示为提供单一接口的单个逻辑表示形式</p></blockquote><p>③ 在多个资源之间提供单一逻辑表示：</p><blockquote><p>包括一个以多个可用资源之一的形式表示的虚拟资源。虚拟资源会根据指定的条件来选择一个物理资源实现。</p></blockquote><p>④ 单个资源单一逻辑表示</p><blockquote><p>用来表示单个资源的一种简单模式，就仿佛它是别的什么资源一样</p></blockquote><p>④ 复合或分层虚拟</p><blockquote><p>是前面介绍的一种或多种模式的组合，它使用物理资源来提供丰富的功能集<br>它提供了底层所需要的功能，这些功能用于管理对资源、包含有关如何处理和使用信息的元数据，以及对信息进行处理的操作的全局命名和引用</p></blockquote><p><br></p><h2 id="2-云计算"><a href="#2-云计算" class="headerlink" title="2.云计算"></a>2.云计算</h2><p>（1）定义</p><blockquote><p>① 是一种基于互联网的计算方式，通过这种方式，共享的软硬件资源和信息可以按需提供给计算机和其他设备</p></blockquote><p>（2）核心思想：</p><blockquote><p>将大量用网络连接的计算资源统一管理和调度，构成一个计算资源池向用户按需服务</p></blockquote><p>（3）云</p><blockquote><p>提供资源的网络</p></blockquote><p>（4）云计算的特点：</p><blockquote><p>① 计算资源集成提高设备计算能力<br>② 分布式数据中心保证系统容灾能力<br>③ 软硬件相互隔离减少设备依赖性<br>④ 平台模块化设计体现高可扩展性<br>⑤ 虚拟资源池为用户提供弹性服务<br>⑥ 按需付费降低使用成本</p></blockquote><p>（5）云计算的类型<br>① 软件即服务（SaaS）：</p><blockquote><p>基于互联网提供软件服务的软件应用模式<br>提供商为企业搭建信息化所需要的所有网络基础设施及软件、硬件运作平台，并负责所有前期的实施、后期的维护等一系列服务，企业无须购买软硬件、建设机房、招聘 IT人员，即可通过互联网使用信息系统</p></blockquote><p>② 平台即服务（PaaS）：</p><blockquote><p>把服务器平台或者开发环境作为一种服务提供的商业模式，如将软件研发的平台作为一种服务，以 SaaS 的模式提交给用户<br>它能够提供企业进行定制化研发的中间件平台，同时涵盖数据库和应用服务器等。PaaS 可以提高在 Web 平台上利用的资源数量</p></blockquote><p>③ 基础设施即服务（laaS）</p><blockquote><p>消费者通过 Internet 可以从完善的计算机基础设施获得服务</p></blockquote><p>（6）云计算的应用</p><p>① 云安全</p><blockquote><p>通过网状的大量客户端对网络中软件行为的异常监测，获取互联网中木马、恶意程序的最新信息，推送到 Server 端进行自动分析和处理，再把病毒和木马的解决方案分发到每一个客户端</p></blockquote><p>② 云存储</p><blockquote><p>指通过集群应用、网格技术或分布式文件系统等功能，将网络中大量各种不同类型的存储设备通过应用软件集合起来协同工作，共同对外提供数据存储和业务访问功能的一个系统</p></blockquote><p>③ 云呼叫</p><blockquote><p>基于云计算技术而搭建的呼叫中心系统，企业无须购买任何软、硬件系统，只需具备人员、场地等基本条件，就可以快速拥有属于自己的呼叫中心，软硬件平台、通信资源、日常维护与服务由服务器商提供<br>周期短、投入少、风险低、部署灵活、系统容量伸缩性强、运营维护成本低</p></blockquote><p>④ 云会议</p><blockquote><p>基于云计算技术的一种高效、便捷、低成本的会议形式<br>是视频会议与云计算的完美结合，带来了最便捷的远程会议体验</p></blockquote><p><br></p><h2 id="3-物联网"><a href="#3-物联网" class="headerlink" title="3.物联网"></a>3.物联网</h2><p>（1）定义：</p><blockquote><p>实现物物相连的互联网络</p></blockquote><p>（2）内涵：</p><blockquote><p>第一，物联网的核心和基础仍然是互联网，是在互联网基础上延伸和扩展的网络<br>第二，其用户端延伸和扩展到了任何物体与物体之间，使其进行信息交换和通信</p></blockquote><p>（3）功能：</p><blockquote><p>① “内在智能”的传感器、移动终端、工业系统、楼控系统、家庭智能设施、视频监控系统等和“外在使能”<br>② 提供安全可控乃至个性化的实时在线监测、定位追溯、报警联动、调度指挥、预案管理、远程控制、安全防范、远程维保、在线升级、统计报表、决策支持等管理和服务功能</p></blockquote><p>（4）层次结构</p><p>① 感知层（底层）</p><blockquote><p>① 用途：用于识别物体、采集信息</p><p>② 应用：包括二维码标签和识读器、RFID 标签和读写器、摄像头、GPS、传感器、M2M 终端、传感器网关</p><p>③ 功能：识别物体、采集信息，与人体结构中皮肤和五官的作用类似</p><p>④ 过程：它首先通过传感器、数码相机等设备，采集外部物理世界的数据，然后通过 RFID、条码、工业现场总线、蓝牙、红外等短距离传输技术传递数据。感知层所需要的关键技术包括检测技术、短距离无线通信技术</p></blockquote><p>② 网络层</p><blockquote><p>① 用途：传递信息和处理信息</p><p>② 应用：包括通信网与互联网的融合网络、网络管理中心、信息中心和智能处理中心</p><p>③ 功能：将感知层获取的信息进行传递和处理，类似于人体结构中的神经中枢和大脑</p><p>④ 设施：将建立在现有的移动通信网和互联网基础上</p><p>⑤ 所解决问题：传输和预处理感知层所获得数据的问题</p></blockquote><p>③ 应用层</p><blockquote><p>① 用途：广泛智能化（经过分析处理的感知数据，为用户提供丰富的特定服务）</p><p>② 应用：监控型（物流监控、污染监控）、查询型（智能检索、远程抄表）、控制型（智能交通、智能家居、路灯控制）和扫描型（手机钱包、高速公路不停车收费）</p><p>③ 功能：将感知层获取的信息进行传递和处理，类似于人体结构中的神经中枢和大脑</p><p>④ 类别：<br>应用程序层（进行数据处理，它涵盖了国民经济和社会的每一领域，包括电力、医疗、银行、交通、环保、物流、工业、农业、城市管理、家居生活等，其功能可包括支付、监控、安保、定位、盘点、预测等，可用于政府、企业、社会组织、家庭、个人等。这正是物联网作为深度信息化的重要体现）<br>终端设备层（提供人机接口）</p><p>⑤ 所解决问题：信息处理和人机交互的问题</p></blockquote><p>（5）相关领域与技术</p><p>① 射频识别技术（称电子标签）（RFID）</p><blockquote><p>① 通过无线电信号识别特定目标并读写相关数据，而无须识别系统与特定目标之间建立机械或光学接触</p><p>② 采用非接触的自动识别技术:通过射频信号自动识别目标对象并获取相关数据，识别工作无须人工干预，可工作于各种恶劣环境</p><p>③ RFID组成：<br>标签（Tag）：由耦合元件及芯片组成，每个标签具有唯一的电子编码，附着在物体上标识目标对象<br>阅读器（Reader）：读取（有时还可以写入）标签信息的设备，可设计为手持式或固定式<br>天线（Antenna）：在标签和读取器间传递射频信号</p><p>④ RFID原理：标签进入磁场后，接收解读器发出的射频信号，凭借感应电流所获得的能量发送出存储在芯片中的产品信息（Passive Tag，无源标签或被动标签），或者由标签主动发送某一频率的信号（Active Tag，有源标签或主动标签），解读器读取信息并解码后，送至中央信息系统进行有关数据处</p><p>⑤ RFID系统组成：阅读器、电子标签（即应答器）、应用软件系统</p><p>⑥ RFID系统原理：Reader 发射一特定频率的无线电波能量给 Transponder，用以驱动Transponder 电路将内部的数据送出，此时 Reader 便依序接收解读数据，送给应用程序作相应的处理</p><p>⑦ 感应方式：<br>感应耦合（Inductive Coupling）：低频的RFID<br>后向散射耦合（Backscatter Coupling）：较高频RFID</p><p>⑧ 阅读器：耦合模块、收发模块、控制模块和接口单</p><p>⑨ 阅读器交换方式：半双工通信方式（通过耦合给无源应答器提供能量和时序）</p><p>⑩ 应答器：是 RFID 系统的信息载体，耦合原件（线圈、微带天线等）和微芯片组成无源单元</p></blockquote><p>② 二维码技术</p><blockquote><p>① 定义：用某种特定的几何图形按一定规律在平面（二维方向上）分布的记录数据符号信息的黑白相间的图形，利用构成计算机内部逻辑基础的“0”、“1”比特流的概念，使用若干个与二进制相对应的几何形体来表示文字数值信息，通过图像输入设备或光电扫描设备自动识读以实现信息自动处理</p><p>② 与条形码共性：每种码制有其特定的字符集、每个字符占有一定的宽度、具有一定的校验功能</p><p>③ 常用码值：Data Matrix、Maxi Code、Aztec、 QR Code、Vericode、PDF417、Ultracode、Code 49、Code 16K</p><p>④ 方向：横向和纵向</p></blockquote><p>③ 传感网：</p><blockquote><p>定义：由随机分布的，集成有传感器（传感器有很多种类型，包括温度、湿度、速度、气敏等）、数据处理单元和通信单元的微小节点，通过自组织的方式构成的无线网络</p></blockquote><p>④ M2M</p><blockquote><p>定义：M2M 是将数据从一台终端传送到另一台终端，也就是机器与机器（Machine to Machine）的对话</p></blockquote><p>（6）物联网的应用</p><blockquote><p>物联网用途广泛，遍及智能交通、环境保护、政府工作、公共安全、平安家居、智能消防、工业监测、老人护理、个人健康等多个领域</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 软考架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
            <tag> 架构师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（软考架构师笔记二十）应用数学</title>
      <link href="/2019/06/12/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E4%BA%8C%E5%8D%81%EF%BC%89%E5%BA%94%E7%94%A8%E6%95%B0%E5%AD%A6/"/>
      <url>/2019/06/12/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E4%BA%8C%E5%8D%81%EF%BC%89%E5%BA%94%E7%94%A8%E6%95%B0%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<p>（软考架构师笔记二十）应用数学<br><a id="more"></a></p><h2 id="1-运筹方法"><a href="#1-运筹方法" class="headerlink" title="1.运筹方法"></a>1.运筹方法</h2><p>（1）定义</p><blockquote><p>① 将生产、管理等事件中出现的一些带有普遍性的运筹问题加以提炼，然后利用数学方法进行解决<br>② 步骤：确定目标、制订方案、建立模型、制订解法</p></blockquote><p><br></p><h2 id="2-网络计划技术"><a href="#2-网络计划技术" class="headerlink" title="2.网络计划技术"></a>2.网络计划技术</h2><p>（1）定义</p><blockquote><p>① 用网络分析的方法编制的计划</p></blockquote><p>（2）关键路径法（CPM）</p><blockquote><p>① 定义：通过网络分析研究工程费用与工期的关系，并找出在编制计划及计划执行过程中的关键路径</p><p>② 活动：一项工程常被分为多个小的子工程，这些子工程称为活动</p><p>③ AOV网：在有向图中，若以顶点表示活动，弧表示活动之间的先后关系</p><p>④ AOE网：若以顶点表示事件，弧表示活动，权表示完成该活动所需的时间（称为活动历时或持续时间）</p></blockquote><p>（3）网络优化</p><blockquote><p>① 时间优化：<br>② 时间-资源优化<br>③ 时间-费用优化</p></blockquote><p><br></p><h2 id="3-决策论"><a href="#3-决策论" class="headerlink" title="3.决策论"></a>3.决策论</h2><p>（1）决策过程和模型构造决策行为的模型主</p><blockquote><p>① 面向结果的方法<br>② 面向过程的方法</p></blockquote><p>（2）面向决策结果</p><blockquote><p>确定目标→收集信息→提出方案→方案选择→决策</p></blockquote><p>（3）面向决策过程</p><blockquote><p>预决策→决策→决策后</p></blockquote><p>（4）决策模型</p><blockquote><p>决策者<br>可供选择的方案（替代方案）、行动或策略<br>衡量选择方案的准则<br>事件:不为决策者所控制的、客观存在的、将发生的状态<br>每一事件的发生将会产生的某种结果<br>决策者的价值观</p></blockquote><p>（5）不确定型决策</p><blockquote><p>决策者对环境情况一无所知，决策者根据自己的主观倾向进行决策</p></blockquote><p>① 乐观主义准则（最大最大准则（maxmax 准则））</p><blockquote><p>原则：“大中取大”<br>对事物总抱有乐观和冒险的态度，不放弃任何获得最好结果的机会</p></blockquote><p>② 悲观主义准则（最大最小准则（maxmin 准则））</p><blockquote><p>原则：“小中取大”<br>对事物抱有悲观和保守的态度，在各种最坏的可能结果中选择最好的</p></blockquote><p>③ 折中主义准则（赫尔威斯（Harwicz）准则）</p><blockquote><p>对事物既不乐观冒险，也不悲观保守<br>公式计算：cvi=α×max{aij}+(1−α)×min{aij}</p></blockquote><p>④ 等可能准则（拉普拉斯（Laplace）准则）</p><blockquote><p>无法事先确定每个自然状态出现的概率<br>把每个状态出现的概率定为 1/n （n 是自然状态数）</p></blockquote><p>⑤ 后悔值准则（为萨维奇（Savage）准则、最小机会损失准则）</p><blockquote><p>每个自然状态的最大收益值（损失矩阵取为最小值），作为该自然状态的理想目标，并将该状态的其他值与最大值相减所得的差作为未达到理想目标的后悔值</p></blockquote><p>（6）风险决策</p><blockquote><p>决策者对客观情况不甚了解，但对将发生各事件的概率是已知的</p></blockquote><p>① 最大期望收益决策准则</p><p>② 最小机会损失决策准则</p><p>（7）对策论（竞赛论或博弈论）</p><blockquote><p>研究具有竞争（或斗争）性质现象的数学理论和方法</p></blockquote><p>（8）数学建模</p><p>① 数学模型</p><blockquote><p>客观世界中的实际事物的一种数学简化，它常常是以某种意义上接近实际事物的抽象形式存在的</p></blockquote><p>② 数学语言：</p><blockquote><p>为了使描述更具科学性、逻辑性、客观性和可重复性，人们采用一种普遍认为比较严格的语言来描述各种现象</p></blockquote><p>③ 数学建模的过程</p><blockquote><p>① 模型准备<br>② 模型假设<br>③ 模型建立<br>④ 模型求解<br>⑤ 模型分析<br>⑥ 模型检验<br>⑦ 模型应用</p></blockquote><p>④ 建模方法和思路</p><blockquote><p>① 直接分析法：根据对问题内在机理的认识，直接构造出模型<br>② 类比法：根据类似问题的模型构造新模型<br>③ 数据分析法:通过试验，获得与问题密切相关的大量数据，用统计分析方法进行建模<br>④ 构想法:对将来可能发生的情况给出逻辑上合理的设想和描述，然后用已有的方法构造模型，并不断修正完善，直至用户比较满意为止</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 软考架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
            <tag> 架构师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（软考架构师笔记十九）标准化知识</title>
      <link href="/2019/06/12/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E5%8D%81%E4%B9%9D%EF%BC%89%E6%A0%87%E5%87%86%E5%8C%96%E7%9F%A5%E8%AF%86/"/>
      <url>/2019/06/12/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E5%8D%81%E4%B9%9D%EF%BC%89%E6%A0%87%E5%87%86%E5%8C%96%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>（软考架构师笔记十九）标准化知识<br><a id="more"></a></p><h2 id="1-标准化知识"><a href="#1-标准化知识" class="headerlink" title="1.标准化知识"></a>1.标准化知识</h2><p>（1）定义</p><blockquote><p>① 标准：为在一定的范围内获得最佳秩序，对活动或其结果规定共同的和重复使用的规则或特性的文件<br>② 标准化：在经济、技术、科学及管理等社会实践中，对重复性事物和概念通过制定、发布和实施标准达到统一，以获得最佳秩序和最大社会效益</p></blockquote><p><br></p><h2 id="2-标准分级与标准类型"><a href="#2-标准分级与标准类型" class="headerlink" title="2.标准分级与标准类型"></a>2.标准分级与标准类型</h2><p>（1）标准分级</p><blockquote><p>① 国际标准：由国际联合机构制定和公布，提供各国参考的标准<br>② 国家标准：由政府或国家级的机构制定或批准，适用于全国范围的标准<br>           GB（或 GB/T）、ANSI、FIPS-NBS、BS、JIS<br>③ 行业标准：由行业机构、学术团体或国防机构制定，并适用于某个业务领域的标准<br>           IEEE、GJB、DOD-STD、MIL-S、SJ<br>④ 区域/地方标准：由区域性国际联合机构制定和公布，提供区域内各国参考和执行的标准<br>           ARS、EN、PAS<br>⑤ 企业标准：一些大型企业或机构，由于工作需要制定的适用于本企业或机构的标准<br>           企业标准以 Q 字开头</p></blockquote><p>（2）各级标准之间的关系</p><blockquote><p>① 对需要在全国范围内统一的技术要求，应当制定国家标准</p><p>② 对没有国家标准而又需要在全国某个行业范围内统一的技术要求，可以制定行业标准。在公布国家标准之后，该项行业标 准即行废止</p><p>③ 对没有国家标准和行业标准而又需要在省、自治区、直辖市范围内统一的工业产品的安全、卫生要求，可以制定地方标准。在公布国家标准或者行业标准之后，该项地方标准即行废止</p><p>④ 企业生产的产品没有国家标准和行业标准的，应当制定企业标准，作为组织生产的依据。已有国家标准或者行业标准的，国家鼓励企业制定严于国家标准或者行业标准的企业标准，在企业内部适用</p></blockquote><p>（3）强制性标准与推荐性标准</p><p>① 定义：</p><blockquote><p>《中华人民共和国标准化法》规定：国家标准、行业标准分为强制性标准和推荐性标准</p></blockquote><p>② 强制性标准：</p><blockquote><p>保障人体健康，人身、财产安全的标准和法律、行政法规规定强制执行的标准</p><p>强制性国家标准以 GB 开头</p></blockquote><p>③ 推荐性标准</p><blockquote><p>除强制性标准外的其他标准</p><p>推荐性国家标准以 GB/T 开头</p></blockquote><p>④ 强制性标准的两种形式：</p><blockquote><p>全文强制形式：标准的全部技术内容需要强制</p><p>条文强制：标准中部分技术内容需要强制</p></blockquote><p>⑤ 强制性内容的范围：</p><blockquote><p>有关国家安全的技术要求<br>保障人体健康和人身、财产安全的要求<br>产品及产品生产、储运和使用中的安全、卫生、环境保护、电磁兼容等技术要求<br>工程建设的质量、安全、卫生、环境保护要求及国家需要控制的工程建设的其他要求<br>污染物排放限值和环境质量要求<br>保护动植物生命安全和健康的要求<br>防止欺骗、保护消费者利益的要求<br>国家需要控制的重要产品的技术要求</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 软考架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
            <tag> 架构师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（软考架构师笔记十八）软件的知识产权保护</title>
      <link href="/2019/06/11/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E5%8D%81%E5%85%AB%EF%BC%89%E8%BD%AF%E4%BB%B6%E7%9A%84%E7%9F%A5%E8%AF%86%E4%BA%A7%E6%9D%83%E4%BF%9D%E6%8A%A4/"/>
      <url>/2019/06/11/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E5%8D%81%E5%85%AB%EF%BC%89%E8%BD%AF%E4%BB%B6%E7%9A%84%E7%9F%A5%E8%AF%86%E4%BA%A7%E6%9D%83%E4%BF%9D%E6%8A%A4/</url>
      
        <content type="html"><![CDATA[<p>（软考架构师笔记十八）软件的知识产权保护<br><a id="more"></a></p><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><p>（1）定义</p><blockquote><p>其称为“智力成果权”、“智慧财产权”，指民事权利主体（自然人、法人）基于创造性的智力成果</p></blockquote><p>（2）特点</p><blockquote><p>无形性<br>专有性<br>地域性<br>时间性</p></blockquote><p>（3）相关法律法规</p><blockquote><p>《著作权法》<br>《计算机软件保护条件》<br>《专利法》<br>《商标法》<br>《反不正当竞争法》</p></blockquote><h2 id="2-著作权法及实施条例"><a href="#2-著作权法及实施条例" class="headerlink" title="2.著作权法及实施条例"></a>2.著作权法及实施条例</h2><p>（1）著作权法客体：</p><p>① 作品类型：</p><blockquote><p>文字作品：包括小说、诗词、散文、论文等以文字形式表现的作品<br>口述作品：是指即兴的演说、授课、法庭辩论等以口头语言形式表现的作品<br>音乐、戏剧、曲艺、舞蹈、杂技作品<br>美术、摄影作品<br>电影、电视、录像作品<br>工程设计、产品设计图纸及其说明<br>地图、示意图等图形作品<br>计算机软件<br>法律、行政法规规定的其他作品</p></blockquote><p>② 职务作品</p><blockquote><p>为完成单位工作任务所创作的作品，称为职务作品<br>该职务作品是利用单位的物质技术条件进行创作，并由单位承担责任的<br>有合同约定，其著作权属于单位(作者将仅享有署名权，其他著作权归单位享有)<br>著作权仍由作者享有，单位有权在业务范围内优先使用，并且在两年内，未经单位同意，作者不能够许可其他人、单位使用该作品</p></blockquote><p>（2）著作权法的主体</p><p>① 著作权人与受让者：</p><blockquote><p>著作权人：又称为原始著作权人，是根据创作的事实进行确定的，创作、开发者将依法取得著作权资格<br>受让者：又称为后继著作权人，是指没有参与创作，通过著作权转移活动成为享有著作权的人</p></blockquote><p>② 著作权人的确定：</p><blockquote><p>根据创作事实确认，提意见不算<br>多人参与，著作权共同所有<br>合同作品可分割，可单独享有自己完成那部分的著作权<br>著作权不明，作品原件的所有人可以行使除署名权以外的著作权</p></blockquote><p>注意：委托关系，一般需合同约定，如无合同，著作权归受托人所有（创造作品的人）</p><p>（3）著作权：</p><p>① 著作人对作品享有的权利</p><blockquote><p>发表权：即决定作品是否公之于众的权利<br>署名权：即表明作者身份，在作品上署名的权利<br>修改权：即修改或者授权他人修改作品的权利<br>保护作品完整权：即保护作品不受歪曲、篡改的权利<br>使用权、使用许可权和获取报酬权、转让权：即以复制、表演、播放、展览、发行、摄制电影、电视、录像或者改编、翻译、注释、编辑等方式使用作品的权利；以及许可他人以上述方式使用作品，并由此获得报酬的权利</p></blockquote><p>② 著作权保护期限：</p><blockquote><p>著作权属于公民：署名权、修改权、保护作品完整权的保护期没有任何限制，永远属于保护范围;发表权、使用权和获得报酬权的保护期为作者终生及其死亡后的50年（第50年的12月31日）。作者死亡后，著作权依照继承法进行转移</p><p>著作权属于单位：发表权、使用权和获得报酬权的保护期为 50 年（首次发表后的第50年的12月31日），若50年内未发表的，不予保护。但单位变更、终止后，其著作权由承受其权利义务的单位享有</p></blockquote><p>③ 使用许可权：</p><blockquote><p>第三方需要使用时，需得到著作权人的使用许可，双方应签订相应的合同（合同不能超过10年）<br>对于出版者、表演者、录音录像制作者、广播电台、电视台而言，在下列情况下使用作品，可以不经著作权人许可、不向其支付报酬。但应指名作者姓名、作品名称，不得侵犯其他著作权<br>为个人学习、研究或者欣赏，使用他人已经发表的作品<br>为介绍、评论某一个作品或者说明某一个问题，在作品中适当引用他人已经发表的作品<br>为报道时间新闻，在报纸、期刊、广播、电视节目或者新闻记录影片中引用已经发表的作品<br>报纸、期刊、广播电台、电视台刊登或者播放其他报纸、期刊、广播电台、电视台已经发表的社论、评论员文章<br>报纸、期刊、广播电台、电视台刊登或者播放在公众集会上发表的讲话，但作者声明不许刊登、播放的除外<br>为学校课堂教学或者科学研究，翻译或者少量复制已经发表的作品，供教学或者科研人员使用，但不得出版发行<br>国家机关为执行公务使用已经发表的作品<br>图书馆、档案馆、纪念馆、博物馆、美术馆等为陈列或者保存版本的需要，复制本馆收藏的作品<br>免费表演已经发表的作品<br>对设置或者陈列在室外公共场所的艺术作品进行临摹、绘画、摄影、录像<br>将已经发表的汉族文字作品翻译成少数民族文字在国内出版发行<br>将已经发表的作品改成盲文出版。</p></blockquote><p><br></p><h2 id="3-计算机软件保护条例"><a href="#3-计算机软件保护条例" class="headerlink" title="3. 计算机软件保护条例"></a>3. 计算机软件保护条例</h2><p>（1）《计算机软件保护条例》</p><blockquote><p>1991 年 6 月通过，10 月 1 日正式实施<br>最新版本是在 2001 年底通过，2002 年 1 月 1 日正式实施的<br>客体是计算机软件<br>受保护的软件必须由开发者独立开发，并且已经固定在某种有形物体上<br>保护只是针对计算机软件和文档，并不包括开发软件所用的思想、处理过程、操作方法或数学概念</p></blockquote><p>（1）著作权人的确定</p><blockquote><p>合作开发<br>职务开发<br>委托开发</p></blockquote><p>（2）软件著作权</p><blockquote><p>著作权属于公民（第17章）<br>著作权属于单位（第17章）<br>合法复制品所有人权利（第17章）<br>使用许可的特例：用以学习，而以安装、显示、存储软件等方式使用软件，可以使用<br>侵权责任：民事责任、刑事责任和行政责任</p></blockquote><p><br></p><h2 id="4-商标法及实施条例"><a href="#4-商标法及实施条例" class="headerlink" title="4.商标法及实施条例"></a>4.商标法及实施条例</h2><p>（1）定义：</p><blockquote><p>可注册地商标：任何能够将自然人、法人及组织的商品与他人的商品区别开的可视性标志<br>包括文字、图形、字母、数字、三维标志和颜色组合<br>须报商标局核准注册<br>包括商品商标、服务商标、集体商标，以及证明商标</p></blockquote><p>（2）商标的使用</p><blockquote><p>将商标用于商品、包装、容器、交易文书、广告宣传、展览，以及其商业活动中。</p></blockquote><p>（3）商标的使用期限：</p><blockquote><p>注册商标的有效期是 10 年，从核准通过、正式注册之日起开始计算。在有效期满之后，可以续注册，但必须在期满前 6 个月提出申请，如未在此期间提出申请的，则给予6个月的宽限期，在宽限期还未提出申请的，将注销其商标</p></blockquote><p>（4）注册商标的申请</p><p>（5）注册商标专用权保护（下列为侵犯）：</p><blockquote><p>① 未经商标注册人的许可，使用相同或近似商标<br>② 销售侵犯商标专用权的商品（注：如果销售方不知道是侵权商品，并且能够证明自己是合法取得的，不承担相应责任）<br>③ 伪造他人注册商标，或销售这些伪造的注册商标<br>④ 未经商标注册人同意，更换其注册商标，并将更换商标的商品投入市场</p></blockquote><p>（6）注册商标使用的管理</p><blockquote><p>当合法地注册了商标使用权后，就可以在商品、商品包装、说明书或者其他附着物上标明“注册商标”或者注册标记（包括©和®）</p></blockquote><p>注意：如注册商标人死亡，1年内没有办理商标转移手续，其商标可被任何人注册</p><p><br></p><h2 id="5-专利法及实施细则"><a href="#5-专利法及实施细则" class="headerlink" title="5.专利法及实施细则"></a>5.专利法及实施细则</h2><p>（1）定义</p><blockquote><p>客体：发明创造，也就是其保护的对象<br>发明创造：指发明、实用新型和外观设计<br>发明：指对产品、方法或者其改进所提出的新的技术方案<br>实用新型：指对产品的形状、构造及其组合，提出的适于实用的新的技术方案<br>外观设计：指对产品的形状、图案及其组合，以及色彩与形状、图案的结合所作出的富有美感并适于工业应用的新设计</p></blockquote><p>（2）申请专利权条件</p><blockquote><p>新颖性<br>创造性<br>实用性</p></blockquote><p>注意：对于科学发现、智力活动的规则和方法、疾病的诊断和治疗方法、动植物品种及用原子核变换方法获得的物质，不能够被授予专利权</p><p>（3）确定专利权人</p><p>① 定义：</p><blockquote><p>专利权归属于发明人或者设计人，这是指对发明创造作出创造性贡献的人<br>在发明创造过程中，只负责组织、提供方便、从事辅助工作的都不属于发明人或设计人</p></blockquote><p>② 职务发明：执行单位任务，或者利用本单位的物质技术条件所完成的发明创造，被视为职务发明创造</p><blockquote><p>在本职工作中作出的发明创造<br>在履行单位交付的本职工作之外的任务所做出的发明创造<br>退职、退休或者调动工作后 1 年内做的，与其原来承担的任务相关的发明创造</p></blockquote><p>③ 合作发明、设计：</p><blockquote><p>对于合作发明、设计的，其专利权应属共同所有，但可以根据合作方之间另行签订的合同来确定专利权的归属</p></blockquote><p>④ 委托发明：</p><blockquote><p>一个单位或者个人接受其他单位或个人的委托，所完成的发明创造，若没有签订合同规定专利权归属，则专利权归属发明、设计者<br>非职务发明，则单位无权压制个人进行专利权申请。对于多个相类似的专利申请，则专利权归属最先提交的申请人</p></blockquote><p>（4）专利权</p><p>① 定义：</p><blockquote><p>未经专利权人许可，实施专利的，就属于侵犯专利权，专利权人可以起诉，申请调解<br>处 3 倍以下，或 5 万元以下的罚款<br>专利诉讼的有效期是 2年，以专利权人得知侵权行为之日起计算</p></blockquote><p>② 不视为侵权行为</p><blockquote><p>① 对于专利权人制造、进口或者经专利权人许可而制造、进口的专利产品，或者依照专利方法直接获得的产品售出后，使用、许诺销售或者销售该产品<br>② 在专利申请日前已经制造相同产品，使用相同方法或者已经作好制造、使用的必要准备，并且在原有范围内继续制造、使用<br>③ 临时通过中国的国外运输工具，按其自身需要使用了专利<br>④ 专为科学研究和实验而使用有关专利的。我国现行专利法规定的发明专利权保护期限为 20 年，实用新型和外观设计专利权的期限为 10 年，均从申请日开始计算。</p></blockquote><p>（5）反不正当竞争法</p><p>① 定义：</p><blockquote><p>指经营者违反规定，损害其他经营者的合法权益，扰乱社会经济秩序的行为</p></blockquote><p>② 行为：</p><blockquote><p>采用不正当的市场交易手段利用垄断的地位，来排挤其他经营者的公平竞争<br>利用政府职权，限定商品购买，以及对商品实施地方保护主义<br>利用财务或其他手段进行贿赂，以达到销售商品的目的<br>利用广告或者其他方法，对商品的质量、成分、性能、用途、生产者、有效期、产地等进行误导性的虚假宣传<br>以低于成本价进行销售，排挤竞争对手。不过对于鲜活商品、有效期将至及积压产品的处理，以及季节性降价，清债、转产、歇业等原因进行降价销售均不属于不正当竞争<br>搭售违背购买者意愿的商品<br>采用不正当的有奖销售。例如谎称有奖，却是内定人员中奖；利用有奖销售推销价高产品；奖金超过 5 000 元的抽奖式有奖销售<br>捏造、散布虚伪事实，损害对手商誉<br>串通投标，排挤对手</p></blockquote><p>③ 罚款说明</p><blockquote><p>（1）对于假冒注册商标、姓名、认证、产地的不正当竞争行为根据《商标法》进行处罚；仿冒知名商标的，则可以根据情节处违法所得的 1 万～3 万元罚款，特别严重的追究<br>刑事责任<br>（2）通过贿赂达到销售目的，根据情节处以 1 万～20 万元罚款，严重的追究刑事责任。<br>（3）利用独占地位进行经营，根据情节处以 5 万～20 万元罚款；借此销售质次价高商品的，则没收违法所得，并罚款 1 万～3 万元。<br>（4）采用广告误导消费者，处以 1 万～20 万元罚款。<br>（5）采用不合法的有奖销售的，根据情节处以 1 万～10 万元的罚款。<br>（6）串通投标者，根据情节处以 1 万～20 万元的罚款。</p></blockquote><p>④ 侵犯商业秘密(按情节处以 1 万～20 万元罚款)：</p><blockquote><p>（1）以盗窃、利诱、胁迫等不正当手段获取别人的商业秘密<br>（2）披露、使用以不正当手段获取的商业秘密<br>（3）违反有关保守商业秘密的要求约定，披露、使用其掌握的商业秘密</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 软考架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
            <tag> 架构师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（软考架构师笔记十七）系统的可靠性分析与设计</title>
      <link href="/2019/06/11/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E5%8D%81%E4%B8%83%EF%BC%89%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
      <url>/2019/06/11/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E5%8D%81%E4%B8%83%EF%BC%89%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>（软考架构师笔记十七）系统的可靠性分析与设计<br><a id="more"></a></p><h2 id="1-可靠性"><a href="#1-可靠性" class="headerlink" title="1.可靠性"></a>1.可靠性</h2><p>（1）可靠度</p><blockquote><p>在 t=0 时系统正常的条件下，系统在时间区间[0,t]内能正常运行的概率</p></blockquote><p>（2）可用度</p><blockquote><p>系统在时刻 t 可运行的概率</p></blockquote><p>（3）可维度</p><blockquote><p>系统失效后，在时间间隔内被修复的概率</p></blockquote><p>（4）平均无故障时间</p><blockquote><p>从 t=0 时到故障发生时系统的持续运行时间的期望值，MTTF=1/λ（λ为失效率，是指器件或系统在单位时间内发生失效的预期次数）</p></blockquote><p>（5）平均故障修复时间</p><blockquote><p>MTTR =1/ μ（μ修复率是指单位时间内可修复系统的平均次数）</p></blockquote><p>（6）平均故障间隔时间</p><blockquote><p>MTBF = MTTR + MTTF</p></blockquote><h2 id="2-系统故障模型"><a href="#2-系统故障模型" class="headerlink" title="2.系统故障模型"></a>2.系统故障模型</h2><p>（1）故障的来源以及表现：</p><blockquote><p>失效：硬件的物理改变<br>故障：由于部件的失效、环境的物理干扰、操作错误或不正确的设计引起的硬件或软件中的错误状态<br>错误（差错）：故障在程序或数据结构中的具体位置（以下三个为错误的表现方式）<br>① 永久性：描述连续稳定的失效、故障或错误。在硬件中，永久性失效反映了不可恢复的物理改变<br>② 间歇性：描述那些由于不稳定的硬件或变化着的硬件或软件状态所引起的、仅仅是偶然出现的故障或错误<br>③ 瞬时性：描述那些由于暂时的环境条件而引起的故障或错误。</p></blockquote><p>（2）几种常用的故障模型</p><p>① 逻辑级的故障模型：</p><blockquote><p>固定型故障：电路中元器件的输入或输出等线的逻辑固定为 0 或固定为 1<br>短路故障：一个元件的输出线的逻辑值恒等于输入线的逻辑值<br>元件的开路故障：元件的输出线悬空，逻辑值可根据具体电路来决定<br>桥接故障：两条不应相连的线连接在一起而发生的故障</p></blockquote><p>② 数据结构级的故障：</p><blockquote><p>独立差错：一个故障的影响表现为使一个二进制位发生改变<br>算术差错：一个故障的影响表现为使一个数据的值增加或减少 2i(i=0,1,2,…)<br>单向差错：一个故障的影响表现为使一个二进制向量中的某些位朝一个方向（0 或 1）改变。</p></blockquote><p>（3）软件故障和软件差错：</p><p>① 定义：</p><blockquote><p>指软件设计过程造成的与设计说明的不一致的情况，其在数据结构或程序输出中的表现称为软件差错</p></blockquote><p>② 软件差错类型：</p><blockquote><p>非法转移：程序执行了说明中不存在的转移<br>误转移：程序执行了尽管说明中存在，但依据当前控制数据不应进行的转移<br>死循环：程序执行时间超过了规定界限<br>空间溢出：程序使用的空间超过了规定的界限<br>数据执行：指令计数器指向数据单元<br>无理数据：程序输出的数据不合理</p></blockquote><p>③ 系统级的故障模型故障：</p><blockquote><p>功能错误：即系统输出与系统设计说明的不一致</p></blockquote><p><br></p><h2 id="3-系统配置方法"><a href="#3-系统配置方法" class="headerlink" title="3. 系统配置方法"></a>3. 系统配置方法</h2><p>（1）容错技术</p><p>① 定义</p><blockquote><p>保证系统在某些组成部分出现故障或差错时仍能正常工作的技术，错技术正是用于构造一种能够自动排除非致命性故障的系统，即容错系统</p></blockquote><p>② 单机容错技术：</p><blockquote><p>自检技术：自检指系统在发生非致命性故障时能自动发现故障和确定故障的性质、部位，并自动采取措施更换和隔离产生故障的部件<br>冗余技术：硬件冗余（增加硬件）、软件冗余（增加程序，如同时采用不同算法或不同人编制的程序），时间冗余（如指令重复执行、程序重复执行）、信息冗余（如增加数据位）；常使用重复线路（用多个相同品种和规格的元件或构件并联起来，当作一个元件或构件使用，只要有一个不出故障，系统就能够正常工作）和备份线路</p></blockquote><p>② 双机热备份技术</p><p> 组成：是一种软硬件结合的较高容错应用方案。该方案是由两台服务器系统和一个外接共享磁盘阵列柜和相应的双机热备份软件组成</p><p> 过程：</p><blockquote><p>采用主、从系统之间相互按照一定的时间间隔发送通信信号保证主系统与备用系统的联系</p></blockquote><p> 模式：</p><blockquote><p>双机热备模式（active/standby 方式）：active 服务器处于工作状态；而standby 服务器处于监控准备状态，服务器数据包括数据库数据同时往两台或多台服务器写入（通常各服务器采用 RAID 磁盘阵列卡），保证数据的即时同步。当 active 服务器出现故障时，通过软件诊测或手工方式将 standby 机器激活，保证应用在短时间内完全恢复正常使用</p><p>双机互备模式：两个相对独立的应用在两台机器同时运行，但彼此均设为备机，当某一台服务器出现故障时，另一台服务器可以在短时间内将故障服务器的应用接管过来，从而保证了应用的持续性，但对服务器的性能要求比较高</p><p>双机双工模式：集群的一种形式，两台服务器均处于活动状态，同时运行相同的应用，以保证整体系统的性能，也实现了负载均衡和互为备份，通常使用磁盘柜存储技术</p></blockquote><p>③ 服务器集群技术</p><p> 定义：</p><blockquote><p>指一组相互独立的服务器在网络中组合成为单一的系统工作，并以单一系统的模式加以管理</p></blockquote><p>特点：</p><blockquote><p>拥有一个共同的名称<br>集群内任一系统上运行的服务可被所有的网络客户使用</p></blockquote><p>功能：</p><blockquote><p>协调管理各分离的构件出现的错误和故障，并可透明地向集群中加入构件</p></blockquote><p><br></p><h2 id="4-系统可靠性模型"><a href="#4-系统可靠性模型" class="headerlink" title="4.系统可靠性模型"></a>4.系统可靠性模型</h2><p>（1）时间模型：</p><blockquote><p>一个软件中的故障数目在 t = 0 时是常数，随着故障被纠正，故障数目逐渐减少</p></blockquote><p>（2）故障植入模型</p><blockquote><p>一个面向错误数的数学模型，其目的是以程序的错误数作为衡量可靠性的标准</p></blockquote><p>（3）数据模型：</p><blockquote><p>在数据模型下，对于一个预先确定的输入环境，软件的可靠度定义为在 n 次连续运行中软件完成指定任务的概率</p></blockquote><p><br></p><h2 id="5-系统的可靠性分析和可靠度计算"><a href="#5-系统的可靠性分析和可靠度计算" class="headerlink" title="5.系统的可靠性分析和可靠度计算"></a>5.系统的可靠性分析和可靠度计算</h2><p>（1）组合模型</p><p>① 需满足的条件：</p><blockquote><p>系统只有两种状态：运行状态和失效状态<br>系统可以划分成若干个不重叠的部件，每个部件也只有两种状态：运行状态和失效状态。<br>部件的失效是独立的<br>系统失效当且仅当系统中的剩余资源不满足系统运行的最低资源要求（系统的状态只依赖于部件的状态）时。<br>已知每个部件的可靠性，可靠性指可用度或可靠度等概率参数</p></blockquote><p>② 基本思想</p><blockquote><p>枚举所有系统状态<br>计算每个系统状态的概率系统状态的概率是指系统处于该状态的概率<br>把整个系统分解为简单的子系统，通过子系统的组合来计算整个系统的可靠性</p></blockquote><p>③ 系统类型：</p><blockquote><p>串联系统<br>并联系统<br>串并联系统</p></blockquote><p>（2）马尔柯夫模型</p><p>① 核心概念</p><blockquote><p>状态：在任何瞬间用以描述该系统所必须知道的一切<br>状态转移：随着时间的流逝，因模块的失效和修复，系统发生的状态变化</p></blockquote><p>基本思想：</p><blockquote><p>给定状态的转移概率仅取决于当前的状态。系统从一个状态 i 转移到另一个状态 j 的转移率定义为单位时间内从状态 i 转移到状态 j 的概率</p></blockquote><p><br></p><h2 id="6-提高系统可靠性的措施"><a href="#6-提高系统可靠性的措施" class="headerlink" title="6.提高系统可靠性的措施"></a>6.提高系统可靠性的措施</h2><p>（1）防止故障造成系统失效的两种技术</p><blockquote><p>故障掩蔽技术：防止故障造成差错的各种技术<br>系统重组技术：防止差错导致系统失效的各种技术</p></blockquote><p>（2）硬件冗余</p><p>① 常用技术：</p><blockquote><p>三模冗余(TMR):三个相同的模块接收三个相同的输入，产生的三个结果送至多数表决器。表决器的输出取决于三个输入的多数，若有一个故障模块，则另两个正常模块的输出可将故障模块的输出掩蔽，从而不在表决器输出产生差错</p></blockquote><p><img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/seventeen/ruankao17-1.png" height="30%" width="60%"></p><p>（3）信息冗余：</p><p>① 定义</p><blockquote><p>指通过在数据中附加冗余的信息以达到故障检测、故障掩蔽或容错的目的</p></blockquote><p>② 相关应用</p><blockquote><p>海明校验码：是在 k个数据位之外加上 r 个校验位，从而形成一个 k+r 位的新的码字，使新的码字的码距比较均匀地拉大。把数据的每一个二进制位分配在几个不同的偶校验位的组合中，当某一位出错后，就会引起相关的几个校验位的值发生变化，不但可以发现出错，还能指出是哪一位出错，为进一步自动纠错提供了依据</p><p>循环冗余校验码（CRC）：在 K 位信息码后再添加 R 位的校验码，整个编码长度为 N 位，因此，这种编码又称(N,K)码。对于一个给定的(N,K)码，可以证明存在一个最高次幂为 N-K=R的多项式 G(x)。根据 G(x)可以生成 R 位的校验码，而 G(x)叫作这个 CRC 码的生成多项式</p></blockquote><p>③ 海明码生成步骤：</p><blockquote><p>确定最小的校验位数 k，将它们记成 D1、D2、…、Dk，每个校验位符合不同的奇偶测试规定<br>原有信息和 k 个校验位一起编成长为 m+k 位的新码字。选择 k 校验位（0 或 1）以满足必要的奇偶条件<br>对所接收的信息作所需的 k 个奇偶检查<br>如果所有的奇偶检查结果均正确，则认为信息无错误。</p></blockquote><p>④ CRC码生成步骤</p><blockquote><p>将 x 的最高幂次为 R 的生成多项式 G(x)转换成对应的 R+1 位二进制数<br>将信息码左移 R 位，相当于对应的信息多项式 C(x)×2R<br>用生成多项式（二进制数）对信息码做模 2 除，得到 R 位的余数<br>将余数拼到信息码左移后空出的位置，得到完整的 CRC 码。</p></blockquote><p><br></p><h2 id="7-备份与恢复"><a href="#7-备份与恢复" class="headerlink" title="7.备份与恢复"></a>7.备份与恢复</h2><p>（1）定义：</p><blockquote><p>在系统其他地方创建数据与程序的电子复制，为重建系统中被破坏的或不正确的数据提供条件，备份最常用的技术是数据转储和建立日志文件</p></blockquote><p>（2）数据转储：</p><blockquote><p>静态转储：指在系统中无事务时进行的转储操作<br>动态转储：指转储操作与用户事务并发进行，而且转储工作不会影响事务的运行，但它不能保证副本中的数据正确有效</p></blockquote><p>（3）备份方式</p><blockquote><p>联机备份（冷备份）：是一种静态转储技术，备份系统所有的物理文件（控制文件、数据文件、重做日志和归档日志）和初始化文件<br>脱机备份（热备份）：是一种动态转储技术，由于只备份所需的文件，因而被看作是部分备份</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 软考架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
            <tag> 架构师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis知识汇总[初级]--数据类型（String）</title>
      <link href="/2019/06/10/redis%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB-%E5%88%9D%E7%BA%A7-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%88String%EF%BC%89/"/>
      <url>/2019/06/10/redis%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB-%E5%88%9D%E7%BA%A7-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%88String%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>redis知识汇总[初级]–数据类型（String）<br><a id="more"></a></p><h2 id="1-append"><a href="#1-append" class="headerlink" title="1.append"></a>1.append</h2><p>（1）命令：APPEND key value</p><p>（2）介绍：</p><blockquote><p>① key存在，value将会追加到原有值的后面<br>② key不存在，将初始化设置该值（输入的设置）</p></blockquote><pre><code>127.0.0.1:6379&gt; append myname yiyu(integer) 4127.0.0.1:6379&gt; get myname&quot;yiyu&quot;127.0.0.1:6379&gt; append myname isman(integer) 9127.0.0.1:6379&gt; get myname&quot;yiyuisman&quot;</code></pre><h2 id="2-bitcount"><a href="#2-bitcount" class="headerlink" title="2.bitcount"></a>2.bitcount</h2><p>（1）命令：BITCOUNT key [start] [end]</p><p>（2）介绍：</p><blockquote><p>① key存在，返回被设置为 1 的位的数量<br>② key不存在，当做字符串处理，故为0<br>③ -1 表示最后一个位，而 -2 表示倒数第二个位</p></blockquote><pre><code>//不存在127.0.0.1:6379&gt; bitcount bcname(integer) 0//存在127.0.0.1:6379&gt; setbit sbname 20 1(integer) 0127.0.0.1:6379&gt; bitcount sbname(integer) 1</code></pre><h2 id="3-bitop"><a href="#3-bitop" class="headerlink" title="3.bitop"></a>3.bitop</h2><p>（1）命令：BITOP operation destkey key [key …]</p><p>（2）介绍：</p><blockquote><p>① key存在，对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上<br>② key不存在，默认字符串为0<br>③ operation：AND（一个或多个逻辑并）、OR（一个或多个逻辑或）、NOT（此只能单个key，逻辑非）、XOR（一个或多个逻辑异或）</p></blockquote><pre><code>//key不存在127.0.0.1:6379&gt; BITOP AND and-result bit(integer) 0//key存在127.0.0.1:6379&gt; setbit topbit1 1 1(integer) 0127.0.0.1:6379&gt; setbit topbit2 3 1(integer) 0127.0.0.1:6379&gt; BITOP AND and-result topbit1 topbit2(integer) 1</code></pre><h2 id="4-decr"><a href="#4-decr" class="headerlink" title="4.decr"></a>4.decr</h2><p>（1）命令：DECR key</p><p>（2）介绍：</p><blockquote><p>① key存在，改对应value减1<br>② key不存在，value初始化0后减1<br>③ value为不能加减的数，报错</p></blockquote><pre><code>//key不存在127.0.0.1:6379&gt; decr decrcount2(integer) -1//key存在127.0.0.1:6379&gt; set decrcount1 100OK127.0.0.1:6379&gt; decr decrcount1(integer) 99</code></pre><h2 id="5-decrby"><a href="#5-decrby" class="headerlink" title="5.decrby"></a>5.decrby</h2><p>（1）命令：DECRBY key decrement</p><p>（2）介绍：</p><blockquote><p>① key存在，改对应value减decrement<br>② key不存在，value初始化0后减decrement<br>③ value为不能加减的数，报错</p></blockquote><pre><code>//key不存在127.0.0.1:6379&gt; decrby drcount 100(integer) -100//key存在127.0.0.1:6379&gt; set drcount1 50OK127.0.0.1:6379&gt; decrby drcount1 2(integer) 48</code></pre><h2 id="6-get"><a href="#6-get" class="headerlink" title="6.get"></a>6.get</h2><p>（1）命令：GET key</p><p>（2）介绍：</p><blockquote><p>① key存在，返回对应value的值<br>② key不存在，返回nil<br>③ key非字符串，报错</p></blockquote><pre><code>//key不存在127.0.0.1:6379&gt; get name1(nil)//key存在127.0.0.1:6379&gt; set gname yiyuOK127.0.0.1:6379&gt; get gname&quot;yiyu&quot;</code></pre><h2 id="7-getbit"><a href="#7-getbit" class="headerlink" title="7.getbit"></a>7.getbit</h2><p>（1）命令：GETBIT key offset</p><p>（2）介绍：</p><blockquote><p>① key存在，获取偏移量对应的value<br>② key不存在，返回0（offset&gt;value 也会返回0）</p></blockquote><pre><code>// key不存在返回0127.0.0.1:6379&gt; getbit gbit 20190606(integer) 0//对存在的offset 获取127.0.0.1:6379&gt; setbit sbit 20190606 1(integer) 1127.0.0.1:6379&gt; getbit sbit 20190606(integer) 1</code></pre><h2 id="8-getrance"><a href="#8-getrance" class="headerlink" title="8.getrance"></a>8.getrance</h2><p>（1）命令：GETRANGE key start end</p><p>（2）介绍：</p><blockquote><p>key存在，返回该范围的字符串<br>key不存在，返回””<br>-1 表示最后一个字符， -2 表示倒数第二个</p></blockquote><pre><code>//已存在key127.0.0.1:6379&gt; set rangename yiyuOK127.0.0.1:6379&gt; get rangename&quot;yiyu&quot;//第一个字符为0开始127.0.0.1:6379&gt; getrange rangename 1 2&quot;iy&quot;//key不存在返回“”127.0.0.1:6379&gt; getrange rangename1 1 2&quot;&quot;</code></pre><h2 id="9-getset"><a href="#9-getset" class="headerlink" title="9.getset"></a>9.getset</h2><p>（1）命令：GETSET key value</p><p>（2）介绍：</p><blockquote><p>key存在，设置新值，返回旧值（非字符串报错）<br>key不存在，返回nil</p></blockquote><pre><code>127.0.0.1:6379&gt; getset gsname yiyu(nil)127.0.0.1:6379&gt; getset gsname yiyuhahaha&quot;yiyu&quot;</code></pre><h2 id="11-incr"><a href="#11-incr" class="headerlink" title="11.incr"></a>11.incr</h2><p>（1）命令：INCR key</p><p>（2）介绍:</p><blockquote><p>key存在：值增加1<br>key不存在：初始化值0，在执行incr</p></blockquote><pre><code>//对已存在key加一127.0.0.1:6379&gt; set incrname1 20OK127.0.0.1:6379&gt; get incrname1&quot;20&quot;127.0.0.1:6379&gt; incr incrname1(integer) 21//对不存在key初始化0加一127.0.0.1:6379&gt; incr incrname2(integer) 1</code></pre><h2 id="12-incrby"><a href="#12-incrby" class="headerlink" title="12.incrby"></a>12.incrby</h2><p>（1）命令：INCRBY key increment</p><p>（2）介绍:</p><blockquote><p>key存在：值增加increment<br>key不存在：初始化值0，在执行incr</p></blockquote><pre><code>//对已存在的值加5127.0.0.1:6379&gt; set incrbyname 10OK127.0.0.1:6379&gt; get incrbyname&quot;10&quot;127.0.0.1:6379&gt; incrby incrbyname 5(integer) 15//对不存在的值初始化0加5127.0.0.1:6379&gt; incrby incrbyname1 5(integer) 5</code></pre><h2 id="13-incrbyfloat"><a href="#13-incrbyfloat" class="headerlink" title="13.incrbyfloat"></a>13.incrbyfloat</h2><p>（1）命令：INCRBYFLOAT key increment</p><p>（2）介绍:</p><blockquote><p>与incrby同理，支持float数据</p></blockquote><h2 id="14-mget"><a href="#14-mget" class="headerlink" title="14.mget"></a>14.mget</h2><p>（1）命令：MGET key [key …]</p><p>（2）介绍:</p><blockquote><p>key存在：返回value<br>key不存在：不存在的key返回nil</p></blockquote><pre><code>127.0.0.1:6379&gt;  msetnx mname1 1 mname2 2(integer) 0127.0.0.1:6379&gt; mget mname1 mname2 mname21) &quot;1&quot;2) &quot;2&quot;3) (nil)</code></pre><h2 id="15-msetnx"><a href="#15-msetnx" class="headerlink" title="15.msetnx"></a>15.msetnx</h2><p>（1）命令：MSETNX key value [key value …]</p><p>（2）介绍:</p><blockquote><p>key存在：即使存在一个也会全部失败<br>key不存在：设置多个key-value<br>此操作为原子性操作</p></blockquote><p>//key未存在<br>    127.0.0.1:6379&gt; msetnx mname1 1 mname2 2 mname3 3<br>    (integer) 1<br>    127.0.0.1:6379&gt; mget mname1 mname2 mname3<br>    1) “1”<br>    2) “2”<br>    3) “3”<br>    //存在个别key（存不进会失败但不会影响已存在的值）<br>    127.0.0.1:6379&gt;  msetnx mname4 4 mname1 1<br>    (integer) 0<br>    127.0.0.1:6379&gt; mget mname4 mname1<br>    1) (nil)<br>    2) “1”</p><h2 id="16-psetex"><a href="#16-psetex" class="headerlink" title="16.psetex"></a>16.psetex</h2><p>(1) 命令：PSETEX key milliseconds value</p><p>（2）介绍：</p><blockquote><p>与setex类似，只是时间换成毫秒</p></blockquote><h2 id="17-set"><a href="#17-set" class="headerlink" title="17.set"></a>17.set</h2><p>（1）命令：SET key value [EX seconds] [PX milliseconds] [NX|XX]</p><p>（2）介绍:</p><blockquote><p>key存在：value覆盖原值<br>key不存在：关联key与value<br>EX seconds：key过期时间，单位秒<br>PX millisecond：key过期时间，单位毫秒<br>NX：等同命令SETNX key value（可以不存在时起作用）<br>XX：与上同理</p></blockquote><pre><code>//设值127.0.0.1:6379&gt; set myname yiyuOK127.0.0.1:6379&gt; get myname&quot;yiyu&quot;//覆盖原值127.0.0.1:6379&gt; set myname goodmanOK127.0.0.1:6379&gt; get myname&quot;goodman&quot;//设值时间127.0.0.1:6379&gt; set myname yiyu EX 20OK127.0.0.1:6379&gt; GET myname&quot;yiyu&quot;//20s后127.0.0.1:6379&gt; get myname(nil)</code></pre><h2 id="18-setbit"><a href="#18-setbit" class="headerlink" title="18.setbit"></a>18.setbit</h2><p>（1）命令：SETBIT key offset value</p><p>（2）介绍：</p><blockquote><p>① key存在，设值偏移量的值<br>② key不存在，生成新的字符串<br>③ offset：偏移量，大于或等于0，小于2^32</p></blockquote><pre><code>//可用来记录当日是否登陆127.0.0.1:6379&gt; setbit sbit 20190606 1(integer) 0127.0.0.1:6379&gt; getbit sbit 20190606(integer) 1</code></pre><h2 id="19-setex"><a href="#19-setex" class="headerlink" title="19.setex"></a>19.setex</h2><p>（1）命令：SETEX key seconds value</p><p>（2）介绍：</p><blockquote><p>原子性操作<br>key存在，value覆盖旧值<br>key不存在，设置该值<br>seconds ：设值key过期时间，单位秒</p></blockquote><pre><code>127.0.0.1:6379&gt; setex exname 20 yiyuOK127.0.0.1:6379&gt; get exname&quot;yiyu&quot;//已过期127.0.0.1:6379&gt; get exname(nil)</code></pre><h2 id="20-setnx"><a href="#20-setnx" class="headerlink" title="20.setnx"></a>20.setnx</h2><p>（1）命令：SETNX key value</p><p>（2）介绍：</p><blockquote><p>key存在，不做任何操作<br>key不存在，设置该值</p></blockquote><pre><code>//设值（key不存在）127.0.0.1:6379&gt; setnx nxname yiyu(integer) 1127.0.0.1:6379&gt; get nxname&quot;yiyu&quot;//设置值（key存在）127.0.0.1:6379&gt; setnx nxname hahaha(integer) 0127.0.0.1:6379&gt; get nxname&quot;yiyu&quot;</code></pre><h2 id="21-setrance"><a href="#21-setrance" class="headerlink" title="21.setrance"></a>21.setrance</h2><p>（1）命令：SETRANGE key offset value</p><p>（2）介绍：</p><blockquote><p>key存在，从偏移量开始的位置设值<br>key不存在，当做空白字符串处理设值</p></blockquote><pre><code>//对已存在的key设值127.0.0.1:6379&gt; set rname yiyuhahahaOK127.0.0.1:6379&gt; setrange rname 5 lalala(integer) 11127.0.0.1:6379&gt; get rname&quot;yiyuhlalala&quot;//对未存在的key设值127.0.0.1:6379&gt; setrange empty_name 2 &quot;yiyu&quot;(integer) 6//  该偏移前的位置被空格替代127.0.0.1:6379&gt; get empty_name&quot;\x00\x00yiyu&quot;</code></pre><h2 id="22-strlen"><a href="#22-strlen" class="headerlink" title="22.strlen"></a>22.strlen</h2><p>（1）命令：strlen key</p><p>（2）介绍:</p><blockquote><p>key存在：返回对应value的长度（value不是字符串返回错误）<br>key不存在：返回0</p></blockquote><pre><code>127.0.0.1:6379&gt; strlen myname(integer) 9127.0.0.1:6379&gt; strlen myname1(integer) 0127.0.0.1:6379&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（软考架构师笔记十六）安全性和保密性设计</title>
      <link href="/2019/06/10/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E5%8D%81%E5%85%AD%EF%BC%89%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1/"/>
      <url>/2019/06/10/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E5%8D%81%E5%85%AD%EF%BC%89%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>（软考架构师笔记十六）安全性和保密性设计<br><a id="more"></a></p><h2 id="1-安全性和保密性设计"><a href="#1-安全性和保密性设计" class="headerlink" title="1.安全性和保密性设计"></a>1.安全性和保密性设计</h2><p>（1）信息安全</p><blockquote><p>保证信息的保密性、完整性、真实性、占有性</p></blockquote><p>（2）保密性</p><blockquote><p>系统中的信息必须按照该信息拥有者的要求保证一定的秘密性，不会被未经许可的第三方非法获取</p></blockquote><p>（3）完整性</p><blockquote><p>系统中的信息应当安全、准确、有效，要求数据不能被非法改动或删除（数字签名、加密）</p></blockquote><p>（4）真实性</p><blockquote><p>对信息的发送者身份的确认或系统中有关主体的身份确认，这样可以保证信息的可信度（数字签名，公钥加密）</p></blockquote><p>（5）占有性</p><blockquote><p>保护信息赖以存储的节点、介质、载体等不被盗用或窃取（使用版权、专利、商业秘密性，提供物理的或逻辑的存取限制方法，维护和检查有关窃取文件的记录）</p></blockquote><h2 id="2-加密和解密"><a href="#2-加密和解密" class="headerlink" title="2.加密和解密"></a>2.加密和解密</h2><p>（1）定义：</p><blockquote><p>明文：信息的发送方准备好要发送信息的原始形式<br>密文：对明文经过一系列变换后形成信息的另一种不能直接体现明文含义的形式<br>加密：由明文转换为密文的过程<br>加密算法：加密时所采用的一组规则或方法<br>解密：再把密文还原成明文，以获得信息的具体内容<br>解密算法：运用一系列与加密算法相对应的方法或规则<br>密钥：加密、解密过程中，由通信双方掌握的参数信息控制具体的加密和解密过程</p></blockquote><p>（2）对称密钥加密算法</p><p>① 定义：</p><blockquote><p>加密密钥与解密密钥相同，或者从一个很容易计算出另一个</p></blockquote><p>② 加密算法：</p><p>DES(对称加密算法):</p><blockquote><p>把要加密的明文分成 64 位的数据段作为输入，再使用根据 64 位密钥变化生成的 52 个子密钥，对输入的数据段依次进行初始置换、16 轮迭代、逆初始置换，然后得到 64 位密文</p></blockquote><p>IDEA（国际数据加密算法）：</p><blockquote><p>以 64 位为单位的，在加密前把要加密的明文按每 64 位作为一个数据段进行分割然后分别加密</p></blockquote><p>还有Skipjack、3DES、GDES、 NewDES、Lucifer、FEAL N、LOKI 91、RC4、RC5 </p><p>（3）非对称加密算法（双钥加密方法）：</p><p>① 定义：</p><blockquote><p>加密和解密的密钥并不相同，或者从一个很难计算出另外一个</p></blockquote><p>② 问题：</p><blockquote><p>密钥的生成、导入、存储、管理、分发等过程比较复杂</p></blockquote><p>③ 私钥：</p><blockquote><p>在运算中，先产生一对密钥，其中之一是保密密钥，由用户自己保存，不能向外界泄漏</p></blockquote><p>④ 公钥：</p><blockquote><p>可对外公开，甚至可在公共目录中列示</p></blockquote><p>只有使用私钥才能解密用公钥加密的数据，同时使用私钥加密的数据只能用公钥解密</p><p>⑤ 算法：</p><p>RSA：</p><blockquote><p>首先把需要加密的明文按比特位分成等长的数据段，使得每个数据段对应的十进制数小于 N，即数据段的长度小于 log2N。然后依次对每个明文数据段 m 做加密运算可以得到密文 c∶c = me mod N。相应的，解密时对密文数据段做解密运算就可以得到明文 m∶m = ce mod N</p></blockquote><p>还有背包密码、McEliece、Diffe Hellman、Rabin、Ong Fiat Shamir、零知识证明的算法、椭圆曲线、EIGamal 等</p><p><br></p><h2 id="3-数字签名与数字水印"><a href="#3-数字签名与数字水印" class="headerlink" title="3. 数字签名与数字水印"></a>3. 数字签名与数字水印</h2><p>（1）散列函数</p><blockquote><p>报文：散列函数运算的输入信息<br>消息摘要（散列码）：散列函数运算后所得到的结果</p></blockquote><p>其特点：</p><blockquote><p>不同内容的报文具有不同的散列码，而一旦原始报文有任何改变，哪怕改变一位信息，则通过散列函数计算后得到的散列码也将完全不同<br>散列函数是单向的，即求解某一个报文的散列码非常容易，但是根据散列码来倒推原始报文是非常困难的<br>对于任何一个报文，无法预知它的散列码<br>散列码具有固定的长度，不管原始报文的长度如何，通过散列函数运算后的散列码都具有一样的长度</p></blockquote><p>算法：MD5、SHA、HMAC</p><p>（2）数字签名</p><p>① 组成：签名算法和验证算法（签名算法和验证算法。通过使用签名算法签名一个消息，所得到的签名能够通过一个验证算法来验证签名的真实性和有效性）;通过数字签名可以有效地保证数据的完整性，防止第三方伪造或发送方的抵赖</p><p>② 过程：</p><blockquote><p>信息的发送方对信息利用自己的私钥进行签名，接着发送方把这个签名和信息一起发送给接收方。接收方收到信息后利用发送方的公钥来对其中的数字签名进行验证，确认其合法性</p></blockquote><p>③ 算法：</p><p>RSA 结合 MD5 数字签名：</p><blockquote><p>信息的发送方通过对信息进行散列运算生成一个消息摘要，接着发送方用自己的私钥对这个消息摘要进行加密，就形成发送方的数字签名。然后，把这个数字签名作为信息的附件和信息一起发送给信息的接收方。接收方收到信息后，首先对收到的信息进行与发送者相同的散列运算得到一个消息摘要，接着再用发送方的公钥来对信息中附加的数字签名进行解密得到发送方计算出的散列码。如果两个散列码相同，那么接收方就能确认该信息和数字签名是由发送方发出的</p></blockquote><p>数字签名标准（DSS）：</p><blockquote><p>收方在收到消息摘要和签名后将其作为验证函数的输入。验证函数还依赖于全局公钥和与发送方的私钥相匹配的公钥 PK，这样只有发送方用其自己的私钥才能产生有效的签名</p></blockquote><p>还有EI Gamal、Fiat-Shamir、Guillon-Oucsquerrter、igital SignatureAlgorithm，数字签名算法）、椭圆曲线</p><p>（3）数字信封</p><p>① 定义：</p><blockquote><p>用加密技术来保证只有规定的特定收信人才能阅读通信的内容</p></blockquote><p>② 过程：</p><blockquote><p>信息发送方采用对称密钥来加密信息内容，然后将此对称密钥用接收方的公开密钥来加密（这部分称数字信封），之后，将它和加密后的信息一起发送给接收方，接收方先用相应的私有密钥打开数字信封，得到对称密钥，然后使用对称密钥解开加密信息</p></blockquote><p><br></p><h2 id="4-数字证书与密钥管理"><a href="#4-数字证书与密钥管理" class="headerlink" title="4.数字证书与密钥管理"></a>4.数字证书与密钥管理</h2><p>（1）密钥分配中心（KDC）：</p><blockquote><p>每一个用户都只保存自己的私钥 SK 和 KDC 的公钥 PKKDC，而在通信时再经由 KDC 获得其他用户的公钥 PK 或者仅仅在某一次通信中可以使用的对称密钥加密算法的临时密钥 K</p></blockquote><p>（2）数字证书和公开密钥基础设施</p><p>① 数字证书：</p><p>定义：</p><blockquote><p>利用一对互相匹配的密钥进行加密、解密。每个用户自己保存私钥，用它进行解密和签名；同时设定一个公钥，并由本人公开，为一组用户所共享，用于加密和验证签名</p></blockquote><p>内容：</p><blockquote><p>唯一标识证书所有者的名称<br>唯一标识证书签发者的名称<br>证书所有者的公开密钥<br>证书签发者的数字签名<br>证书的有效期<br>证书的序列号</p></blockquote><p>② 公开密钥基础设施（PKI）</p><p>定义：</p><blockquote><p>由数字证书、证书颁发机构（Certificate Authority，CA），以及对电子交易、通信等所涉及的各方的合法性进行检查和验证的其他注册机构组成的一套系统</p></blockquote><p>目标：向广大的信息系统用户和应用程序提供公开密钥的管理服务</p><p>有效期控制机制：</p><blockquote><p>数字证书的有效期<br>证书撤销列表（Certificate Revocation List，CRL）</p></blockquote><p>结构模型：</p><blockquote><p>管理实体：PKI 服务的提供者<br>端实体：PKI 服务的使用者<br>证书库：一个分布式数据库，用于证书和 CRL 的存放和检索</p></blockquote><p>CA：</p><blockquote><p>是 PKI 框架中唯一能够发布和撤销证书的实体，维护证书的生命周期</p></blockquote><p>RA（注册机构）：</p><blockquote><p>负责处理用户请求，在验证了请求的有效性后，代替用户向 CA 提交</p></blockquote><p>PKI 层次模型：</p><blockquote><p>传输层：向上提供 PKI 报文的可靠传输，它可以是传输层协议或应用层协议<br>密码服务层：向上提供加密、解密、数字签名、消息摘要等基本密码学服务，可由 RSA、MD5 等方法实现<br>证书服务层：使用前面两层提供的加密和传输服务，向用户提供证书的请求、签发、发布、撤销和更新等服务</p></blockquote><p>③ 公钥加密体制：解决对称密钥加密体制中的密钥分配难以保密的问题而提出的</p><p>（3）X.509证书特点：</p><blockquote><p>支持多种算法<br>支持多种命名机制<br>可以限制证书（公开密钥）的用途<br>定义证书遵循的策略<br>控制信任关系的传递</p></blockquote><p>（4）X.509v3证书特点：</p><blockquote><p>版本号<br>序列号<br>签名算法识别符<br>发行者名称<br>有效期<br>主体名称<br>主体的公开密钥信息<br>发行者唯一识别符<br>主体唯一标识符<br>扩充域<br>签名</p></blockquote><p><br></p><h2 id="4-安全协议"><a href="#4-安全协议" class="headerlink" title="4.安全协议"></a>4.安全协议</h2><p>（1）IPSec协议</p><p>① 之前问题：在 TCP/IP 协议中，对 IP 数据包没有提供任何安全保护，攻击者可以通过网络嗅探、IP欺骗、连接截获等方法来攻击正常的 TCP/IP 通信</p><p>② 定义：</p><blockquote><p>该协议把密码技术应用在网络层，以向信息的发送方和接收方提供源地址验证、数据传输的完整性、存取控制、保密性等安全服务，保护通信免遭窃听、抵御网络攻击，而且更高层的应用层协议也可以直接或间接地使用这些安全服务，为其上层协议如TCP、UDP 等提供透明的安全保护服务，在 Internet 这样不安全的网络中为通信提供安全保证</p></blockquote><p>③ 原理：</p><blockquote><p>发送方在发送数据前对数据实施加密，然后把密文数据发送到网络中去，开始传输。在整个传输过程中，数据都是以密文方式传输的，直到数据到达目的节点，才由接收方对密文进行解密，提取明文信息</p></blockquote><p>④ 安全关联（SA）</p><blockquote><p>指提供通信安全服务的发送方和接收方之间的一种单向关系<br>是构成 IPSec 的基础，它是进行通信的双方经协商建立起来的一种协定<br>定义了两个 IPSec 系统之间的安全通信特征，并决定在该通信中为数据包提供的安全服务</p></blockquote><p>⑤ 安全策略（AH）</p><blockquote><p>先将数据进行校验和加密，然后封装为 IP 包，从而实现无连接通信的数据完整性、数据源认证和防止重放攻击</p></blockquote><p>⑥ ESP</p><blockquote><p>通过对数据包的数据进行加密来提供传输信息的保密性，从而实现了数据完整性、数据源认证、数据保密性的安全服务</p></blockquote><p>⑦ IP密钥交换（IKE）</p><blockquote><p>它使用了 Internet 安全关联和密钥管理协议（Internet SecurityAssociation and Key Management Protocol，ISAKMP）、密钥确定协议 Oakley 和描述支持匿名和快速密钥刷新的密钥交换的 SKEME 协议</p></blockquote><p>⑧ IPSec 的工作模式</p><p>传输模式：首先将要传送的数据使用 IPSec 加密封装起来，再把相关的 IPSec 头插入 IP头和被保护的数据之间封装起来，然后从 IPSec 头读取 SPI 值得到相对的 SA，再利用 SA 所定的解密参数解出所<br>加密的数据（通信和处理效率较高）</p><p>隧道模式：首先使用 SA 的相关信息将 IP 的数据包全部加密，接下来在前面加上 ESPHeader，然后把它们作为数据为它们再加上一个新的 IP 头。接收端收到 ESP 封包后，使用 ESP Header 内容中的 SPI 值提供的 SA，然后解出 ESP Header 后的装载数据，就可以取回原始的 IP 头与封包（安全性较高）</p><p>（2）SSL </p><p>① 定义：用于安全传输数据的一种通信协议；采用公钥加密技术、对称密钥加密技术等保护两个应用之间的信息传输的机密性和完整性</p><p>② 问题：不能保证传输信息的不可否认性</p><p>③ 基本安全性：</p><blockquote><p>通道是保密的，经过握手确定密钥之后，所有的消息被加密<br>通道是被认证的，通信中的服务器端总是被认证，客户端可选认证<br>通道是可靠的，用 MAC 对传送的消息进行完整性检查，保证通道上数据的完整性</p></blockquote><p>④ 组成：</p><blockquote><p>SSL 记录协议<br>SSL 握手协议<br>SSL 密码变更说明协议<br>SSL 警告协议</p></blockquote><p>（3）PGP  协议</p><p>① 定义：</p><blockquote><p>一套电子邮件加密方案<br>用来对邮件加密以防止非授权者阅读，还能对邮件加上数字签名而使收信人可以确认邮件确实是由发送方发出的<br>采用 IDEA 算法、对于加密信息采用 RSA 公钥加密算法，还采用了用于数字签名的消息摘要算法，加密前进行压缩处理等技术手段进行邮件加密的一套软件</p></blockquote><p>② 原理</p><p>③ 密钥管理机制</p><p><br></p><h2 id="5-计算机病毒与防治"><a href="#5-计算机病毒与防治" class="headerlink" title="5.计算机病毒与防治"></a>5.计算机病毒与防治</h2><p>（1）定义：</p><blockquote><p>指编制或者在计算机程序中插入的破坏计算机功能或者毁坏数据，影响计算机使用，并能自我复制的一组计算机指令或者程序代码</p></blockquote><p>（2）周期：</p><blockquote><p>潜伏阶段<br>传染阶段<br>触发阶段<br>发作阶段</p></blockquote><p>（3）特征：</p><blockquote><p>传染性：病毒具有把自身复制到其他系统或文件等宿主中去的能力<br>非授权性：病毒程序的执行不需要得到用户的同意<br>潜伏性：病毒潜伏在系统中而不被人们所发觉<br>破坏性：病毒在一定条件下可以自动触发，并对计算机实施破坏</p></blockquote><p>（4）类别</p><blockquote><p>根据系统：攻击 DOS 系统的病毒、攻击 Windows 系统的病毒、攻击Unix/Linux 系统的病毒、攻击 OS/2 系统的病毒、攻击 Macintosh 系统的病毒、攻击手机的病毒、其他操作系统上的病毒</p><p>根据连接方式：源码型病毒、嵌入型病毒、Shell 病毒、宏病毒、脚本型病毒、操作系统型病毒</p><p>根据破坏情况：良性病毒和恶性病毒</p><p>根据传播媒介：单机病毒和网络病毒</p></blockquote><p>（5）组成：</p><blockquote><p>传染模块：负责把计算机病毒从一个系统或文件传播到更多的系统或文件中去<br>触发模块：检查预定触发条件是否满足<br>破坏模块：负责实施病毒的破坏动作<br>主控模块：控制病毒程序的运行</p></blockquote><p>（6）网络环境下的病毒发展新趋势</p><blockquote><p>E-mail 病毒<br>即时通信：MSN、QQ、OICQ<br>局域网共享传播<br>木马程序</p></blockquote><p>（7）计算机病毒的检测与清除</p><blockquote><p>特征码检测<br>校验和检测<br>行为监测<br>启发式扫描<br>虚拟机<br>病毒的清除</p></blockquote><p>（8）计算机病毒的预防</p><blockquote><p>一定要在计算机中安装反病毒软件<br>不要轻易使用来历不明的或者没有经过确认的软件<br>电子邮件的附件应该先检查病毒后再开启，并在发送邮件之前检查病毒<br>定期使用反病毒软件扫描系统<br>确保所使用的反病毒软件的扫描引擎和病毒代码库为最新的<br>系统安装完成后立即制作系统应急启动盘<br>定期进行备份<br>利用安全扫描工具定时扫描系统和主机<br>使用反病毒软件时，最好先查毒，找到了带毒文件后，再确定是否进行杀毒操作<br>建立本单位的计算机病毒防治管理制度</p></blockquote><p><br><br>6.身份认证与访问控制</p><p>（1）身份认证技术</p><p>① 定义：对系统的用户进行有效性、真实性验证</p><p>② 方式：</p><blockquote><p>口令认证方式<br>基于公钥签名的认证方式<br>持卡认证方式<br>基于人体生物特征的认证方式<br>动态口令技术<br>PPP 中的认证协议：还有PAP 和 CHAP，此外还有 EAP<br>RADIUS 协议</p></blockquote><p>（2）访问控制技术</p><p>① 定义：</p><blockquote><p>在身份认证的基础上，根据不同身份的用户对用户的访问请求加以限制<br>主体：发出访问、存取请求的一方<br>客体：被访问的对象和资源<br>访问规则：一套定义主体与客体之间相互关系，确定不同主体对不同客体的访问能力与权限的规则</p></blockquote><p>② 访问控制策略</p><blockquote><p>自主访问控制（DAC）：一个拥有一定权限范围的主体可以直接或者间接地把权限授予其他的主体<br>强制访问控制（MAC）：系统统一采用某种访问权限的授予和撤销的策略，而且强制所有主体都必须服从这种访问权限的分配</p><p>基于角色的访问控制（RBAC）：克服以上两者的缺点的同时，提供一个良好的安全的系统环境</p></blockquote><p>③ 访问许可的授权对访问许可的授权有三种类型：</p><blockquote><p>等级型：把对客体的存取控制权限的修改能力划分成不同的等级，拥有高级别修改能力的主体可以把这种权限分配给比其级别低的主体</p><p>拥有型：拥有者具有对所拥有的客体的全部的控制权，并且可以任意修改其拥有的客体的访问控制表，并可对其他主体授予或撤销对其客体的任何一种访问权限。但是拥有者无权将其对客体的访问控制权的分配权授予其他主体</p><p>自由型：一个客体的拥有者可以对任何主体授予对他所拥有的客体的访问权限，同时还可以把这种分配权授予其他主体而不受任何限制</p></blockquote><p>④ 内容：</p><blockquote><p>用户标识与认证<br>逻辑访问控制<br>审计与跟踪<br>公共访问控制</p></blockquote><p><br></p><h2 id="7-网络安全体系"><a href="#7-网络安全体系" class="headerlink" title="7.网络安全体系"></a>7.网络安全体系</h2><p>（1）OSI架构：</p><blockquote><p>是一个面向对象的、多层次的结构，它认为安全的网络应用是由安全的服务实现的，而安全服务又是由安全机制来实现的</p></blockquote><p>（2）OSI安全服务：</p><blockquote><p>对象认证服务<br>访问控制服务<br>数据保密性服务<br>数据完整性服务<br>禁止否认服务</p></blockquote><p>（3）OSI 安全机制</p><blockquote><p>加密机制<br>数字签名机制<br>访问控制机制<br>数据完整性机制<br>鉴别交换机制<br>流量填充机制<br>路由验证机制<br>公正机制</p></blockquote><p>（4）OSI 安全服务与安全机制之间的关系</p><blockquote><p>不是一一对应的关系</p></blockquote><p><img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/sixteen/ruankao16-1.png" height="40%" width="100%"></p><p>（5）VPN在网络安全中的应用</p><p>① 定义：</p><blockquote><p>利用不安全的公共网络如 Internet 等作为传输媒介，通过一系列的安全技术处理，实现类似专用网络的安全性能，保证重要信息的安全传输的一种网络技术</p></blockquote><p>② 优点：</p><blockquote><p>网络通信安全<br>方便的扩充性<br>方便的管理<br>节约成本显著</p></blockquote><p>③ VPN的原理：</p><p>安全技术：</p><blockquote><p>安全隧道技术<br>用户认证技术<br>访问控制技术</p></blockquote><p>VPN用户代理:</p><blockquote><p>安全隧道终端功能<br>用户认证功能<br>访问控制功能</p></blockquote><p><br></p><h2 id="8-系统的安全性设计"><a href="#8-系统的安全性设计" class="headerlink" title="8.系统的安全性设计"></a>8.系统的安全性设计</h2><p>（1）物理安全问题与设计</p><blockquote><p>物理设备本身是否安全可靠<br>设备的位置与环境的安全<br>限制物理访问<br>地域因素</p></blockquote><p>（2）防火墙及其在系统安全中的应用</p><blockquote><p>过滤<br>状态检测<br>应用网关</p></blockquote><p>优点：</p><blockquote><p>可以隔离网络，限制安全问题的扩散<br>简化网络安全管理的复杂度<br>能够有效地记录 Internet 上的活动</p></blockquote><p>（3）入侵检测系统</p><p>① 定义：</p><blockquote><p>通过对计算机网络或计算机系统中的若干关键点收集信息并对其进行分析，从中发现网络或系统中是否有违反安全策略的行为和被攻击的迹象</p></blockquote><p>② 功能：</p><blockquote><p>通过检测和记录系统中的安全违规行为，惩罚信息系统攻击，防止入侵事件的发生<br>检测其他安全措施未能阻止的攻击或安全违规行为<br>检测黑客在攻击前的探测行为，预先给管理员发出警报；报告信息系统中存在的安全威胁<br>提供有关攻击的信息，帮助管理员诊断系统中存在的安全弱点，利于其进行修补</p></blockquote><p>③ 周期：</p><blockquote><p>数据采集阶段<br>数据处理及过滤阶段<br>入侵分析及检测阶段<br>报告及响应阶段</p></blockquote><p>④ 类型：</p><blockquote><p>主机型<br>网络型</p></blockquote><p><br></p><h2 id="9-安全性规章"><a href="#9-安全性规章" class="headerlink" title="9.安全性规章"></a>9.安全性规章</h2><p>（1）安全管理制度</p><blockquote><p>机房安全管理制度<br>系统运行管理制度，包括系统启动、关闭、系统状态监控、系统维护等<br>人员管理制度，包括管理人员、设计人员、操作人员、人事变更等<br>软件管理制度<br>数据管理制度<br>密码口令管理制度<br>病毒防治管理制度<br>用户登记和信息管理制度<br>工作记录制度<br>数据备份制度<br>审计制度<br>安全培训制度</p></blockquote><p>（2）计算机犯罪与相关法规</p><p>① 计算机犯罪</p><p>定义：</p><blockquote><p>指针对和利用计算机系统，通过非法操作或者以其他手段，对计算机系统的完整性或正常运行造成危害的行为</p></blockquote><p>犯罪对象：计算机系统或其中的数据（计算机设备、系统程序、文本资料、运算数据、图形表格）</p><p>特点：</p><blockquote><p>呈现国际化趋势<br>向全社会各单位和个人蔓延<br>由个人犯罪向群体犯罪、组织犯罪发展；由单一目的犯罪向综合性犯罪发展<br>涉及人员范围越来越广泛，并呈现低龄化趋势<br>从危害程度看，后果越来越严重<br>通过网络窃取机密信息将成为间谍活动的主要形式之一</p></blockquote><p>我国的相关法律、法规:</p><blockquote><p>直接以计算机信息系统为犯罪对象的犯罪<br>以计算机为犯罪工具实施其他犯罪</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 软考架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
            <tag> 架构师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（软考架构师笔记十五）基于中间件的开发</title>
      <link href="/2019/06/06/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E5%8D%81%E4%BA%94%EF%BC%89%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91/"/>
      <url>/2019/06/06/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E5%8D%81%E4%BA%94%EF%BC%89%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>（软考架构师笔记十五）基于中间件的开发<br><a id="more"></a></p><h2 id="1-中间件"><a href="#1-中间件" class="headerlink" title="1.中间件"></a>1.中间件</h2><p>（1）定义</p><blockquote><p>中间件是一种独立的系统软件或服务程序，分布式应用软件借助这种软件在不同的技术之间共享资源，中间件位于客户机服务器的操作系统之上，管理计算资源和网络通信。</p></blockquote><p>（2）特点</p><blockquote><p>满足大量应用的需要<br>运行于多种硬件和 OS 平台<br>支持分布计算，提供跨网络、硬件和 OS 平台的透明性的应用或服务的交互<br>支持标准的协议<br>支持标准的接口</p></blockquote><p>（3）十大优越性</p><blockquote><p>缩短应用的开发周期<br>节约应用的开发成本<br>减少系统初期的建设成本<br>降低应用开发的失败率<br>保护已有的投资<br>简化应用集成<br>减少维护费用<br>提高应用的开发质量<br>保证技术进步的连续性<br>增强应用的生命力。</p></blockquote><p>（4）类别</p><blockquote><p>通信处理（消息）中间件：BEA的eLink、IBM的MQSeries、TongLINK<br>事务处理（交易）中间件：BEA的Tuxedo.<br>数据存取管理中间件：为在网络上虚拟缓冲存取、格式转换、解压等带来方便<br>Web服务器中间件<br>安全中间件<br>跨平台和架构的中间件<br>专用平台中间件<br>网络中间件</p></blockquote><p>（5）主流产品</p><blockquote><p>IBM MQSeries：IBM的消息处理中间件，供一个具有工业标准、安全、可靠的消息传输系统</p><p>BEA Tuxedo：是BEA电子商务交易平台，属于交易中间件，允许客户机和服务器参与一个涉及多个数据库协调更新的交易，并能够确保数据的完整性</p></blockquote><p><br></p><h2 id="2-应用服务器"><a href="#2-应用服务器" class="headerlink" title="2.应用服务器"></a>2.应用服务器</h2><p>（1）定义：</p><blockquote><p>企业：能将一个企业的商务活动安全有效地实施到 Internet上，实现电子商务<br>分布式：是一个开发、部署、运行和管理、维护的平台<br>集群：让多个不同的、异构服务器协同工作、相互备份，以满足企业级应用所需要的可用性、高性能、可靠性和可伸缩性</p></blockquote><p>（2）作用：</p><blockquote><p>更合理地分工企业级应用开发，加快应用的开发速度，减少应用的开发量<br>应用设计、开发、部署、运行、管理、维护的平台<br>使得应用与底层平台无关，便于商业逻辑的实现与扩展<br>为企业应用提供现成的、稳定而强健的、灵活的、成熟的基础架构</p></blockquote><p>（3）主流产品</p><blockquote><p>BEA WebLogic：Java Web 应用服务器</p><p>IBM WebSphere：强调其在应用开发（WebSphere Studio 和 VisualAge for Java）、数据库（DB2）和消息服务（MQseries）的集成性</p><p>SUN iPlanet：事务监控器、多负载平衡选项、对集群和故障转移全面的支持、集成的 XML 解析器和可扩展格式底稿语言转换（XLST）引擎，以及对国际化的全面支持</p><p>Oracle Internet ApplicationServer ：为Apache 开发了插件盒模块来处理 Java 应用程序、Perl 程序、PL/SQL 程序及 SSL 上的安全网页</p></blockquote><blockquote><p>Sybase Enterprise ApplicationServer：将 Sybase 的 JaguarCTS 和PowerDynamo 紧密集成并加以发展，是同时实现 Web 联机事务处理（WebOLTP）和动态信息发布的企业级应用服务器平台</p></blockquote><p><br></p><h2 id="3-J2EE"><a href="#3-J2EE" class="headerlink" title="3.J2EE"></a>3.J2EE</h2><p>（1）定义</p><blockquote><p>针对 Web Service、业务对象、数据访问和消息报传送的一组规范<br>建立标准，使 Web 应用的部署与服务器无关<br>使服务器能控制构件的生命周期和其他资源，以便能够处理扩展、并发、事务处理管理和安全性问题</p></blockquote><p>（2）构件</p><blockquote><p>应用客户端构件<br>EJB构件<br>Servlets<br>JSP<br>Applet构件</p></blockquote><p><img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/fiftheen/ruankao15-1.png" height="60%" width="100%"></p><p>（3）表示层<br>用来展示用户交互界面</p><blockquote><p>客户端为HTML：JSP/Servlet 组合将成为能实现业务目标的真正客户端<br>客户端为Jav 程序或基于COM程序时：它可以直接访问业务逻辑</p></blockquote><p><img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/fiftheen/ruankao15-2.png" height="35%" width="60%"></p><p>（4）应用服务层</p><blockquote><p>Servlet：客户端请求servlet，servlet响应客户端，使用了java类和流，每个请求为新的线线程<br>JSP：Servlet和html的结合，和处理javabean类<br>EJB：封装业务处理，公国本地接口和远程接口访问EJB方法</p></blockquote><p>EJB：</p><blockquote><p>EntityBean（实体 Bean）：数据库中的数据及作用于数据的方法<br>Session Bean（会话 Bean）：代表与客户间的短暂对话<br>Message：点到点（基于消息队列），主题发布与订阅（基于主题）<br>Driven Bean（消息驱动 Bean）：处理从 JMS 消息队列接收到的异步消息<br>JNDI（Java 命名和目录接口）：查找用户定义对象和环境实体<br>事务处理：J2EE 事务处理 API（JTA）和 Java 事务处理服务（JTS）</p></blockquote><p><br></p><h2 id="4-NET"><a href="#4-NET" class="headerlink" title="4. .NET"></a>4. .NET</h2><p>（1）定义：代表了一个集合、一个环境、一个可以作为平台支持下一代 Internet 的可编程结构</p><p>（2）目的：让用户在任何地方、任何时间，以及利用任何设备都能访问他们所需要的信息、文件和程序</p><p>（3）特点：</p><blockquote><p>软件变服务：制造服务，而不是制造软件<br>基于XML的共同语言：通过 XML 语言定义了简单对象访问协议、Web服务描述语言、Web服务发现协议<br>融合多种设备和平台：谋求与各种Internet接入设备和平台的一体化<br>新一代的人机界面：智能与互动</p></blockquote><p><img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/fiftheen/ruankao15-3.png" height="40%" width="50%"></p><p>（4）.NET框架</p><p>① 定义：</p><blockquote><p>提供了全新的数据库访问技术 ADO.NET，以及网络应用开发技术 ASP.NET 和 Windows 编程技术 WinForms;提供了 VB、VC++、C#等多种语言支持;全面支持.NET 的开发工具</p></blockquote><p><img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/fiftheen/ruankao15-4.png" height="45%" width="70%"></p><p>② 通用语言运行（CLR）：</p><blockquote><p>运行时则为多种语言提供了一种统一的运行环境,还提供了更多的功能和特性</p></blockquote><p>③ 基础类库</p><blockquote><p>包括了从输入输出到数据访问等各方面，提供了一个统一的面向对象的、层次化的、可扩展的编程接口</p></blockquote><p>④ ADO.NET</p><blockquote><p>提供了一组用来连接到数据库、运行命令、返回记录集的类库</p></blockquote><p>⑤ ASP.NET</p><blockquote><p>Web 表单：使开发者能够非常容易地创建 Web表单<br>ASP.NET Web 服务：可命名的网络资源，可用来在Internet范围内方便表现和使用对象<br>ASP.NET 应用框架</p></blockquote><p>⑥ WinForms：软件控件</p><p>⑦ 开发语言：VB，C++，C#和 Jscript</p><p>⑧ 其他特征</p><blockquote><p>安全系统<br>配置系统</p></blockquote><p>可大幅度减小DLL地狱伤害</p><p><br></p><h2 id="5-企业应用集成（EAI）"><a href="#5-企业应用集成（EAI）" class="headerlink" title="5.企业应用集成（EAI）"></a>5.企业应用集成（EAI）</h2><p>（1）定义：</p><blockquote><p>通过将业务流程，应用软件、硬件和各种标准联合起来，对企业中完成不同业务功能的应用系统进行无缝集成，使它们像一个整体一样进行业务处理和信息共享，从而提高企业效率，为客户提供灵活的业务服务</p></blockquote><p><img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/fiftheen/ruankao15-5.png" height="45%" width="80%"></p><p>（2）中间件的影响</p><blockquote><p>间件产品对各种硬件平台、操作系统、网络数据库产品及客户端实现了兼容和开放<br>中间件保持了平台的透明性，使开发者不必考虑操作系统的问题<br>中间件实现了对交易的一致性和完整性的保护，提高了系统的可靠性<br>间件产品可以缩短开发周期 50%～75%，从而大大地降低了开发成本，提高了工作效率</p></blockquote><p>（3）应用集成：</p><blockquote><p>通过处理多个应用系统之间的消息交换，实现系统间的集成,基于客户（请求程序）和服务器（响应程序）之间的请求响应交互机制</p></blockquote><p>（4）业务过程集成</p><blockquote><p>交互式流程：包含了跨两个系统之间的事务处理<br>多步流程：根据事先定义的顺序在两个或者多个系统之间流转</p></blockquote><p>（5）数据集成</p><blockquote><p>首先解决数据和数据库的集成问题（将历史数据批量导入新系统中和现行系统中的批量、实时数据处理，也称数据同步）；采用批量的方式来处理；还需对对数据进行标识并编成目录，另外还要确定元数据模型</p></blockquote><p><br></p><h2 id="5-轻量级架构和重量级"><a href="#5-轻量级架构和重量级" class="headerlink" title="5.轻量级架构和重量级"></a>5.轻量级架构和重量级</h2><p>（1）Struts框架</p><blockquote><p>JSPview 发起一个以.do 表示的请求；ActionForm 封装用户请求数据，同时提供验证数据的功能；ActionServlet 根据 struts-config.xml 文件来得到处理这个请求的 Action 对象，并将请求发送给这个 Action 对象；Action 对象调用 model 去处理这个请求，将结果返回给 ActionServlet；ActionServlet 决定将结果返回给对应的 view；view 得到结果，并将它显示给用户 </p></blockquote><p><img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/fiftheen/ruankao15-6.png" height="45%" width="80%"></p><p>（2）Spring框架</p><p>① 定义：</p><blockquote><p>包括声明性事务管理，通过 RMI 或 web services 远程访问业务逻辑，mail 支持工具，以及对于<br>数据和数据库之间持久层的各种配置的支持<br>核心本身是个容器,管理物件的生命周期、物件的组态、相依注入等，并可以控制物件在创建时是以原型（Pro-totype）或单例子（Singleton）的方式来创立<br>采用控制反转（别名注入依赖），Spring 核心容器会自动根据构件将依赖注入指定的物件</p></blockquote><p>② 七模块</p><blockquote><p>Core：主要构件是 BeanFactory，提供对 Factory 模式的经典实现来消除对程序性单例模式的需要，并真正地允许从程序逻辑中分离出依赖关系和配置</p><p>DAO：提供了 JDBC 的抽象层，它可消除冗长的 JDBC 编码和解析数据库厂商特有的错误代码，还提供了一种比编程性更好的声明性事务管理方法<br>ORM：提供了对象关系映射工具<br>Context（上下文）：Spring 的上下文服务配置<br>Web：提供了基础的针对 Web 开发的集成特性<br>MVC：控制层，连接事务与界面的通道<br>AOP：面向切面技术</p></blockquote><p><img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/fiftheen/ruankao15-7.png" height="30%" width="90%"></p><p>（3）Hibernate框架</p><p>① 定义：</p><blockquote><p>是一种对象和关系之间映射的框架，是 Java 应用和关系数据库之间的桥梁。它可以将数据库资源映射为一个或者多个 POJO<br><img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/fiftheen/ruankao15-8.png" height="20%" width="70%"></p></blockquote><p>② 内容：</p><blockquote><p>对象/关系映射机制的核心是一个 XML 文件(*.hbm.xml)：描述了数据库模式是怎么与一组 Java 类绑定在一起<br><img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/fiftheen/ruankao15-9.png" height="30%" width="90%"></p></blockquote><p>（4）基于Struts、Spring和Hibernate的轻量级框架</p><p>① 表示层：Struts负责</p><blockquote><p>管理用户请求和响应<br>提供一个控制器代理以调用业务逻辑和各层的处理<br>处理从其他层抛给 StrutsAction 的异常<br>为显示提供数据模型<br>借助 Struts Validator 框架帮助完成 Web 层的验证工作</p></blockquote><p>② 持久层：Hibernate负责</p><blockquote><p>通过一个面向对象的查询语言（HQL）或正则表达式的 API 来检索对象的相关信息(增删查改)</p></blockquote><p>③ 业务层：spring负责</p><blockquote><p>用延时注入思想组装代码，提高了系统扩展性和灵活性，实现插件式编程。利用 AOP 思想，集中处理业务逻辑，减少重复代码，构建了较理想的解决方案</p></blockquote><p><img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/fiftheen/ruankao15-10.png" height="50%" width="90%"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 软考架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
            <tag> 架构师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis知识汇总[初级]--安装</title>
      <link href="/2019/06/05/redis%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB%5B%E5%88%9D%E7%BA%A7%5D--%E5%AE%89%E8%A3%85/"/>
      <url>/2019/06/05/redis%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB%5B%E5%88%9D%E7%BA%A7%5D--%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>redis知识汇总[初级]–安装<br><a id="more"></a></p><h2 id="redis介绍"><a href="#redis介绍" class="headerlink" title="redis介绍"></a>redis介绍</h2><blockquote><p>高性能key-value数据库<br>提供list，set，zset，hash等数据结构的存储<br>提供主从数据备份模式</p></blockquote><p>官网：<a href="https://redis.io/" target="_blank" rel="noopener">https://redis.io/</a><br>中文网：<a href="http://www.redis.cn/" target="_blank" rel="noopener">http://www.redis.cn/</a><br>Github：<a href="https://github.com/microsoftarchive/redis" target="_blank" rel="noopener">https://github.com/microsoftarchive/redis</a></p><h2 id="redis安装"><a href="#redis安装" class="headerlink" title="redis安装"></a>redis安装</h2><p>1.从官网下载压缩包（这里为windows）解压</p><p> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/redis/first/one/redis-first-1.1.png" height="40%" width="60%"></p><p>2.打开cmd（分为服务端与客户端），分别启动</p><p>① 服务端（进入根目录，输入redis-server redis.windows.conf）：<br> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/redis/first/one/redis-first-1.2.png" height="40%" width="70%"></p><p>② 客户端（redis-cli.exe -h 127.0.0.1 -p 6379）-(默认端口6379)：<br> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/redis/first/one/redis-first-1.3.png" height="40%" width="70%"></p><p>③ 如图即成功</p><h2 id="redis基本设置"><a href="#redis基本设置" class="headerlink" title="redis基本设置"></a>redis基本设置</h2><p>1.服务：redis-server –service-install redis.windows.conf –loglevel verbose</p><p>2.卸载：redis-server –service-uninstall</p><p>3.启动：redis-server –service-start</p><p>4.停止：redis-server –service-stop</p><p>5.修改名称端口：<br>① redis-server –service-install –service-name [updateName] –port [port]<br>② redis-server –service-start –service-name [uodateName]</p><h2 id="redis高级配置"><a href="#redis高级配置" class="headerlink" title="redis高级配置"></a>redis高级配置</h2><p>1.日志级别：</p><blockquote><p>debug<br>verbose(默认)<br>notice<br>warning</p></blockquote><p>待续</p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（软考架构师笔记十四）信息系统基础知识</title>
      <link href="/2019/06/05/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E5%8D%81%E5%9B%9B%EF%BC%89%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2019/06/05/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E5%8D%81%E5%9B%9B%EF%BC%89%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>（软考架构师笔记十四）信息系统基础知识<br><a id="more"></a></p><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><p>（1）定义：</p><blockquote><p>泛指收集、存储、处理和传播各种信息的具有完整功能的集合体。在这里，信息系统并没有强调收集、存储、处理和传播信息所用的工具</p></blockquote><p>（2）三要素：系统的观点、数学的方法和计算机应用</p><p><br></p><h2 id="2-信息系统组成"><a href="#2-信息系统组成" class="headerlink" title="2.信息系统组成"></a>2.信息系统组成</h2><p>（1）数据环境：</p><blockquote><p>数据文件:没有使用数据库管理系统，根据大多数的应用需要，由系统分析师和程序员分散地设计各种数据文件<br>应用数据库:使用了数据库，但共享程度低<br>主题数据库：经过严格的数据分析，建立应用模型，虽然设计开发需要花费较长的时间，但其后的维护费用很低<br>信息检索系统：数据库经过组织能保证信息检索和快速查询的需要，而不是大量的事务管理</p></blockquote><p>（2）应用层次</p><blockquote><p>战略级信息系统：有者和使用者都是企业的最高管理层<br>战术级信息系统：使用者一般是企业的中层经理及其管理的部门<br>操作级信息系统：使用者一般是服务型企业的业务部门<br>事务级信息系统：使用者一般是企业的管理业务人员</p></blockquote><p>（3）生命周期</p><p>① 产生阶段：概念的产生过程、需求分析过程</p><p>② 开发阶段信息：总体规划、系统分析、系统设计、系统实施和系统验收阶段</p><p>③ 运行阶段：排错性维护、适应性维护、完善性维护和预防性维护</p><p>④ 消亡阶段</p><p>（4）建设原则</p><p>① 高层管理人员介入原则</p><p>② 用户参与开发原则</p><p>③ 自顶向下规划原则</p><p>③ 工程化原则</p><p>⑤ 其他原则</p><blockquote><p>创新性原则，用来体现信息系统的先进性<br>整体性原则，用来体现信息系统的完整性<br>发展性原则，用来体现信息系统的超前性<br>经济性原则，用来体现信息系统的实用性</p></blockquote><p>（5）开发方法</p><p>① 结构化方法</p><p>定义：由结构化系统分析和设计组成，将系统的生命周期划分为系统调查、系统分析、系统设计、系统实施、系统维护等阶段，按照事先设计好的程序和步骤，使用一定的开发工具，完成规定的文档，在结构化和模块化的基础上进行信息系统的开发工作</p><p>特点：</p><blockquote><p>开发目标清晰化<br>工作阶段程式化<br>开发文档规范化<br>设计方法结构化</p></blockquote><p>② 原型法</p><p>定义：根据用户需求，利用系统开发工具，快速地建立一个系统模型展示给用户，在此基础上与用户交流，最终实现用户需求的信息系统快速开发的方法</p><p>特点：开发周期短、见效快、与业务人员交流方便</p><p>③ 面向对象方法面</p><p>定义：利用面向对象的信息建模概念，如实体、关系、属性等，同时运用封装、继承、多态等机制来构造模拟现实系统的方法</p><p>④ 面向服务</p><p><br></p><h2 id="2-信息系统工程"><a href="#2-信息系统工程" class="headerlink" title="2.信息系统工程"></a>2.信息系统工程</h2><p>（1）定义：由相互作用和相互依赖的若干部分，按一定规律结合成的、具有特定功能的有机整体.把自然科学和社会科学的某些思想、理论、方法、策略和手段等根据总体协调的需要，有机地联系起来，应用定量和定性分析相结合的方法和计算机等技术工具，对系统的构成要素、组织结构、信息交换和反馈控制等功能进行分析、设计、制造和服务，从而达到最优设计、最优控制和最优管理的目的.</p><p>（2）特点：</p><blockquote><p>集合性<br>相关性<br>目的性<br>层次性<br>环境适应性</p></blockquote><p>（3）系统分类</p><blockquote><p>按照系统功能划分：工业控制系统、信息管理系统、军事系统和经济系统等<br>按照系统与外界的关系划分：封闭系统和开放系统<br>按照系统的内部结构划分：开环系统和闭环系统等<br>按照抽象程度将系统分为：概念系统（描述系统的主要特征和大致轮廓）、逻辑系统（脱离实现细节的合理系统）和物理系统（实际存在的系统）</p></blockquote><p>（4）内容</p><p>① 体系：</p><blockquote><p>信息网络系统是指以信息技术为主要手段建立的信息处理、传输、交换和分发的计算机网络系统<br>信息资源系统是指以信息技术为主要技术手段建立的信息资源采集、存储、处理的资源系统<br>信息应用系统是指以信息技术为主要手段建立的各类业务管理的应用系统</p></blockquote><p>② 技术:方法、工具和过程</p><p>③ 管理： 处理好组织内各流程之间的关系，合理地在各流程之间分配资源</p><blockquote><p>建立流程管理机构，这一机构可归入管理流程之中<br>配备强有力的领导来负责内部的流程管理工作。<br>制定各流程之间的动态关系规则。通过实施流程管理模式，传统组织中的组织图将不复存在，取代它的是流程管理图</p></blockquote><p>（5）总体规划</p><p>① 目的：明确系统整个生命周期内的发展方向、系统规模和开发计划</p><p>② 建设存在问题：</p><blockquote><p>系统建设与组织发展的目标和战略不匹配<br>已建成的系统解决问题的有效性低，即系统建成后对管理并无显著改善<br>不能适应环境变化和组织变革的需要<br>组织结构陈旧，管理落后<br>系统使用人员的素质较低<br>系统开发环境落后，技术方案不合理<br>系统开发及运行维护的标准、规范混乱<br>资源短缺，投入太少，而对系统的期望又过高。</p></blockquote><p>③ 主要任务：</p><blockquote><p>制定信息系统工程的发展战略。主要是使信息系统工程的战略与整个组织的战略和目标协调一致<br>确定组织的主要信息需求，形成信息系统工程的总体结构方案，安排项目开发计划<br>制定系统建设的资源分配计划，即制定为实现开发计划而需要的硬软件资源、数据通信设备、人员、技术、服务和资金等计划，提出整个系统的建设概算</p></blockquote><p>④ 主要步骤：</p><blockquote><p>对当前系统进行初步的调查<br>分析和确定系统目标<br>分析子系统的组成及基本功能<br>拟定系统的实施方案<br>进行系统的可行性研究<br>编写可行性报告</p></blockquote><p>⑤ 意义：是进行具体开发工作的必要准备和基本依据</p><p>⑥ 功能：</p><p>两原则：</p><blockquote><p>一是从组织的战略出发，而不是从系统的需求出发，这样就可以避免脱离组织宗旨和战略目标，走入为建设而建设的困境<br>二是从业务的变革出发，而不是从技术的变革出发，这样有利于充分利用组织的现有资源来满足关键需求，从而避免信息系统工程无法有效地支持组织决策。</p></blockquote><p>在建设信息系统工程过程中，应当全面分析组织所处的环境、战略目标、组织结构、标准作业过程甚至它的文化，并从中找到所要建设的信息系统与组织的关系及其应当起的作用</p><p>⑦ 分析过程</p><blockquote><p>确定组织的总体目标<br>确定信息系统工程规划的总体目标</p></blockquote><p>⑧ 规划范围：</p><blockquote><p>信息战略规划<br>信息资源规划<br>信息系统工程建设规划<br>企业资源规划</p></blockquote><p>⑨ 任务：</p><blockquote><p>明确组织远景和使命<br>确立组织发展战略和目标明晰<br>组织业务及管理变革策略<br>识别组织关键成功因素、分析关键性能指标、抽取信息需求<br>建立总体信息工程框架<br>提出可行性报告和总体规划方案。</p></blockquote><p>⑩ 确定功能范围的步骤确定系统的功能范围的步骤：</p><blockquote><p>绘制出系统的总数据流程图<br>根据系统方案的规定和用户的要求，结合现行系统的环境，确定系统的边界范围，并在总信息流程图上圈出<br>有关人员协商讨论<br>确定系统范围，并做出分析说明</p></blockquote><p>⑩-1 投资概算：</p><blockquote><p>计算机系统软、硬件设备投资<br>系统开发费<br>系统安装和维护费用<br>人员培训费</p></blockquote><p>（6）总体规划的方法</p><p>① 业务系统规划法（BSP）：</p><p>定义：它辅助企业信息系统规划，来满足其近期和长期的信息化需求</p><p>内容：</p><blockquote><p>信息系统的战略应当表达出企业的各个管理层次的需求<br>信息系统应该向整个企业提供一致的信息<br>信息系统应该适应组织机构和管理体制的改变<br>信息系统的战略规划</p></blockquote><p>目标（提供信息系统规划，用以支持企业短期的和长期的信息需要）：</p><blockquote><p>为管理者提供一种形式化的、客观的方法，明确建立信息系统的优先顺序，而不考虑部门的狭隘利益，并避免主观性<br>为具有较长生命周期系统的建设和投资提供保障。由于系统是基于业务过程的，因而不因机构变化而失效<br>为了以最高效率支持企业目标，BSP 提供数据处理和资源管理<br>增加负责人的信心，使其坚信高效的信息系统能够被实施<br>通过提供信息系统对用户需求的快速响应，从而改善信息系统管理部门和用户之间的关系。<br>应将数据作为一种企业资源加以确定，为使每个用户更有效地使用这些数据，要对这些数据进行统一规划、管理和控制。</p></blockquote><p>实施步骤：</p><blockquote><p>确立项目<br>工作准备<br>主要活动</p></blockquote><p>② 关键成功因素法（CSF）<br>定义：能够帮助组织找到影响系统成功的关键因素，进行分析以确定组织的信息需求，从而为管理部门控制信息技术及其处理过程提供实施指南</p><p>特征：</p><blockquote><p>内部 CSF：针对机构的内部活动<br>外部 CSF：与机构的对外活动有关<br>监控型 CSF：对现有业务流程等进行监控<br>建设型 CSF：适应组织未来变化的有关活动</p></blockquote><p>层次：</p><blockquote><p>行业的 CSF<br>组织的 CSF<br>部门的 CSF<br>管理者的 CSF</p></blockquote><p>实施步骤:<br>通过集成高层管理者的目标而确定成功因素，通过个人的成功因素的汇总，导出组织整体的决定性成功因素，然后据此建立能够提供与这些成功因素相关的信息系统</p><blockquote><p>了解组织的战略目标<br>确定关键成功因素。对所有成功因素进行评价，根据组织的现状和目标确定关键成功因素<br>识别绩效指标和标准，以及测量绩效的数据</p></blockquote><p>③ 战略目标集合转化法（SST）</p><p>定义：把组织的战略集合转化为信息系统的战略集合，而后者由信息系统的系统目标、环境约束和战略规划组成</p><p>步骤：</p><blockquote><p>识别和阐明组织的战略集合(描绘出组织各类人员结构-&gt;识别每类人员的目标-&gt;对于每类人员识别其使命及战略)<br>将组织的战略集合转化为信息系统战略集合</p></blockquote><p><br></p><h2 id="3-政府信息化与电子政务"><a href="#3-政府信息化与电子政务" class="headerlink" title="3.政府信息化与电子政务"></a>3.政府信息化与电子政务</h2><p>（1）政府信息化定义：</p><blockquote><p>应用现代信息技术、网络技术和通信技术，通过信息资源的开发和利用来集成管理和服务，从而提高政府的工作效率、决策质量、调控能力，并节约开支，改进政府的组织结构、业务流程和工作方式，全方位地向社会提供优质、规范、透明的管理和服务<br>第一，政府信息化必须借助于信息技术和网络技术，离不开信息基础设施和软件产品<br>第二，政府信息化是一个系统工程，它不仅是与行政有关部门的信息化，还包括立法、司法部门及其他一些公共组织的信息化<br>第三，政府信息化并不是简单地将传统的政府管理事务原封不动地搬到互联网上，而是要对已有的组织结构和业务流程进行重组或再造</p></blockquote><p>（2）政府与政府（Government To Government）</p><blockquote><p>首脑机关与中央和地方政府组成部门<br>中央政府与各级地方政府之间<br>政府的各个部门之间<br>政府与公务员其他政府工作人员</p></blockquote><p>（3）政府对企业（Government To Business）</p><blockquote><p>政府向企（事）业单位发布的各种方针、政策、法规、行政规定<br>政府向企（事）业单位颁发的各种营业执照、许可证、合格证、质量认证</p></blockquote><p>（4）政府对公民</p><blockquote><p>政府面向公民所提供的服务</p></blockquote><p>（5）企业对政府</p><blockquote><p>企业应向政府缴纳的各种税款，各种统计信息和报表，参加政府各项工程的竞、投标，各种商品和服务，以及就政府如何创造良好的投资和经营环境</p></blockquote><p>（6）公民对政府</p><blockquote><p>个人应向政府缴纳的各种税款和费用（填报的各种信息和表格，以及缴纳各种罚款）<br>开辟公民参政、议政的渠道</p></blockquote><p>（7）政府对公务员</p><blockquote><p>政府机构通过网络技术实现内部电子化管理的重要形式</p></blockquote><p>（8）电子政务建设的过程模式</p><blockquote><p>以用户为中心<br>引进“客户关系管理”技术<br>政府门户</p></blockquote><p>（9）电子政务的技术模式</p><p>① 网络管理模式</p><blockquote><p>政府专网<br>通用网络</p></blockquote><p>其还分为专用网络（政府部门之间的网络）、内部网络（政府内部的办公网络）和外部网络（对于为公众提供的信息及其他可公开的信息）</p><p>② 信息资源管理模式</p><p>内容：</p><blockquote><p>来自公文系统的文档型信息<br>来自数据处理系统的结构化信息</p></blockquote><p>模式：</p><blockquote><p>元数据管理模式：该模式可以为不同部门、不同级别的机构提供统一的数据管理和交换模式，为跨部门、跨行业的信息资源整合提供技术基础(分数是存储数据)<br>XML数据管理模式：在数据交换和共享的层面上，基于 XML 数据管理模式，建立统一的信息技术平台，实现不同系统的互联</p></blockquote><p>（10）应用开发模式</p><blockquote><p>政府与公务员（Government To Employee，G2E）<br>政府对经济活动（Government ToBusiness，G2B）<br>政府对公民服务（Government ToCitizen，G2C）</p></blockquote><p>（11）电子政务的安全体系</p><blockquote><p>物理安全<br>网络安全<br>信息安全<br>安全管理</p></blockquote><p>（12）《国家电子政务标准化指南》</p><blockquote><p>第一部分：总则。概括描述电子政务标准体系及标准化的机制<br>第二部分：工程管理。概括描述电子政务工程管理须遵循或参考的技术要求、标准和管理规定<br>第三部分：网络建设。概括描述网络建设须遵循或参考的技术要求、标准和管理规定<br>第四部分：信息共享。概括描述信息共享须遵循或参考的技术要求、标准和管理规定<br>第五部分：支撑技术。概括描述支撑技术须遵循或参考的技术要求、标准和管理规定<br>第六部分：信息安全。概括描述保障信息安全须遵循或参考的技术要求、标准和管理规定</p></blockquote><p>（14）六项电子政务标准</p><blockquote><p>① 基于 XML 电子公文格式规范第一部分：总则，第二部分：公文体<br>② XML 在电子政务中的应用指南<br>③ 电子政务业务流程设计方法通用规范<br>④ 信息化工程监理规范<br>⑤ 电子政务数据元第一部分：设计和管理规范<br>⑥ 电子政务主题词表编制规则</p></blockquote><p><br></p><h2 id="4-企业信息化与电子商务"><a href="#4-企业信息化与电子商务" class="headerlink" title="4.企业信息化与电子商务"></a>4.企业信息化与电子商务</h2><p>（1）定义：</p><blockquote><p>企业以业务流程的优化和重构为基础，在一定的深度和广度上利用计算机技术、网络技术和数据库技术，控制和集成化管理企业生产经营活动中的各种信息，实现企业内外部信息的共享和有效利用，以提高企业的经济效益和市场竞争力</p></blockquote><p>（2）目的：</p><blockquote><p>要建立一个整体上相当于人的神经系统的数字神经系统</p></blockquote><p>（3）企业信息化层次分析：</p><blockquote><p>企业战略的层面 ：在规划中必须对企业目前的业务策略和未来的发展方向作深入<br>业务运作层面：针对企业所确定的业务战略，通过分析获得实现这些目标的关键业务驱动力和实现这些目标的关键流程<br>管理运作层面：虽然这一层面从价值链的角度上来说，属于辅助流程，但它对企业日常管理的科学性、高效性是非常重要的</p></blockquote><p>（4）企业信息化方法</p><blockquote><p>业务流程重构方法<br>核心业务应用方法<br>信息系统建设方法<br>主题数据库方法<br>资源管理方法<br>人力资本投资方法</p></blockquote><p><br></p><h2 id="5-企业资源规划（ERP）"><a href="#5-企业资源规划（ERP）" class="headerlink" title="5.企业资源规划（ERP）"></a>5.企业资源规划（ERP）</h2><p>（1）定义：</p><blockquote><p> 是一种融合了企业最佳实践和先进信息技术的新型管理工具。它扩充了 MIS、MRPⅡ（Manufacturing Resources Planning，制造资源计划）的管理范围，将供应商和企业内部的采购、生产、销售及客户紧密联系起来，可对供应链上的所有环节进行有效管理，实现对企业的动态控制和各种资源的集成和优化，提升基础管理水平，追求企业资源的合理高效利用</p></blockquote><p>（2）ERP结构</p><p> ① 管理思想：</p><blockquote><p>将企业的业务流程看作一个紧密连接的供应链，将企业内部划分成几个相互协同作业的支持子系统，如财务、市场营销、生产制造、质量控制、服务维护、工程技术等</p></blockquote><p>② 软件产品：</p><blockquote><p>随着技术和时代的进步，为企业提供更多更好的功能，帮助企业实现管理信息化和现代化，因而使得企业市场竞争力和综合实力得到提高</p></blockquote><p>③ 管理系统：</p><blockquote><p>ERP 是一个集成的信息系统，ERP 承诺建立跨越企业各个部门、各种生产要素和环境的单一应用原则下处理所有的事务，即意味着集成。这种集成应该包括人力资源、财务、销售、制造、任务分派和企业供应链等的各项管理业务</p></blockquote><p>④ 六大功能目标：</p><blockquote><p>支持企业整体发展战略经营系统</p><p>实现全球大市场营销战略与集成化市场营销，也就是实现在预测、市场规模、广告策略、价格策略、服务、分销等各方面进行信息集成和管理集成</p></blockquote><blockquote><p>完善企业成本管理机制</p><p>研究开发管理系统，保证能够迅速地开发适应市场要求的新的产品，构筑企业的核心技术体系，保持企业的竞争优势</p></blockquote><blockquote><p>建立敏捷的后勤管理系统，强调通过动态联盟模式把优势互补的企业联合在一起，用最有效和最经济的方式参加竞争，迅速响应市场瞬息万变的需求</p></blockquote><blockquote><p>实施准时生产方式，把客户纳入产品开发过程，把销售代理商和供应商、协作单位纳入生产体系，按照客户不断变化的需求同步组织生产，时刻保持产品的高质量、多样性和灵活性</p></blockquote><p>（3）ERP功能</p><blockquote><p>支持决策的功能<br>为处于不同行业的企业提供有针对性的 IT 解决方案<br>从企业内部的供应链发展为全行业和跨行业的供应链</p></blockquote><p>（4）主要功能模块</p><blockquote><p>生产控制（计划、制造）<br>物流管理（分销、采购、库存管理）<br>财务管理（会计核算、财务管理）</p></blockquote><p><br></p><h2 id="6-客户关系管理（CRM）"><a href="#6-客户关系管理（CRM）" class="headerlink" title="6.客户关系管理（CRM）"></a>6.客户关系管理（CRM）</h2><p>（1）定义：</p><blockquote><p>改善企业与客户之间关系的新型管理机制。它通过提供更快速、更周到的优质服务来吸引或保持更多的客户，集成了信息系统和办公系统等的一整套应用系统，从而确保了客户满意度的提高，以及通过对业务流程的全面管理来降低企业成本，重构包括市场营销和客户服务等业务流程</p></blockquote><p>（2）CRM内容：</p><blockquote><p>客户服务<br>市场营销<br>共享的客户资料库<br>分析能力</p></blockquote><p>（3）解决方案和实施过程</p><blockquote><p>畅通有效的客户交流渠道（触发中心）<br>对所获信息进行有效分析（挖掘中心）<br>CRM 必须能与 ERP 很好地集成</p></blockquote><p><br></p><h2 id="7-产品数据管理（PDM）"><a href="#7-产品数据管理（PDM）" class="headerlink" title="7.产品数据管理（PDM）"></a>7.产品数据管理（PDM）</h2><p>（1）定义：</p><blockquote><p>是工程数据管理、文档管理、产品信息管理、技术数据管理、技术信息管理、图像管理，以及其他产品定义信息管理的集成管理框架技术<br>用来管理所有与产品相关信息（包括零件信息、配置、文档、计算机辅助设计文件、结构、权限信息等）和所有与产品相关过程（包括过程定义和管理）的技术;为企业设计和生产构筑一个并行产品开发环境（由供应、工程设计、制造、采购、销售与市场、客户构成）的关键技术<br>帮助产品设计师、制造工程师及其他人员有效管理产品数据及产品开发过程的工具，目标是跟踪、组织、访问和管理产品设计、开发、修改和生产，甚至维修全过程中的所有数据和信息</p></blockquote><p>（2）类别：</p><blockquote><p>信息的使用者<br>数据的创造者<br>系统管理员</p></blockquote><p>（3）发展三阶段：</p><blockquote><p>配合 CAD（Computer Aided Design，计算机辅助设计）使用的早期简单的 PDM 系统<br>产品数据管理<br>产品协同商务（Collaborative Product Commerce，CPC）或 PDM 标准化</p></blockquote><p>（4）主要功能模块和内容</p><blockquote><p>数据基库<br>产品配置管理<br>工作流管理<br>分类及检索功能<br>项目管理</p></blockquote><p><br></p><h2 id="8-企业门户"><a href="#8-企业门户" class="headerlink" title="8.企业门户"></a>8.企业门户</h2><p>（1）定义：</p><blockquote><p>为企业优化业务模式、扩展市场渠道、改善客户服务，以及提升企业形象和凝聚力的强有力手段</p></blockquote><p>（2）主要功能：</p><blockquote><p>能够将一个机构现有的互联网址和服务完全合并而且相互兼容。<br>能够支持开放标准和应用编程接口，让平台得以轻易容纳新的应用程序。<br>能够接入一个由支持企业门户网站架构的伙伴和专业服务公司所组成的网络。<br>能够多渠道接入网站。<br>能够以统一的服务作为企业门户网站各种服务的基础，让用户享有多种便利</p></blockquote><p>（3）类别：</p><blockquote><p>企业信息门户：为人们提供企业信息<br>企业知识门户：企业员工日常工作所涉及相关主题内容的“总店”<br>企业应用门户：对企业业务流程的集成</p></blockquote><p>（4）基本要素：</p><blockquote><p>战略性思维<br>为用户所需要的不同类型门户网站建立一个门户网站架构<br>寻找合适的技术供货商<br>确定所要建立的门户网站类型<br>首先小规模地试办项目，确保有一个可行的工作环境</p></blockquote><p><br></p><h2 id="9-企业应用集成（EAI）"><a href="#9-企业应用集成（EAI）" class="headerlink" title="9.企业应用集成（EAI）"></a>9.企业应用集成（EAI）</h2><p>（1）定义：</p><blockquote><p>将进程、软件、标准和硬件联合起来，在两个或更多的企业信息系统之间实现无缝集成，使它们就像一个整体一样</p></blockquote><p>（2）内容：</p><p>① 企业内部应用集成：</p><blockquote><p>界面集成<br>平台集成<br>数据集成<br>过程集成</p></blockquote><p>② 企业间应用集成：</p><blockquote><p>通过集成供应链内的所有应用和数据库实现信息共享</p></blockquote><p>（3）主流集成模式：</p><blockquote><p>面向信息的集成技术<br>面向过程的集成技术<br>面向服务的集成技术</p></blockquote><p><br></p><h2 id="10-供应链管理"><a href="#10-供应链管理" class="headerlink" title="10.供应链管理"></a>10.供应链管理</h2><p>（1）定义：</p><blockquote><p>从源头供应商到最终消费者的集成业务流程,利用计算机网络技术全面规划供应链中的商流、物流、信息流、资金流等并进行计划、组织、协调和控制</p></blockquote><p>（2）供应链与物流结合</p><p>（3）运作模式</p><blockquote><p>需求信息流:从需方向供方流动时，便引发物流<br>供应信息流:同物料一起沿着供应链从供方向需方流动</p></blockquote><p>（4）技术支持体系</p><blockquote><p>由标识代码技术、自动识别与数据采集技术、电子数据交换技术、互联网技术等基础信息技术构成<br>基于信息技术而开发的支持企业生产</p></blockquote><p><br></p><h2 id="11-电子商务"><a href="#11-电子商务" class="headerlink" title="11.电子商务"></a>11.电子商务</h2><p>（1）定义：</p><blockquote><p>买卖双方利用现代开放的 Internet，按照一定的标准所进行的各类商业活动<br>狭义：利用 Web 提供的通信手段在网上买卖产品或提供服务<br>广义：包括狭义以内，企业内部的商务活动；以及企业间的商务活动</p></blockquote><p>（2）三方面：</p><blockquote><p>电子商情广告、电子选购和交易<br>电子交易凭证的交换、电子支付与结算<br>网上售后服务</p></blockquote><p>（3）参与实体:</p><blockquote><p>顾客（个人消费者或集团购买）<br>商户（包括销售商、制造商、储运商）<br>银行（包括发卡行、收单行）<br>认证中心</p></blockquote><p>（4）类别（按交易对象）</p><blockquote><p>企业与消费者之间的电子商务（Business to Customer，B2C）<br>企业与企业之间的电子商务（Business to Business，B2B）<br>消费者与消费者之间的电子商务（Customer to Customer，C2C）<br>O2O 即 Online To Offline（在线离线/线上到线下）</p></blockquote><p><br></p><h2 id="12-知识管理与商业智能"><a href="#12-知识管理与商业智能" class="headerlink" title="12.知识管理与商业智能"></a>12.知识管理与商业智能</h2><p>（1）定义：</p><blockquote><p>在组织中建构一个人文与技术兼备的知识系统，让组织中的信息与知识，通过获得、创造、分享、整合、记录、存取、更新等过程，实现不断创新。同时，这种创新知识又不断回馈到组织之内，从而使得组织的知识不间断地累积和升华，进而转化为企业的智慧资本</p></blockquote><p>（2）知识管理的工具和手段</p><p>① 知识管理工具的范畴：</p><blockquote><p>数据管理工具<br>信息管理工具<br>知识管理工具</p></blockquote><p>② 知识管理工具的分类：</p><blockquote><p>用于知识生成的工具<br>用于知识编码的工具<br>用于知识转移的工具</p></blockquote><p>③ 不足：</p><blockquote><p>功能不完整<br>集成度不高<br>协同性不够<br>可构性差</p></blockquote><p>（3）商业智能</p><p>① 定义：企业对商业数据的搜集、管理和分析的系统过程</p><p>② 目的：使企业的各级决策者获得知识或洞察力，帮助他们做出对企业更有利的决策</p><p>③ 商业智能系统四阶段：</p><blockquote><p>数据预处理：数据的抽取、转换和装载<br>建立数据仓库：处理海量数据的基础<br>数据分析：联机分析处理和数据挖掘<br>数据展现：保障系统分析结果的可视化</p></blockquote><p><br></p><h2 id="13-业务流程重组（BPR）"><a href="#13-业务流程重组（BPR）" class="headerlink" title="13.业务流程重组（BPR）"></a>13.业务流程重组（BPR）</h2><p>（1）定义：</p><blockquote><p>为了完成某一目标或任务而进行的一系列跨越时空的逻辑相关活动的有序集合，过考察业务流程的发生、发展和终结，确定、描述、分析、分解整个业务流程，重构与业务流程相匹配的企业运行机制和组织机构，实现对企业全流程的有效管理和控制，能够使企业真正着眼于流程的结果，消除传统管理中只注重某一环节而无人负责全流程的弊端</p></blockquote><p>（2）4核心内容</p><blockquote><p>根本性：强调要进行根本性的再思考，各方面都要关注流程<br>彻底性：对 BPR 进行追根溯源<br>戏剧性：不是追求稍有改善，而是充分强调结果的满意度<br>流程：建立以流程工作小组为单元的管理模式</p></blockquote><p>（3）作用：</p><blockquote><p>BPR 的实施使企业更贴近市场<br>BPR 使生产成本成倍压缩<br>BPR 使产品质量得到全面提升<br>服务质量更趋完美</p></blockquote><p>（4）遵循原则</p><blockquote><p>流程中心原则企业业务流程<br>团队管理原则在流程式管理模式下,企业的组织结构必须服从业务流程<br>客户导向原则</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 软考架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
            <tag> 架构师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（软考架构师笔记十三）开发管理</title>
      <link href="/2019/06/04/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E5%8D%81%E4%B8%89%EF%BC%89%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86/"/>
      <url>/2019/06/04/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E5%8D%81%E4%B8%89%EF%BC%89%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>（软考架构师笔记十三）开发管理<br><a id="more"></a></p><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><blockquote><p>在项目活动中运用专门的知识、技能、工具和方法，使项目能够实现或超过项目干系人的需要和期望<br>项目管理分类：范围管理、时间管理、费用管理、质量管理、人力资源管理、沟通 管理、风险管理、采购管理和整体管理<br>软件项目管理分类：软件范围管理、软件进度管理、软件成本管理、软件配置管理（属于整体管理）、软件质量管理、软件风险管理、开发人员管理（属于人力资源管理）</p></blockquote><p><br></p><h2 id="2-项目范围管理"><a href="#2-项目范围管理" class="headerlink" title="2.项目范围管理"></a>2.项目范围管理</h2><p>（1）定义：保证项目顺利完成所需的全部工作过程</p><p>（2）目的：控制项目的全部活动都在需求范围内，以确保项目资源的高效利用</p><p>（3）内容：</p><blockquote><p>项目启动<br>范围计划编制<br>范围定义<br>范围核实<br>范围变更控制</p></blockquote><p>一般与其他管理结合才能发挥更好作用</p><p><br></p><h2 id="3-项目成本管理"><a href="#3-项目成本管理" class="headerlink" title="3.项目成本管理"></a>3.项目成本管理</h2><p>（1）定义：保证在批准预算内完成项目所需要的过程（成本不仅包括开发成本，也包括开发之前立项阶段及软件在运行中的费用）</p><p>（2）方式：</p><blockquote><p>资源计划编制：确定完成活动需要的资源数量<br>成本估算：计算完成活动所需资源成本的近似值<br>成本预算：把估算的总成本分配到单个活动或工作包上去，建立基准计划来度量项目实际绩效<br>成本控制 ：对造成成本基准计划变化的因素施加影响，以保证这种变化得到一致认可；确定成本基准计划是否已经发生变化；当变化发生和正在发生时，对这种变化执行管理</p></blockquote><p>（3）成本控制内容：</p><blockquote><p>监测成本执行情况，以寻找出并掌握计划的偏差及原因<br>确保所有变更都准确地记录在成本基准计划中<br>防止把不正确、不适宜或未批准的变更纳入成本基准成本<br>将批准的变更通知项目干系人</p></blockquote><p>一般与其他管理结合,否则偏差值会很大</p><p><br></p><h2 id="4-项目时间管理"><a href="#4-项目时间管理" class="headerlink" title="4.项目时间管理"></a>4.项目时间管理</h2><p>（1）定义：确保项目按时完成所需的各个过程</p><p>（2）内容：</p><blockquote><p>活动定义：对 WBS 中规定的可交付成果或半成品的产生所必须进行的具体活动进行定义，并形成文档<br>活动排序：确定各活动之间的依赖关系，并形成文档<br>活动历时估算：根据项目范围和资源的相关信息为进度表设定历时输入的过程<br>进度计划编制<br>进度控制</p></blockquote><p>（3）进度控制内容：</p><blockquote><p>对造成进度变更的因素施加影响，以确保这些变更得到一致认可<br>确定进度变更是否已经发生<br>当变更发生时对实际变更进行管理。</p></blockquote><p><br></p><h2 id="5-项目配置管理"><a href="#5-项目配置管理" class="headerlink" title="5.项目配置管理"></a>5.项目配置管理</h2><p>（1）定义：</p><blockquote><p>在软件系统中确定和定义构件（源代码、可执行程序、文档等），在整个生命周期中控制发布和变更，记录和报告构件的状态和变更请求，并定义完整的、正确的系统构件的过程</p></blockquote><p>（2）内容：</p><blockquote><p>配置标识<br>版本控制<br>状态统计<br>审计与审查<br>生产<br>过程管理<br>小组协调</p></blockquote><p>（3）主要任务：</p><blockquote><p>建立项目<br>重构任何修订版的某一项或某一文件<br>利用加锁技术防止覆盖<br>当增加一个修订版时要求输入变更描述<br>提供比较任意两个修订版的使用工具<br>采用增量存储方式<br>提供对修订版历史和锁定状态的报告功能<br>提供归并功能<br>允许在任何时候重构任何版本<br>权限的设置<br>晋升模型的建立<br>提供各种报告</p></blockquote><p>（4）常用的软件配置管理工具：Rational ClearCase，Merant PVCS，Microsoft VSS，CVS</p><p><br></p><h2 id="6-项目文档管理"><a href="#6-项目文档管理" class="headerlink" title="6.项目文档管理"></a>6.项目文档管理</h2><p>（1）定义：某种数据媒体和其中所记录的数据。它具有永久性，并可以由人或机器阅读，通常仅用于描述人工可读的东西</p><p>（2）作用</p><blockquote><p>管理依据<br>任务之间联系的凭证<br>质量保证<br>培训与参考<br>软件维护支持<br>历史档案<br>销售可能</p></blockquote><p>（3）分类</p><blockquote><p>开发文档：描述软件开发过程<br>管理文档：产品文档规定关于软件产品的使用、维护、增强、转换和传输的信息<br>产品文档：从管理的角度规定涉及软件生存的信息</p></blockquote><p>（4）编制计划</p><blockquote><p>提示编制文档应参考的标准<br>提供编制文档所需要的条件，落实文档编写人员、所需经费及编制工具<br>明确保证文档质量的方法<br>制定进度表</p></blockquote><p>（5）具备特征</p><blockquote><p>针对性<br>精准性<br>清晰性<br>完整性<br>灵活性</p></blockquote><p><br></p><h2 id="7-软件需求管理"><a href="#7-软件需求管理" class="headerlink" title="7.软件需求管理"></a>7.软件需求管理</h2><p>（1）定义：控制和维持事先约定，保证项目开发过程的一致性，使用户能够得到他们最终想要得到的软件产品</p><p>（2）需求变更</p><p> ① 定义：</p><blockquote><p>在软件开发过程中，用户确定软件需求之后，由于各种客观和主观条件的变化，用户增加了新的需求或改变了原有需求</p></blockquote><p>② 变更依据：</p><blockquote><p>项目计划<br>变更请求<br>反映项目执行状况的绩效报告</p></blockquote><p>③ 措施：</p><blockquote><p>项目启动阶段的变更预防<br>项目实施阶段的需求变更</p></blockquote><p>（3）需求跟踪</p><p>① 定义：</p><blockquote><p>指在软件需求管理的过程中定义需求变更流程，分析需求变更影响，控制变化的版本，维护需求变更记录,跟踪每项需求状态</p></blockquote><p>② 内容：</p><blockquote><p>确定需求变更控制过程<br>进行需求变更影响分析<br>建立需求基准版本和需求控制版本文档<br>维护需求变更的历史记录<br>跟踪每项需求的状态</p></blockquote><p><br></p><h2 id="8-软件质量管理"><a href="#8-软件质量管理" class="headerlink" title="8.软件质量管理"></a>8.软件质量管理</h2><p>（1）定义：</p><blockquote><p>保证项目能满足原先规定的各项要求所需要的过程，即“总体管理功能中决定质量方针、目标与责任的所有活动，并通过诸如质量规划、质量保证、质量控制、质量改进等手段在质量体系内加以实施</p></blockquote><p>（2）内容：</p><blockquote><p>质量计划：判断哪些质量标准与本项目相关，并决定应如何达到这些质量标准<br>质量保证：定期评估项目总体绩效，建立项目能达到相关质量标准的信心<br>质量控制：监测项目的总体结果，判断它们是否符合相关质量标准，并找出如何消除不合格绩效的方法</p></blockquote><p>（3）质量计划：</p><p>① 目的：说明用以实施质量管理的组织结构、责任、程序、过程和资源”</p><p>② 常用标准：ANSI/IEEE STOL730—1984，983—1986</p><p>③ 活动：</p><blockquote><p>对项目的软件质量活动做出计划<br>对软件产品质量的可测量的目标及其优先级进行定义<br>确定软件产品质量目标的实现过程是可量化和可管理的<br>为管理软件产品的质量提供适当的资源和资金<br>对实施和支持软件质量管理的人员进行实施和支持过程中所要求的培训<br>对软件开发项目组和其他与软件项目有关的人员进行软件质量管理方面的培训<br>按照已文档化的规程制订和维护项目的软件质量计划<br>项目的软件质量管理活动要以项目的软件质量计划为基础<br>在整个软件生命周期，要确定、监控和更新软件产品的质量目标</p></blockquote><p>（4）作用：</p><blockquote><p>为项目符合相关质量标准要求树立信心而在质量系统内部实施的各项有计划的系统活动<br>监视项目的具体结果，确定其是否符合相关的质量标准，并判断如何杜绝造成不合格结果的根源</p></blockquote><p><br></p><h2 id="9-软件风险管理"><a href="#9-软件风险管理" class="headerlink" title="9.软件风险管理"></a>9.软件风险管理</h2><p>（1）定义：</p><blockquote><p>对项目风险进行识别、分析、并采取应对措施的系统过程。它包括尽量扩大有利于项目目标事项发生的概率与后果，而尽量减小不利于项目目标事项发生的概率与后果</p></blockquote><p>（2）按是否有可确定性划分类：</p><blockquote><p>已知风险<br>可预知风险<br>不可预知风险</p></blockquote><p>（3）按风险管理分类：</p><blockquote><p>内部技术风险<br>内部非技术风险<br>外部法律风险<br>外部非法律风险</p></blockquote><p>（4）内容：</p><blockquote><p>风险管理规划，决定如何指导和规划项目的风险管理活动<br>项目风险识别，找到哪些风险可能影响项目，并记录其特征<br>定性风险分析，完成风险和环境的定性分析，并按其对项目目标的影响进行排序<br>定量风险分析，度量风险的可能性和后果，估量其对项目目标的潜在影响<br>风险应对计划，创建过程和技术来为项目目标增进机会和减小威胁<br>风险监督与控制，在项目生命周期中监视现存的风险、识别新的风险、执行缓解风险计划及评估其效果</p></blockquote><p>（5）风险识别：识别整个项目过程中可能存在的风险事件</p><p>（6）风险分析：确定每个风险对项目的影响大小，一般是对已经识别出来的项目风险进行量化估计</p><p>（7）风险应对方法：可规避性、可转移性、可缓解性、可接受性</p><p>（8）风险应对计划：应用于项目进行期间发生的已识别风险，事先制订应变计划可大大降低风险发生时采取行动的成本</p><p>（9）风险监控：跟踪已识别风险的发展变化情况-&gt;根据风险的变化情况及时调整风险应对计划</p><p><br></p><h2 id="10-人力资源管理"><a href="#10-人力资源管理" class="headerlink" title="10.人力资源管理"></a>10.人力资源管理</h2><p>（1）定义：最有效地使用参与项目人员所需的各项过程，一般包括组织规划、人员招募和团队建设三个主要过程</p><p>（2）组织规划</p><p>① 定义：用于确定、记录并分派项目角色、职责和请示汇报关系</p><p>② 团队组织：垂直团队组织、水平团队组织、混和团队组织</p><p>（3）人员招募</p><p>① 定义：获取分派到项目上、并在那里工作所需的人力资源（个人或集体）</p><p>② 需考虑的问题：</p><blockquote><p>以往经验：这些个人或集体以前是否从事过类似或者相关的工作？工作表现如何？<br>个人兴趣：这些个人或集体对本项目的工作感兴趣吗？<br>能否得到：最理想的个人或集体人选能在规定期限内招募到手吗？<br>胜任与熟练程度：需要何种能力及何种水平？</p></blockquote><p>③ 项目经理具备能力：</p><blockquote><p>领导能力：懂得如何授权和分配职责、善于激励、树立榜样、抉择果断<br>沟通能力：善于提问，并做到有效地聆听，能经常站在对方的角度思考问题<br>人际交往能力<br>应付压力的能力<br>培养员工的能力<br>时间管理技能</p></blockquote><p>（3）团队建设</p><p>① 定义：包括提高项目干系人作为个人做出贡献的能力，也包括提高项目团队作为集体发挥作用的能力</p><p>② 成长规律四阶段：</p><blockquote><p>形成阶段<br>震荡阶段<br>正规阶段<br>表现阶段</p></blockquote><p>③ 团队应有特点：</p><blockquote><p>能清晰地理解项目的目标<br>每位成员的角色和职责有明确的期望<br>以项目的目标为行为的导向<br>项目成员之间高度信任、高度合作互助</p></blockquote><p><br></p><h2 id="11-软件的运行与评价"><a href="#11-软件的运行与评价" class="headerlink" title="11.软件的运行与评价"></a>11.软件的运行与评价</h2><p>（1）定义：</p><blockquote><p>软件开发结束后交付用户使用，用户在实际使用中对软件是否符合开发时制定的一系列评价标准进行打分，看是否满足了用户的使用要求</p></blockquote><p>（2）内容：</p><blockquote><p>软件的稳定性和可靠性评价<br>软件是否满足了用户的需求<br>软件实施给用户带来的好处</p></blockquote><p><br></p><h2 id="12-软件过程改进"><a href="#12-软件过程改进" class="headerlink" title="12.软件过程改进"></a>12.软件过程改进</h2><p>（1）定义：用于帮助软件企业对其软件生产过程进行计划、过程诊断、改进方案的制订及实施等工作</p><p>（2）实施对象：软件企业的软件过程，即软件产品的生产过程，也包括配置管理、软件维护等辅助过程</p><p>（3）改进模型：</p><blockquote><p>软件能力成熟度模型（CMM）<br>能力成熟度模型集成(CMMI)<br>ISO 9000<br>信息技术基础设施库（ITIL）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 软考架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
            <tag> 架构师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（软考架构师笔记十二）嵌入式系统设计</title>
      <link href="/2019/06/03/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E5%8D%81%E4%BA%8C%EF%BC%89%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
      <url>/2019/06/03/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E5%8D%81%E4%BA%8C%EF%BC%89%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>（软考架构师笔记十二）嵌入式系统设计<br><a id="more"></a></p><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><blockquote><p>一种以应用为中心，以计算机技术为基础，可以适应不同应用对功能、可靠性、成本、体积、功耗等方面的要求，集可配置，可裁减的软、硬件于一体的专用计算机系统</p></blockquote><p>三要素：</p><blockquote><p>嵌入性：计算机计算机嵌入到对象系统中，且满足对象系统的环境要求<br>专用性：软、硬件的裁剪性，满足对象要求的最小软、硬件配置<br>计算机系统：嵌入式系统必须是一个能满足对象系统控制要求的计算机系统</p></blockquote><p>特点：</p><blockquote><p>系统专用性强<br>系统实时性强<br>软、硬件依赖性强<br>处理器专用<br>多种技术紧密结合<br>系统透明性<br>系统资源受限</p></blockquote><p><br></p><h2 id="2-组成"><a href="#2-组成" class="headerlink" title="2.组成"></a>2.组成</h2><p>（1）定义</p><blockquote><p>硬件：嵌入式处理器、存储器和外部设备<br>软件：系统软件、应用支撑软件和应用软件</p></blockquote><p><br></p><h2 id="2-硬件架构"><a href="#2-硬件架构" class="headerlink" title="2.硬件架构"></a>2.硬件架构</h2><p>（1）嵌入式基本硬件架构图</p><p> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/twelve/ruankao12-1.png" height="70%" width="100%"></p><p>（2）嵌入式处理器</p><p>① 核心：各种类型的嵌入式处理器</p><p>② 类别：</p><blockquote><p>嵌入式微处理器（EMPU）<br>嵌入式微控制器（EMCU）<br>嵌入式数字信号处理器（EDSP）<br>嵌入式片上系统</p></blockquote><p>（3）总线</p><p>① 定义：</p><blockquote><p>连接计算机系统内部各个部件的共享高速通路</p></blockquote><p>② 分类：</p><blockquote><p>片内总线：嵌入式微处理器内的CPU 与片内其他部件连接的总线<br>片外总线：总线控制器集成在微处理器内部或外部芯片上的用于连接外部设备的总线</p></blockquote><p>③ 代表：</p><blockquote><p>先进微控制总线（AMBA总线）<br>外围构件互围总线（PCI 总线）<br>Avalon总线</p></blockquote><p>（4）存储器</p><blockquote><p>高速缓存：Cache 全部集成在嵌入式微处理器内部，分为数据Cache、指令 Cache 和混合 Cache<br>主存：处理器能够直接访问的存储器，用来存放系统和用户的程序和数据<br>外存：是不与运算器直接联系的后备存储器，用来存放不常用的或暂不使用的信息</p></blockquote><p>（5）I/O 设备与接口</p><p><br></p><h2 id="3-嵌入式软件架构"><a href="#3-嵌入式软件架构" class="headerlink" title="3.嵌入式软件架构"></a>3.嵌入式软件架构</h2><p> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/twelve/ruankao12-2.png" height="50%" width="70%"></p><blockquote><p>操作系统： 操作系统内核、应用程序接口、设备驱动程序接口等几部分组成<br>应用支撑软件：由窗口系统、网络系统、数据库管理系统及 Java 虚拟机等几部分组成<br>应用软件</p></blockquote><p><br></p><h2 id="4-嵌入式开发平台与调试环境"><a href="#4-嵌入式开发平台与调试环境" class="headerlink" title="4.嵌入式开发平台与调试环境"></a>4.嵌入式开发平台与调试环境</h2><p>（1）开发平台</p><p>① 使用的是交叉式开发方法</p><p>② 交叉平台开发环境</p><p>定义：软件在一个通用的平台上开发，而在另一个嵌入式目标平台上运行<br>宿主机系统：用于开发的机器系统<br>目标机系统：被开发的嵌入式系统<br>二者相同：本地开发</p><p>② 交叉编译环境：由宿主机提供</p><p>（2）嵌入式开发调试<br>① 介绍：由于嵌入式系统条件限制，调试的方式不能和通用的方式一样在同一台机子调试，通常采用交叉方式</p><p>② 方式分类：</p><blockquote><p>直接调试法：将目标代码下载到目标机上，让其执行，通过观察指示灯来判断程序的运行状态</p><p>调试监控法（插桩法）：目标机和宿主机一般通过串行口、并行口或以太网相连接，采用这种方法还需要在宿主机的调试器内和目标机的操作系统上分别启动一个功能模块，然后通过这两个功能模块的相互通信来实现对应用程序的调试</p><p>在线仿真法：替代目标机上 CPU 的设备<br>片上调试法：CPU 芯片内部的一种用于支持调试的功能模块</p><p>模拟器法：运行于宿主机上的一个纯软件工具，它通过模拟目标机的指令系统或目标机操作系统的系统调用来达到在宿主机上运行和调试嵌入式应用程序的目的</p></blockquote><p><br></p><h2 id="5-嵌入式网络系统"><a href="#5-嵌入式网络系统" class="headerlink" title="5.嵌入式网络系统"></a>5.嵌入式网络系统</h2><p>（1）定义：用于连接各种嵌入式系统，使之可以互相传递信息、共享资源的网络系统</p><p>（2）现场总线网(工业自动化领域的计算机局域网)</p><p>① 定义：</p><blockquote><p>是一种将数字传感器、变换器、工业仪表及控制执行机构等现场设备与工业过程控制单元、现场操作站等互相连接而成的网络</p></blockquote><p>（3）家庭信息网</p><p>① 定义：</p><blockquote><p>是一种把家庭范围内的个人计算机、家用电器、水、电、气仪表、照明设备和网络设备、安全设备连接在一起的局域网</p></blockquote><p>② 功能：集中控制上述设备并将其接入Internet，以共享网络资源和服务</p><p>（4）无线数据通信网</p><p>① 定义：是一种通过无线电波传送数据的网络系统</p><p>② 分类：</p><blockquote><p>短程无线网： 802.11、蓝牙、IrDA 及 HomeRF<br>无线inernet：移动无线接入技术、固定无线接入技术</p></blockquote><p>（2）嵌入式Internet</p><p>① 接入方式：</p><blockquote><p>集成了 TCP/IP 协议栈及相关软件，这类设备可以作为 Internet 的一个节点，分配有 IP 地址，与 Internet 直接互联</p><p>通 Internet，即采用瘦设备方案，设备不直接接入 Internet，不需要复杂的TCP/IP 协议全集，而是通过接入设备接入 Internet</p></blockquote><p>（3）嵌入式 TCP/IP 协议栈</p><blockquote><p>嵌入式协议栈的调用接口与普通的协议栈不同<br>嵌入式协议栈的可裁剪性<br>嵌入式协议栈的平台兼容性<br>嵌入式协议栈的高效率</p></blockquote><p><br></p><h2 id="6-嵌入式数据库管理系统"><a href="#6-嵌入式数据库管理系统" class="headerlink" title="6.嵌入式数据库管理系统"></a>6.嵌入式数据库管理系统</h2><p>（1）使用环境特点</p><blockquote><p>设备随时移动性<br>网络频繁断接<br>网络条件多样化<br>通信能力不对称</p></blockquote><p>（2）系统组成与关键技术<br> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/twelve/ruankao12-3.png" height="50%" width="100%"></p><p>① 嵌入式数据库管理系统</p><p>② 同步服务器</p><p>③ 数据服务器</p><p>④ 连接网络</p><p><br></p><h2 id="7-实时系统与嵌入式操作系统"><a href="#7-实时系统与嵌入式操作系统" class="headerlink" title="7.实时系统与嵌入式操作系统"></a>7.实时系统与嵌入式操作系统</h2><p>（1）实时系统：<br>① 定义：对外部事件能够及时响应的系统</p><p>② 实时系统与嵌入式操作系统关系：</p><blockquote><p>逻辑（或功能）正确，是指系统对外部事件的处理能够产生正确的结果<br>时间正确，是指系统对外部事件的处理必须在预定的周期内完成<br>死线（Deadline）或时限、死限、截止时间，是指系统必须对外部事件进行处理的最迟时间界限<br>实时系统，是指功能正确和时间正确同时满足的系统</p></blockquote><p>③ 分类：</p><blockquote><p>强实时系统<br>一般实时系统<br>弱实时系统<br>硬实时系统<br>软实时系统</p></blockquote><p>（2）嵌入式操作系统<br>① 定义：</p><blockquote><p>运行在嵌入式计算机系统上支持嵌入式应用程序的操作系统，是用于控制和管理嵌入式系统中的硬件和软件资源、提供系统服务的软件集合</p></blockquote><p>② 特点：</p><blockquote><p>微型化<br>代码质量高<br>专业化<br>实时性强<br>可裁减、可配置</p></blockquote><p>③ 分类</p><blockquote><p>根据获取方式：商业型和免费型<br>实时性：实时操作系统和非实时操作系统</p></blockquote><p>（3）实时嵌入式操作系统</p><p>① 分类：</p><blockquote><p>实时内核型的 RTEOS：驱动程序传统嵌在内核之中，应用程序和中间件实现在标准的应用程序接口之上<br>通用型的 RTEOS：驱动程序并非深度嵌入到内核中，而是在内核之上实现，并且仅包含少数必要的驱动程序，应用程序和中间件可以直接在驱动程序之上实现，而不必在标准的 APIs 实现</p></blockquote><p> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/twelve/ruankao12-4.png" height="30%" width="75%"></p><p>② 特性：</p><blockquote><p>满足嵌入式应用的高可靠性；<br>满足应用需要的可裁减能力；<br>内存需求少；<br>运行的可预测性；<br>采用实时调度策略；<br>系统的规模紧凑；<br>支持从 ROM 或 RAM 上引导和运行；<br>对不同的硬件平台均有更好的可移植性。</p></blockquote><p>③ 性能指标：</p><blockquote><p>任务切换时间<br>中断处理相关的时间指标<br>系统响应时间</p></blockquote><p><br></p><h2 id="嵌入式系统的开发设计"><a href="#嵌入式系统的开发设计" class="headerlink" title=".嵌入式系统的开发设计"></a>.嵌入式系统的开发设计</h2><p>（1）目的：定义系统的功能、决定系统的架构，并将功能映射到系统实现架构上</p><p>（2）设计特点：</p><blockquote><p>软、硬件协同并行开发；<br>微处理器的类型多种多样；<br>实时嵌入式操作系统具有多样性；<br>与通用系统开发相比，可利用系统资源很少；<br>应用支持少；<br>要求特殊的开发工具；<br>软、硬件都要很健壮；<br>调试很困难。</p></blockquote><p>（3）设计指标</p><blockquote><p>非重复性工程成本(NRE成本)<br>单位成本<br>大小<br>性能<br>功率<br>灵活性<br>上市时间<br>可维护性<br>安全性<br>正确性</p></blockquote><p>（4）设计挑战</p><blockquote><p>需要多少硬件<br>如何满足时限<br>如何减少系统的功耗<br>如何满足系统可升级性<br>如何保证系统的可靠性<br>测试复杂性<br>可视性和可控制性有限<br>开发环境受限</p></blockquote><p>（5）开发模型与设计流程</p><p>① 常用开发模型</p><blockquote><p>瀑布模型<br>螺旋模型<br>逐步求精模型<br>层次模型</p></blockquote><p>（6）设计方法</p><blockquote><p>嵌入式系统软件的开发过程可以分为项目计划、可行性分析、需求分析、概要设计、详细设计、程序建立、下载、调试、固化、测试及运行等几个阶段</p></blockquote><p> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/twelve/ruankao12-5.png" height="70%" width="90%"></p><p>（7）核心技术</p><p>① 处理器技术</p><blockquote><p>通用处理器<br>单用途处理器<br>专用处理器</p></blockquote><p>② IC 技术</p><blockquote><p>全定制/VLSI（Very Large Scale Integrated Circuites，超大规模集成电路）<br>半定制/ASIC（Application Specific Integrated Circuit，专用集成电路）<br>可编程/ASIC</p></blockquote><p>③ 设计/验证技术</p><blockquote><p>芯片级设计技术：核心是编译/综合、库/IP（Intellectual Property，知识产权）、测试/验证<br>软件设计技术：核心是软件语言</p></blockquote><p>（8）设计环境</p><blockquote><p>与嵌入式操作系统配套的开发环境<br>与处理器芯片配套的开发环境<br>与具体应用平台配套的开发环境<br>其他类的开发环境</p></blockquote><p>（9）设计模型</p><p>① 状态机模型</p><blockquote><p>用一组可能的状态来描述系统的行为，系统在任何时刻只能处于其中一个状态，也可以描述由输入确定的状态转移，最后可以描述在某个状态下或状态转移期间可能发生的操作</p></blockquote><p>② 数据流模型</p><blockquote><p>并发多任务模型派生出的一种模型，该模型将系统的行为描述为一组结点和边，其中结点表示变换，边表示从一个结点到另一个结点的数据流向。每个结点使用来自其输入边的数据，执行变换并在其输出边上产生数据</p></blockquote><p>③ 并发进程模型</p><blockquote><p>由一组进程构成，每个进程是一个顺序执行的过程，各进程间可以并发执行。并发进程模型提供创建、终止、暂停、恢复和连接进程的操作。进程在执行中可以相互通信，交换数据。进程间通信可以采用两种方式：共享变量和消息传递。信号量、临界区、管程和路径表达式等用来对并发进程的操作进行同步</p></blockquote><p>④ 面向对象模型</p><blockquote><p>一个对象向另一个对象发送消息后，若不需要或不立即需要消息的处理结果，前者不必等待后者处理消息，消息发送者和消息接受者可以并发执行。对象不都是处于被动的提供服务状态，它们中的一些除了能通过接收消息向外提供服务外，还可以有自己的事务处理。一个对象往往可以同时处理多个消息</p></blockquote><p>并发与对象结合的两条途径：</p><blockquote><p>在面向对象模型中引进并发机制，充分利用面向对象技术刻画客观世界的良好模<br>型能力和面向对象的各个重要特性，同时把其潜在的并发能力描述出来，使其适合于描述并<br>发计算<br>在传统并发模型中引进面向对象思想</p></blockquote><p>面向对象的并发模型的两种类型：</p><blockquote><p>隐式并发模型：推迟并发设计，将对象建模作为建模基础<br>显式并发模型：首先考虑并发，应先把并发概念和对象概念分开</p></blockquote><p>（10）需求分析</p><blockquote><p>功能性需求：说明这个系统必须做什么，而非功能性需求说明系统的其他属性<br>非功能性需求</p></blockquote><p>（11）系统设计</p><p>① 类别：</p><blockquote><p>协同合成工具： POLIS、COSYMA和Chinook<br>协同模拟工具：PTOLEMY、TSS</p></blockquote><p>② 系统架构设计（先考虑软件架构再考虑硬件架构）</p><blockquote><p>原始框图<br>软件系统架构<br>硬件系统架构</p></blockquote><p>③ 硬件子系统设计</p><p>开发环境组成：</p><blockquote><p>目标硬件平台<br>嵌入式操作系统<br>编程语言<br>开发工具</p></blockquote><p>考虑因素：</p><blockquote><p>选择处理器技术<br>通用嵌入式处理器的选择<br>硬件设计的注意事项</p></blockquote><p>④ 软件子系统设计（按软件设计的方式即可）</p><p>考虑因素：</p><blockquote><p>操作系统的选择<br>编程语言的选择<br>软件开发过程<br>软件开发文档</p></blockquote><p>（12）系统集成与测试</p><blockquote><p>软件测试<br>硬件测试<br>单元测试</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 软考架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
            <tag> 架构师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（软考架构师笔记十一）测试评审方法</title>
      <link href="/2019/05/31/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E5%8D%81%E4%B8%80%EF%BC%89%E6%B5%8B%E8%AF%95%E8%AF%84%E5%AE%A1%E6%96%B9%E6%B3%95/"/>
      <url>/2019/05/31/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E5%8D%81%E4%B8%80%EF%BC%89%E6%B5%8B%E8%AF%95%E8%AF%84%E5%AE%A1%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>（软考架构师笔记十一）测试评审方法<br><a id="more"></a></p><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><blockquote><p>软件测试与评审是软件质量保证的主要手段之一，也是在将软件交付给客户之前所必须完成的步骤</p></blockquote><p><br></p><h2 id="2-测试方法"><a href="#2-测试方法" class="headerlink" title="2.测试方法"></a>2.测试方法</h2><blockquote><p>缺陷：针对产品而言<br>错误：针对开发过程而言</p></blockquote><p>目的：</p><blockquote><p>在软件投入生产性运行之前，尽可能多地发现软件产品（主要是指程序）中的错误（缺陷）</p></blockquote><p>方案：</p><blockquote><p>应竭力设计能暴露错误（缺陷）的测试用例</p></blockquote><p>（1）软件测试阶段</p><p>① 单元测试（模块测试）</p><blockquote><p>目的：发现编程和详细设计中产生的错误<br>场景：程序员编程阶段<br>对象：单个模块</p></blockquote><p>② 集成测试（组装测试）</p><blockquote><p>目的：发现模块间的接口和通信问题<br>场景：程序员编程阶段（单元测试之后）<br>对象：多个模块</p></blockquote><p>方式：</p><blockquote><p>非渐增式：先测试所有的模块，然后一下子把所有这些模块集成到一起，并把庞大的程序作为一个整体来测试<br>渐增式：将未测试的模块单独加入集成模块中，依次递增</p></blockquote><p>③ 系统测试</p><blockquote><p>目的：全局来考察软件系统的功能和性能要求<br>场景：程序员编程最后阶段（单元测试和集成测试之后）<br>对象：所有模块</p></blockquote><p>方式：</p><blockquote><p>确认测试：依据软件需求说明书检查软件的功能、性能及其他特征是否与用户的需求一致<br>验收测试：确认其所有需求是否都已得到满足</p></blockquote><p>（2）白盒测试和黑盒测试</p><p>① 白盒测试（结构测试）</p><blockquote><p>定义：代码透明，测试者完全知道程序的结构和处理算法<br>场景：单元测试阶段<br>技术：逻辑覆盖：考察用测试数据运行被测程序时对程序逻辑的覆盖程度</p></blockquote><p>覆盖标准：</p><blockquote><p>语句覆盖：选择足够多的测试用例，使得运行这些测试用例时，被测程序的每个语句至少执行一次<br>判定覆盖（分支覆盖）：不仅每个语句至少执行一次，而且每个判定的每种可能的结果（分支）都至少执行一次<br>条件覆盖：不仅每个语句至少执行一次，而且使判定表达式中的每个条件都取得各种可能的结果<br>判定/条件覆盖：选取足够的测试用例，使得判定表达式中每个条件的所有可能结果至少出现一次，而且每个判定本身的所有可能结果也至少出现一次<br>组合条件覆盖和路径覆盖：选取足够的测试用例，使得每个判定表达式中条件结果的所有可能组合至少出现一次<br>路径覆盖：选取足够的测试用例，使得程序的每条可能执行到的路径都至少经过一次</p></blockquote><p>② 黑盒测试（功能测试）</p><blockquote><p>定义：代码不透明，只检查软件功能是否能按照软件需求说明书的要求正常使用<br>场景：集成测试和确认测试阶段<br>技术：等价类划分、边值分析、错误推测和因果图</p></blockquote><p>等价类划分：</p><blockquote><p>把类似的数划分为等价类，如果一个类错误，其等价类也可能错误</p></blockquote><p>边值分析：</p><blockquote><p>软件在处理边界情况时最容易出错，设计一些测试用例，使软件恰好运行在边界附近，暴露出软件错误的可能性会更大一些</p></blockquote><p>错误推测：</p><blockquote><p>依靠测试人员的经验和直觉，从各种可能的测试方案中选出一些最可能引起程序出错的方案</p></blockquote><p>因果图：</p><blockquote><p>根据输入条件与输出结果之间的因果关系来设计测试用例</p></blockquote><p>（3）缺陷的分类和级别<br>① 分类：</p><blockquote><p>输入/输出错误<br>逻辑错误<br>计算错误<br>接口错误<br>数据错误</p></blockquote><p>② 级别：</p><blockquote><p>轻微（例如，界面文字有个别的错别字，但不影响理解）<br>中等（例如，界面文字错误可能误导操作者）<br>使人不悦（例如，数字串被断开）<br>影响使用（例如，有些交易没有处理）<br>严重（例如，丢失交易）<br>非常严重（例如，不正确的交易处理）<br>极为严重（例如，经常出现不正确的交易处理）<br>无法容忍（例如，数据库遭到破坏）<br>灾难性（例如，系统无法工作）<br>传染性（例如，可导致其他系统无法工作）。</p></blockquote><p>（4）调试(排错)<br>① 标志：发现错误</p><p>② 程序错误特质：</p><blockquote><p>错误的外部征兆远离引起错误的内部原因，对于高度耦合的程序结构此类现象更为严重<br>纠正一个错误造成了另一错误现象（暂时）的消失<br>某些错误征兆只是假象<br>因操作人员一时疏忽造成的某些错误征兆不易追踪<br>错误是由于分时而不是程序引起的<br>输入条件难以精确地再构造（例如，某些实时应用的输入次序不确定）<br>错误征兆时有时无，此现象对嵌入式系统尤其普遍<br>错误是由于把任务分布在若干台不同处理机上运行而造成的。</p></blockquote><p>③ 拍错策略：</p><blockquote><p>原始类<br>回溯类<br>排除类</p></blockquote><p><br></p><h2 id="2-评审方法"><a href="#2-评审方法" class="headerlink" title="2.评审方法"></a>2.评审方法</h2><p>（1）定义：</p><blockquote><p>是对软件元素或者项目状态的一种评估手段，以确定其是否与计划的结果保持一致，并使其得到改进<br>狭义评审：指软件文档和源程序的评审<br>广义评审：狭义评审的内容和与软件测试相结合的评审及管理评审</p></blockquote><p>（2）软件评审：</p><blockquote><p>软件需求评审<br>概要设计评审<br>详细设计评审<br>软件验证和确认评审<br>功能检查<br>物理检查<br>综合检查<br>管理评审</p></blockquote><p><br></p><h2 id="2-验证和确认"><a href="#2-验证和确认" class="headerlink" title="2.验证和确认"></a>2.验证和确认</h2><p>（1）验证：</p><blockquote><p>合同验证<br>过程验证<br>需求验证<br>设计验证<br>编码验证<br>集成验证<br>文档验证</p></blockquote><p>（2）确认</p><blockquote><p>编写测试需求、测试用例和测试规程。<br>确保这些测试需求、测试用例和测试规程可以反映软件产品的预期用途。<br>执行测试。<br>确认软件产品满足其预期用途。</p></blockquote><p><br></p><h2 id="3-测试自动化"><a href="#3-测试自动化" class="headerlink" title="3.测试自动化"></a>3.测试自动化</h2><p>适合场景：</p><blockquote><p>测试用例的生成（包括测试输入、标准输出、测试操作指令等）<br>测试的执行控制（包括单机与网络多机分布运行、夜间及假日运行、测试用例调用控制、测试对象、范围、版本控制等）<br>测试结果与标准输出的对比<br>不吻合的测试结果的分析、记录、分类和通报<br>总测试状况的统计，报表的产生</p></blockquote><p><br></p><h2 id="4-面向对象的测试"><a href="#4-面向对象的测试" class="headerlink" title="4.面向对象的测试"></a>4.面向对象的测试</h2><p>定义：摒除原本的单元、集成、系统测试的传统模式，改为以下：</p><p>（1）面向对象测试模型</p><p>（2）面向对象分析的测试</p><p>（3）面向对象设计的测试</p><p>（4）面向对象编程的测试</p><p>（5）面向对象的单元测试</p><p>（6）面向对象的集成测试</p><p>（7）面向对象的系统测试</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 软考架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
            <tag> 架构师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（软考架构师笔记十）设计模式</title>
      <link href="/2019/05/31/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E5%8D%81%EF%BC%89%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/05/31/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E5%8D%81%EF%BC%89%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>（软考架构师笔记十）设计模式<br><a id="more"></a></p><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><blockquote><p>对被用来在特定场景下解决一般设计问题的类和互相通信的对象的描述（某一问题通用的解决方案）</p></blockquote><p>学习注意两点：</p><blockquote><p>学习这些模式是一个方面，另一方面更要了解模式中的思想<br>设计模式虽然可以使设计变得更精妙，但滥用设计模式会适得其反</p></blockquote><p><br></p><h2 id="2-设计模式组成"><a href="#2-设计模式组成" class="headerlink" title="2.设计模式组成"></a>2.设计模式组成</h2><blockquote><p>模式名称（Pattern name）<br>问题（Problem）<br>解决方案（Solution）<br>效果（Consequence）</p></blockquote><p><br></p><h2 id="3-GoF设计模式-23种"><a href="#3-GoF设计模式-23种" class="headerlink" title="3.GoF设计模式(23种)"></a>3.GoF设计模式(23种)</h2><blockquote><p>1.Factory Method 模式（创建型）<br>2.Abstract Factory 模式（创建型）<br>3.Builder 模式（创建型）<br>4.Prototype 模式（创建型）<br>5.Singleton 模式（创建型）<br>6.Adapter 模式（结构型）<br>7.Bridge 模式（结构型）<br>8.Composite 模式（结构型）<br>9.Decorator 模式（结构型）<br>10.Facade 模式（结构型）<br>11.Flyweight 模式（结构型）<br>12.Proxy 模式（结构型）<br>13.Interpreter 模式（行为型）<br>14.Template Method 模式（行为型）<br>15.Chain of Responsibility 模式（行为型）<br>16.Command 模式（行为型）<br>17.Iterator 模式（行为型）<br>18.Mediator 模式（行为型）<br>19.Memento 模式（行为型）<br>20.Observer 模式（行为型）<br>21.State 模式（行为型）<br>22.Strategy 模式（行为型）<br>23.Visitor 模式（行为型）</p></blockquote><p><br></p><h2 id="4-其他设计模式"><a href="#4-其他设计模式" class="headerlink" title="4.其他设计模式"></a>4.其他设计模式</h2><blockquote><p>1.Intercepting Filter 模式<br>2.Session Facade 模式</p></blockquote><p><br></p><h2 id="5-设计模式分类"><a href="#5-设计模式分类" class="headerlink" title="5.设计模式分类"></a>5.设计模式分类</h2><blockquote><p>1.创建型：解决对象创建的问题<br>2.结构型：解决对象的结构复杂问题<br>3.行为型：解决对象状态改变而改变行为的问题</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 软考架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
            <tag> 架构师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（软考架构师笔记九）软件架构设计</title>
      <link href="/2019/05/27/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E4%B9%9D%EF%BC%89%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
      <url>/2019/05/27/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E4%B9%9D%EF%BC%89%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>（软考架构师笔记九）软件架构设计<br><a id="more"></a></p><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><blockquote><p>架构是对系统的抽象，它通过描述元素、元素的外部可见属性及元素之间的关系来反映这种抽象<br>架构由多个结构组成<br>任何软件都存在架构，但不一定有对该架构的具体表述文档<br>元素及其行为的集合构成架构的内容<br>架构具有“基础”性<br>架构隐含有“决策”，即架构是由架构设计师根据关键的功能和非功能性需求（质量属性及项目相关的约束）进行设计与决策的结果</p></blockquote><p>（1）软件至于商业背景的重要：</p><blockquote><p>影响架构的因素<br>架构对上述诸因素具有反作用</p></blockquote><p>（2）软件架构的重要性 </p><blockquote><p>项目关系人之间交流的平台<br>早期设计决策<br>在较高层面上实现软件复用<br>架构对开发的指导与规范意义不容忽略</p></blockquote><p>（3）架构的模型</p><blockquote><p>结构模型<br>框架模型<br>动态模型<br>过程模型<br>功能模型<br>4+1视图模型</p></blockquote><p>4+1视图模型：<br> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/nine/ruankao9-1.png" height="40%" width="70%"></p><blockquote><p>逻辑视图：系统提供给最终用户的服务<br>开发视图：软件模块的组织和管理<br>进程视图：非功能性的需求(性能和可用性)<br>物理视图：解决系统拓扑结、系统安装、通信<br>场景：帮助设计者找到架构的构件和它们之间的作用关系</p></blockquote><p>逻辑视图和开发视图描述系统的静态结构，而进程视图和物理视图描述系统的动态结构</p><p><br></p><h2 id="2-架构需求与软件质量属性"><a href="#2-架构需求与软件质量属性" class="headerlink" title="2.架构需求与软件质量属性"></a>2.架构需求与软件质量属性</h2><p>（1）定义：</p><blockquote><p>软件属性包括功能属性和质量属性，架构师着重关注质量</p></blockquote><p>（2）软件质量属性<br>《GB/T16260-1996(idt ISO／IEC9126：1991)信息技术软件产品评价质量特性及其使用指<br>南》中描述的软件质量特性包括：</p><blockquote><p>功能性：适合性、准确性、互操作性、依从性、安全性<br>可靠性：成熟性、容错性、易恢复性<br>易用性：易理解性、易学性、易操作性<br>效率：时间特性、资源特性<br>可维护性：易分析性、易改变性、稳定性、易测试性<br>可移植性：适应性、易安装性、遵循性、易替换性；</p></blockquote><p>① 运行期质量属性</p><blockquote><p>性能：性能是指软件系统及时提供相应服务的能力。包括速度、吞吐量和持续高速性三方面<br>的要求<br>安全性：指软件系统同时兼顾向合法用户提供服务，以及阻止非授权使用的能力。<br>易用性：指软件系统易于被使用的程度。<br>可伸缩性：指当用户数和数据量增加时，软件系统维持高服务质量的能力。例如，通过增加<br>服务器来提高能力。<br>互操作性：指本软件系统与其他系统交换数据和相互调用服务的难易程度。<br>可靠性：软件系统在一定的时间内无故障运行的能力。<br>持续可用性：指系统长时间无故障运行的能力。与可靠性相关联，常将其纳入可靠性中。<br>鲁棒性：是指软件系统在一些非正常情况（如用户进行了非法操作、相关的软硬件系统发生<br>了故障等）下仍能够正常运行的能力。也称健壮性或容错性。</p></blockquote><p>② 开发期质量属性</p><blockquote><p>易理解性：指设计被开发人员理解的难易程度。<br>可扩展性：软件因适应新需求或需求变化而增加新功能的能力。也称为灵活性。<br>可重用性：指重用软件系统或某一部分的难易程度。<br>可测试性：对软件测试以证明其满足需求规范的难易程度。<br>可维护性：当需要修改缺陷、增加功能、提高质量属性时，定位修改点并实施修改的难易程度；<br>可移植性：将软件系统从一个运行环境转移到另一个不同的运行环境的难易程度。</p></blockquote><p>（3）6个质量属性</p><blockquote><p>可用性<br>可修改性<br>性能<br>安全性<br>可测试性<br>易用性</p></blockquote><p><br></p><h2 id="3-软件架构风格"><a href="#3-软件架构风格" class="headerlink" title="3.软件架构风格"></a>3.软件架构风格</h2><p>（1）目的：</p><blockquote><p>重复的软件架构模式，即能否达到架构级别的软件重用</p></blockquote><p>（2）定义：</p><blockquote><p>描述某一特定应用领域中系统组织方式的惯用模式（idiomatic paradigm）</p></blockquote><p>（3）架构风格分类</p><blockquote><p>数据流风格：批处理序列；管道/过滤器<br>调用/返回风格：主程序/子程序；面向对象风格；层次结构<br>独立构件风格：进程通信；事件系统<br>虚拟机风格：解释器；基于规则的系统<br>仓库风格：数据库系统；超文本系统；黑板系统</p></blockquote><p>（4）数据流风格<br>① 定义：</p><blockquote><p>过程像流水线一般，数据经过序列间的数据处理组件进行处理，然后将处理结果向后传送，最后进行输出</p></blockquote><p>② 批处理序列</p><blockquote><p>过程分许多步，每一步都是独立的整体且顺序执行（以整体的方式传递）–（经典数据处理、程序开发、windows的bat程序）</p></blockquote><p>③ 管道和过滤器</p><blockquote><p>输入，对输入流进行处理（变换及增量），输出(在输入的过程中就有可能有输出)，过滤器之间透明</p></blockquote><p>（5）调用/ 返回风格<br>① 定义：</p><blockquote><p>在系统中采用了调用与返回机制</p></blockquote><p>② 主程序/子程序</p><blockquote><p>单线程控制，构件置为主程序和子程序，通过交互的方式进行处理</p></blockquote><p>③ 面向对象风格</p><blockquote><p>构件设为对象，通过函数或方法的调用进行交互</p></blockquote><p>特征：</p><blockquote><p>对象处理自己的完整性<br>对象对其他对象无透明性</p></blockquote><p>③ 层次结构风格</p><blockquote><p>层析结构，分层处理，层与层之间交互实现数据交互</p></blockquote><p>优点：支持抽象递增、功能增强、可重用<br>缺点：分层困难，层难以抽象化</p><p>（6）独立构件风格<br>① 定义：</p><blockquote><p>构件设为独立个体，之间不通信</p></blockquote><p>② 进程通信：通过连接件交互</p><p>③ 事件系统风格：触发广播或事件</p><p>（7）虚拟机风格<br>① 定义：</p><blockquote><p>构件虚拟环境，解析自定义语言</p></blockquote><p>② 解释器：存储区、工作状态数据结构、工作进度数据结构</p><p>③ 规则：规则集、规则解释器、规则/数据选择器及工作内存</p><p>（8）仓库风格<br>① 定义：中央数据结构（状态）、独立构件（存储）、</p><p>② 数据库 </p><p>③ 超文本</p><p>④ 黑板</p><p><br></p><h2 id="4-层析系统架构风格"><a href="#4-层析系统架构风格" class="headerlink" title="4.层析系统架构风格"></a>4.层析系统架构风格</h2><p>（1）二/三层 C/S架构</p><p>① 二层：服务器和客户机（服务器压力大、数据安全性不高）</p><p>② 三层：</p><blockquote><p>表示层：用户界面<br>功能层：处理业务逻辑<br>数据层：数据管理</p></blockquote><p>（2）B/S架构</p><p>① 定义：浏览器、WEB服务器、数据库服务器（已浏览器形式，应用程序储存于服务器，输入地址即可）</p><p>（3）MVC架构风格</p><p>① 定义：模型(model)、视图(view)、控制器(controller)</p><p>② 分工：</p><blockquote><p>模型：应用和业务的封装<br>视图：用户界面<br>控制器：数据交互</p></blockquote><p>（4）MVP架构风格</p><p>① 定义：</p><blockquote><p>Model：提供数据<br>View：负责显示<br>Controller/Presenter：负责逻辑的处理</p></blockquote><p>与mvc区别：</p><blockquote><p>model与view不直接交互，而是在Presenter中进行</p></blockquote><p>（5）面向服务的架构（SOA）</p><p>① 定义：是一种在计算环境中设计、开发、部署和管理离散逻辑单元（服务）模型的方法，功能设为独立的服务，服务之间通过交互完成整个逻辑（松耦合）</p><p>② 设计原则</p><blockquote><p>明确定义的接口<br>自包含和模块化<br>粗粒度(数量不宜过多)<br>松耦合<br>互操作性</p></blockquote><p>③ 服务构件（SCA）与传统构件<br>定义：简化SOA的开发，提出构建粗粒度进制</p><p>（6）SOA关键技术</p><p>① UDDI(统一描述、发现和集成)：</p><blockquote><p>提供了一种服务发布、查找和定位的方法，是服务的信息注册规范，以便被需要该服务的用户发现和使用它（也统一了编程接口）</p></blockquote><p>技术规范：</p><blockquote><p>数据模型：XML<br>API：基于SOAP<br>注册服务</p></blockquote><p>② WSDL（Web服务描述语言）</p><p>定义：</p><blockquote><p>是对服务进行描述的语言，它有一套基于 XML 的语法定义。WSDL 描述的重点是服务，它包含服务实现定义和服务接口定义,提高系统的扩展性，描述了给定服务提供者如何实现特定的服务接口</p></blockquote><p>③ SOAP（简单对象访问协议）</p><p>定义：定义了服务请求者和服务提供者之间的消息传输规范用，XML来格式化消息，用HTTP来承载消息。可以在网络中进行数据交换和远程过程调用，从发送端到接收端的单向传输</p><p>SOAP四部分：</p><blockquote><p>封装：封装整体框架，指明包含的内容<br>编码规则：用于交换系统所定义的数据类型的实例<br>RPC表示：定义远程过程调用和应答的协议<br>绑定：定定义了一个使用底层传输协议来完成在节点之间交换 SOAP 封装的约定</p></blockquote><p>④ REST（表述性状态转移）<br>定义：是一种只使用 HTTP 和 XML 进行基于 Web 通信的技术，可以降低开发的复杂性，提高系统的可伸缩性</p><p>概念和准则：</p><blockquote><p>网络上的所有事物都被抽象为资源<br>每个资源对应一个唯一的资源标识<br>通过通用的连接件接口对资源进行操作<br>对资源的各种操作不会改变资源标识<br>所有的操作都是无状态的</p></blockquote><p>（7）SOA主流实现方式<br>① Web Service<br> 角色：</p><blockquote><p>服务提供者：服务提供者是服务的所有者，该角色负责定义并实现服务（WSDL）<br>服务请求者：服务请求者是服务的使用者，查找、绑定并调用服务，或与服务进行交互的应用程序<br>服务注册中心：连接服务提供者和服务请求者的纽带，提供者在此发布，请求者在此寻找</p></blockquote><p>操作：</p><blockquote><p>发布：发布服务描述<br>查找：检索服务描述或在服务注册中心查询所要求的服务类型<br>绑定：动态绑定（提供者在通过注册中心与请求者交互），静态绑定（提供者已与请求者通过文件或其他方式绑定）</p></blockquote><p>层次：</p><blockquote><p>底层传输层：负责消息的传输机制（HTTP）<br>服务通信协议层：描述并定义服务之间进行消息传递所需的技术标准（soap,rest）<br>服务描述层：描述服务的接口与消息交换方式（WSDL）<br>服务层:将遗留系统进行包装，并通过发布的 WSDL 接口描述被定位和调用<br>业务流程层:支持服务发现，服务调用和点到点的服务调用，并将业务流程从服务的底层调用抽象出来<br>服务注册层:使服务提供者能够通过 WSDL 发布服务定义，并支持服务请求者查找所需的服务信息(UDDI)</p></blockquote><p>② 服务注册表</p><blockquote><p>服务注册<br>服务位置<br>服务绑定</p></blockquote><p>③ 企业服务总线<br>定义：是由中间件技术实现并支持 SOA 的一组基础架构,其功能：</p><blockquote><p>支持异构环境中的服务、消息和基于事件的交互，并且具有适当的服务级别和可管理性<br>无侵入式<br>ESB与服务逻辑分离<br>提供服务代理和协议转换<br>提供可配置的消息转换翻译机制和基于消息内容的消息路由服务，传输消息到不同的目的地<br>提供安全和拥有者机制</p></blockquote><p>（8）微服务</p><p>① 定义：是一种架构模式，它提倡将单一应用程序划分成一组小的服务，服务之间互相协调、互相配合，为用户提供最终价值</p><p>② 优势：</p><blockquote><p>技术异构性：每个服务独立，都可以使用不同的技术<br>弹性：每个服务可使用自己的解决方案<br>扩展：扩展性强<br>简化部署：每个服务独立部署<br>与结织结构相匹配<br>可组织性：对外提供接口<br>可代替性优化：可方便重写服务或删除服务</p></blockquote><p>③ 劣势：</p><blockquote><p>复杂<br>成本高<br>部署麻烦<br>组织结构要求高<br>依赖测试<br>依赖管理</p></blockquote><p><br></p><h2 id="5-架构设计"><a href="#5-架构设计" class="headerlink" title="5.架构设计"></a>5.架构设计</h2><p>（1）演变交付生命周期<br> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/nine/ruankao9-2.png" height="50%" width="80%"></p><p>（2）属性驱动设计法（ADD）</p><p>① 定义：将分解过程建立在软件必须满足的质量属性之上</p><p>② 输入：功能需求（一般表示为用例）、限制条件和质量需求（一组特定于系统的质量场景）</p><p>③ 步骤：</p><blockquote><p>选择要分解的模块<br>根据如下步骤对模块进行求精：从具体的质量场景和功能需求集合中选择架构驱动因素-&gt;选择满足架构驱动因素的架构模式-&gt;实例化模块并根据用例分配功能-&gt;定义子模块的接口-&gt;验证用例和质量场景，并对其进行求精<br>对需要进一步分解的每个模块重复上述步骤</p></blockquote><p>（3）按架构组织开发团队</p><p>（4）开发骨架系统</p><p>（5）利用商用构件进行开发</p><p><br></p><h2 id="6-软件架构文档化"><a href="#6-软件架构文档化" class="headerlink" title="6.软件架构文档化"></a>6.软件架构文档化</h2><p>（1）两方面：</p><blockquote><p>过程：促使架构设计师进一步思考<br>结果：作为架构开发的成果，供项目关系人使用</p></blockquote><p>（2）文档使用者：架构的项目关系人</p><p>（3）文档编写规则</p><blockquote><p>从读者的角度编写文档<br>避免出现不必要的重复<br>避免歧义<br>使用标准结构<br>记录基本原理<br>使文档保持更新，但更新频率不要过高<br>针对目标的适宜性对文档进行评审</p></blockquote><p>（4）视图编档</p><p>定义：为架构设计师提供了进行软件架构编档的基本原则</p><p>7部分：</p><blockquote><p>视图概述：对系统主要元素和元素之间的关系进行概述（图形、文档、表格）<br>元素目录：对元素及其属性、关系及其属性、元素接口、元素行为进行详细描述<br>上下文图：用图形描述系统与环境的关系<br>可变性指南：架构的变化点<br>架构背景：提供理论依据<br>术语表：对每个术语进行说明<br>其他信息：不属于架构的信息</p></blockquote><p>（5）跨视图文档<br>应具有内容：</p><blockquote><p>有哪些内容，如何组织<br>架构描述<br>基本原理</p></blockquote><p>（6）UML</p><p>（7）软件架构重构</p><p>① 什么情况使用：系统已存在但不知文档与其架构</p><p>② 活动组成：</p><blockquote><p>信息提取<br>数据库构造<br>视图融合<br>重构</p></blockquote><p><br></p><h2 id="7-软件架构评估"><a href="#7-软件架构评估" class="headerlink" title="7.软件架构评估"></a>7.软件架构评估</h2><p>（1）评估方法</p><blockquote><p>基于调查问卷或检查表的方式<br>基于场景的方式:通过分析软件架构对场景的支持判断<br>基于度量的方式</p></blockquote><p>（2）权衡分析法（ATAM）<br>① 好处：能够揭示架构如何满足特定的质量需求（例如，性能和可修改性），而且还提供了分析这些质量需求之间交互作用的方法</p><p>② 目的：理解架构设计满足系统质量需求的结果</p><p>③ 产生结果：</p><blockquote><p>架构表述简洁<br>业务目标清晰<br>用场景集合捕获质量需求<br>架构决策到质量需求的映射<br>确定的敏感点和权衡点集合<br>有风险决策和无风险决策<br>风险主题的集合<br>产生一些附属结果<br>还产生一些无形结果</p></blockquote><p>④ 步骤：</p><blockquote><p>ATAM方法介绍<br>商业动机介绍<br>架构介绍<br>架构方法分类<br>生成质量属性效用树<br>分析架构方法<br>集体讨论并确定场景的优先级<br>分析架构方法<br>结果介绍</p></blockquote><p>（3）成本效益分析法</p><p>步骤：</p><blockquote><p>整理场景<br>对场景进行求精<br>确定场景的优先级<br>分配效用<br>形成相关的策略—场景—响应级别的对应关系<br>使用内插法确定“期望的”质量属性响应级别的效用<br>计算各架构策略的总收益<br>选择架构策略</p></blockquote><p><br></p><h2 id="8-构件及其复用"><a href="#8-构件及其复用" class="headerlink" title="8.构件及其复用"></a>8.构件及其复用</h2><p>（1）目的：提高企业开发效率</p><p>（2）商用构件标准规范</p><p>① CORBA</p><p>三层次：</p><blockquote><p>对象请求代理<br>公共对象服务<br>公共设施</p></blockquote><p>3项内容：</p><blockquote><p>抽象构件模型<br>构件容器结构<br>构件的配置和打包规范</p></blockquote><p>② J2EE</p><p>③ DNA 2000</p><p><br></p><h2 id="9-产品线的演化"><a href="#9-产品线的演化" class="headerlink" title="9.产品线的演化"></a>9.产品线的演化</h2><p><br></p><h2 id="10-软件架构图"><a href="#10-软件架构图" class="headerlink" title="10.软件架构图"></a>10.软件架构图</h2><p>（1）软件视图分类</p><blockquote><p>模块视图类型：为系统的主要模块实现单元编档<br>构件和连接件视图类型：为系统的构件和连接件执行单元编档<br>配视图类型：为软件的开发和执行环境之间的关系编档。<br> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/nine/ruankao9-3.png" height="65%" width="100%"></p></blockquote><p>（2）模块视图类型及其风格</p><p>① 视图类型<br> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/nine/ruankao9-8.png" height="40%" width="100%"></p><p>② 模块分解风格<br> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/nine/ruankao9-4.png" height="35%" width="100%"></p><p>③ 模块使用风格<br> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/nine/ruankao9-5.png" height="20%" width="100%"></p><p>④ 模块分层风格<br><img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/nine/ruankao9-6.png" height="30%" width="100%"></p><p>⑤ 泛化风格<br> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/nine/ruankao9-7.png" height="25%" width="100%"></p><p>（3）C&amp;C视图类型及其风格（略）</p><p>（4）分配视图类型及其风格（略）</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 软考架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
            <tag> 架构师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（软考架构师笔记八）系统的分析和设计</title>
      <link href="/2019/05/23/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E5%85%AB%EF%BC%89%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%88%86%E6%9E%90%E5%92%8C%E8%AE%BE%E8%AE%A1/"/>
      <url>/2019/05/23/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E5%85%AB%EF%BC%89%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%88%86%E6%9E%90%E5%92%8C%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>（软考架构师笔记八）系统的分析和设计<br><a id="more"></a></p><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><blockquote><p>系统目的：解决问题<br>定义问题：理解真实世界中的问题和用户的需要，并提出满足这些需要的解决方案的过程</p></blockquote><p><br></p><h2 id="2-问题分析"><a href="#2-问题分析" class="headerlink" title="2.问题分析"></a>2.问题分析</h2><p>（1）目标</p><blockquote><p>在开发之前对要解决的问题有一个更透彻的理解</p></blockquote><p>（2）实现步骤</p><blockquote><p>在问题定义上达成共识:按UP标准格式写出<br>理解问题的本质：可使用因果鱼骨图和帕累托图<br>确定项目干系人和用户：了解用户和其他相关的项目干系人<br>定义系统的边界：解决方案系统和现实世界之间的边界（上下文范围图、用例模型）<br>确定系统实现的约束：各种因素的存在，会对解决方案的选择造成一定的限制</p></blockquote><p><br></p><h2 id="3-问题定义"><a href="#3-问题定义" class="headerlink" title="3.问题定义"></a>3.问题定义</h2><p>（1）目标<br>① 定义：</p><blockquote><p>它是构建系统的原因，是最高层次的用户需求，是业务上的需要，而功能、性能需求则必须是以某种形式对该目标做出贡献。</p></blockquote><p>② 注意方面：</p><blockquote><p>优势<br>度量<br>合理性<br>可行性<br>可达成性</p></blockquote><p>（2）功能需求</p><p>① 定义： </p><blockquote><p>指明系统必须做的事情(为了完成他们某部分的工作而必须做的事情)</p></blockquote><p>② 二义性主要体现：</p><blockquote><p>同名异义的词<br>代词</p></blockquote><p>解决方法：一种有效的方法是大声地朗读出来，大家一起边听边进行讨论，这样可以不断地优化</p><p>（3）非功能需求</p><p>① 定义：</p><blockquote><p>系统必须具备的属性，不改变产品的功能，它是为工作赋予特征的</p></blockquote><p>② 特征：</p><blockquote><p>观感需求<br>易用性需求<br>性能需求<br>可操作性需求<br>可维护性和可移植性需求<br>安全性需求<br>文化和政策需求<br>法律需求</p></blockquote><p><br></p><h2 id="4-需求分析与软件设计"><a href="#4-需求分析与软件设计" class="headerlink" title="4.需求分析与软件设计"></a>4.需求分析与软件设计</h2><p>（1）需求分析的任务与过程（做什么）</p><p>① 定义：</p><blockquote><p>需求分析主要是确定待开发软件的功能、性能、数据、界面等要求</p></blockquote><p>② 步骤：</p><blockquote><p>获取当前系统的物理模型<br>抽象出当前系统的逻辑模型<br>建立目标系统的逻辑模型</p></blockquote><p>③ 4方面：</p><blockquote><p>问题识别：发现需求、描述需求<br>分析和综合：问题分析、整合方案<br>编制需求分析的文档：对已经确定的需求进行文档化描述，规格需求说明书<br>需求分析与评审：对功能的正确性、完整性和清晰性，以及其他需求给予评价</p></blockquote><p>（2）需求分类</p><p> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/eight/ruankao8-1.png" height="50%" width="80%"></p><blockquote><p>功能需求：系统必须完成的动作<br>非功能需求：产品必须具备的属性或品质<br>设计约束：对方案的约束说明</p></blockquote><blockquote><p>业务需求：反映组织机构或客户对系统、产品高层次的目标要求<br>用户需求：描述用户使用产品必须要完成什么任务，怎么完成的需求<br>系统需求：系统的角度来说明软件的需求</p></blockquote><p>（3）需求工程<br>① 定义：</p><blockquote><p>创建和维护系统需求文档所必需的一切活动的过程</p></blockquote><p>② 需求开发：需求捕获、需求分析、编写规格说明书和需求验证 4 个阶段</p><p>③ 需求管理：求基线、处理需求变更、需求跟踪等方面的工作</p><p>（4）需求分析方法</p><blockquote><p>结构化分析方法：</p><p>软系统方法：</p><p>面向对象分析方法（OOA）</p><p>面向问题域的分析（PDOA）</p></blockquote><p>（5）如何进行系统设计</p><blockquote><p>组件的独立性。审视自己设计的系统，是否做到了高内聚、低耦合？<br>例外的识别和处理。谁能保证系统使用者都精确按照使用说明书使用？<br>防错和容错。当网络中断、数据库崩溃这样的灾难性事件发生时，系统也跟着崩溃吗？</p></blockquote><p>（6）软件设计的任务与活动</p><p>① 软件设计步骤</p><blockquote><p>概要设计（高层设计）：将软件需求转化为数据结构和软件的系统结构<br>详细设计（底层设计）：对结构表示进行细化，得到详细的数据结构与算法</p></blockquote><p>② 主要的设计方法比较</p><blockquote><p>流的设计方法还包括 Jackson 方法和 Parnas 方法。但近年来，对象技术凭借其对数据的高效封装及良好的消息机制，实现了高内聚、低耦合的系统设计，成了现代软件设计的主流方法学</p></blockquote><p>（7）结构化分析与设计</p><p>① 定义：利用数据流图来帮助人们理解问题，对问题进行分析，其面向过程</p><p>② 结构化分析工具</p><blockquote><p>数据流图（DFD）<br>数据字典（DD）<br>结构化语言<br>判定表<br>判定树</p></blockquote><p>③ 结构化分析的工作步骤：</p><blockquote><p>研究“物质环境”<br>建立系统逻辑模型<br>划清人机界限</p></blockquote><p>④ 数据流图：</p><blockquote><p>DFD 是一种图形化的系统模型，它在一张图中展示信息系统的主要需求，即输入、输出、处理（过程）、数据存储</p></blockquote><blockquote><p>过程：也称为加工，一步步地执行指令，完成输入到输出的转换。<br>外部实体：也称为源/宿，系统之外的数据源或目的。<br>数据存储：也称为文件，存放数据的地方，一般是以文件、数据库等形式出现。<br>数据流：从一处到另一处的数据流向，如从输入或输出到一个过程的数据流。<br>实时连接：当过程执行时，外部实体与过程之间的来回通信。</p></blockquote><p> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/eight/ruankao8-2.png" height="40%" width="60%"></p><p>数据流图的层次</p><blockquote><p>先描述最高层次的数据流图，再分解成低层次、详细的数据流图，以此份接下去，直至详细清晰<br> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/eight/ruankao8-3.png" height="50%" width="80%"></p></blockquote><p>Context图（系统上下文范围关系图）</p><blockquote><p>描述最高层次的数据流图，整个待开发的系统表示为一个过程，将所有的外部实体和进出系统的数据流都画在一张图中<br> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/eight/ruankao8-4.png" height="30%" width="70%"></p></blockquote><p>逐级分解</p><blockquote><p>经过2步骤后可在进行分解<br> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/eight/ruankao8-5.png" height="40%" width="100%"></p></blockquote><p>如何画数据流图</p><blockquote><p>画系统的输入和输出<br>画数据流图的内部<br>为每一个数据流命名<br>为加工命名<br>不考虑初始化和终点，暂不考虑出错路径等细节，不画控制流和控制信息</p></blockquote><p>⑤ 细化数据流图组件</p><blockquote><p>结构化分析方法还引入了数据字典、结构化语言及决 策树、决策表等方法,能对数据流图中描述不够清晰的地方进行有效的补充</p></blockquote><blockquote><p>数据字典：一种很实用、有效的表达数据格式的手段，它是对所有与系统相关的 数据元素的一个有组织的列表和精确严格的定义，使得用户和系统分析员对于输入、输出、 存储成分和中间计算机有共同的理解</p></blockquote><p>（8）结构化设计</p><blockquote><p>结构化设计包括架构设计、接口设计、数据设计和过程设计等任务。它是一种面向数据流的设计方法，是以结构化分析阶段所产生的成果为基础，进一步自顶而下、逐步求精和模块化的过程</p></blockquote><p>① 概要设计与详细设计的主要任务</p><blockquote><p>概要设计主要任务：设计软件的结构、确定系统是由哪些模块组成，以及每个模块之间的关系</p></blockquote><blockquote><p>概要设计过程：复查基本系统模型、复查并精化数据流图、确定数据流图的信息流类型（包括交换流和事务流）、根据流类型分别实施变换分析或事务分析、根据软件设计原则对得到的软件结构图进一步优化</p></blockquote><p>–</p><blockquote><p>详细设计阶段主要任务：确定应该如何具体地实现所要求的系统，得出对目标系统的精确描述</p></blockquote><p>② 结构图 </p><p>基本组成:</p><blockquote><p>模块<br>调用（模块之间的调用关系）<br>数据（模块间传递及处理数据信息）</p></blockquote><p>对数据流图的划分:</p><blockquote><p>变换流：信息首先沿着输入通路进入系统，并将其转换为内部表示，然后通过变换中心（加工）的处理，再沿着输出转换为外部形式离开系统<br>事务流：信息首先沿着输入通路进入系统，事务中心根据输入信息的类型在若干个动作序列（活动流）中选择一个执行</p></blockquote><p>程序流程图和盒图</p><blockquote><p>程序流程图和盒图作用：用来描述程序的细节逻辑的<br>程序流程图特点：简单、直观、易学<br>程序流程图缺点：容易成为非结构化的流程图（盒图可解决）<br>盒图特点：功能域明确、无法任意转移控制、容易确定全局数据和局部数据的作用域、容易表示嵌套关系、可以表示模块的层次结构<br>盒图缺点：修改相对比较困难</p></blockquote><p>PAD 和 PDL：</p><blockquote><p>PAD 是问题分析图的缩写，它符合自顶向下、逐步求精的原则，也符合结构化程序设<br>计的思想，它最大的特点在于能够很方便地转换为程序语言的源程序代码。</p></blockquote><blockquote><p>PDL 则是语言描述工具的缩写，它和高级程序语言很相似，也包括数据说明部分和过程<br>部分，还可以带注解等成分，但它是不可执行的。PDL 是一种形式化语言，其控制结构的描<br>述是确定的，但内部的描述语法是不确定的。PDL 通常也被称为伪码。</p></blockquote><p>（9）模块设计<br>定义：</p><blockquote><p>将一个待开发的软件分解成为若干个小的简单部分——模块，每个模块可以独立地开发、测试,程序的结构清晰、易于测试与修改</p></blockquote><p>操作方式：</p><blockquote><p>将模块的接口和功能定义为其外部特性，将模块的局部数据和实现该模块的程序代码称为内部特性</p></blockquote><p>原则： </p><blockquote><p>信息隐蔽：每个程序的成分隐蔽或封装在一个单一的设计模块中，并且尽可能少地暴露其内部的处理<br>模块独立：每个模块完成一个相对独立的特定子功能，并且与其他模块之间的联系最简单</p></blockquote><p>内聚类型：<br> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/eight/ruankao8-6.png" height="30%" width="80%"></p><p>耦合类型<br> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/eight/ruankao8-7.png" height="20%" width="80%"></p><p><br></p><h2 id="5-面向对象的分析与设计"><a href="#5-面向对象的分析与设计" class="headerlink" title="5.面向对象的分析与设计"></a>5.面向对象的分析与设计</h2><p>（1）对象和类：</p><blockquote><p>对象：对象是系统中用来描述客观事物的一个实体<br>类：对具有相同属性和服务的一个或一组对象的抽象（实体类、控制类、边界类）</p></blockquote><p>（2）继承与泛化</p><blockquote><p>继承：说明特殊类（子类）与一般类（父类）的关系<br>泛化：说明一般类与特殊类的关系</p></blockquote><p>（3）多态与重载</p><blockquote><p>多台：一般类中定义的属性或服务被特殊类继承后，可以具有不同的数据类型或表现出不同的行为<br>重载与重写：多态的表现。</p></blockquote><p>（4）模板类</p><blockquote><p>一个类属类是关于一组类的一个特性抽象</p></blockquote><p>（5）消息和消息通信</p><blockquote><p>消息：向对象发出的服务请求<br>消息通信：面向对象方法学中的一个重要原则</p></blockquote><p>（6）面向对象分析（OOA）</p><p>① 定义：开发一系列模型，这些模型描述计算机软件，当它工作时以满足一组客户定义的需求</p><p>② OOA/OOD方法：</p><blockquote><p>包括主题、对象类、结构、属性和服务 5 个层次,需经过标识对象类、标识结构与关联（包括继承、聚合、组合、实例化等）、划分主题、定义属性、定义服务 5 个步骤来完成整个分析工作,它由人机交互部件、问题域部件、任务管理部件、数据管理部件 4 个部分组成</p></blockquote><p>③ Booch方法：</p><blockquote><p>开发过程是一个迭代的、渐进式的系统开发过程，它可以分为宏过程和微过程两类.<br>宏过程用于控制微过程，是覆盖几个月或几周所进行的活动，它包括负责建立核心需求的概念化，为所期望的行为建立模型的分析，建立架构的设计，形成实现的进化，以及管理软件交付使用的维护等 5 个主要活动<br>微过程:基本上代表了开发人员的日常活动</p></blockquote><p>③ OMT方法：</p><blockquote><p>对象建模方法，主要用于分析、系统设计和对象设计</p></blockquote><p>④ OOSE方法</p><blockquote><p>在 OMT 的基础上，对功能模型进行了补充,提出了用例的概念</p></blockquote><p>（7）统一建模语言（）UML<br>定义: </p><blockquote><p>系统的可视化建模语言,OMT、OOSE 和 Booch 方法中的建模语言和方法有机地融合在一起，是国际统一的软件建模标准。一种可视化语言,一种可用于详细描述的语言，一种构造语言，一种文档化语言。</p></blockquote><p>结构：</p><blockquote><p>构造块：构造块也就是基本的 UML 建模元素（事物）、关系和图<br>公共机制：指达到特定目标的公共 UML 方法，主要包括规格说明、修饰、公共分类和扩展机制<br>架构：逻辑、进程、实现、部署、用例视图</p></blockquote><p>用例图：<br> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/eight/ruankao8-8.png" height="50%" width="80%"></p><p>① 参与者：与系统接口的任何事物或人<br>② 用例：对系统行为的动态描述<br>③ 包含与扩展</p><p>类图和对象图</p><p><br></p><h2 id="6-用户界面设计"><a href="#6-用户界面设计" class="headerlink" title="6.用户界面设计"></a>6.用户界面设计</h2><p>（1）设计原则：</p><blockquote><p>置用户于控制之下<br>减少用户的记忆负担<br>保持界面的一致<br>用户熟悉<br>意外最小化<br>可恢复<br>用户指南<br>用户差异性</p></blockquote><p>（2）设计过程<br> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/eight/ruankao8-10.png" height="30%" width="50%"></p><blockquote><p>用户、任务和环境分析：着重于分析将和系统交互的用户的特点<br>界面设计:为每个目标或意图制定特定的动作序列，按在界面上执行的方式对动作序列进行规约<br>实现：根据界面设计进行实现<br>界面确认：进行一些定性和定量的数据收集，以进行界面的评估，以调整界面的设计</p></blockquote><p>（3）工作流设计</p><blockquote><p>工作流：工作流是一类能够完全或者部分自动执行的经营过程，根据一系列过程规则、文档、信息或任务在不同的执行者之间传递、执行</p></blockquote><blockquote><p>流程定义：定义过程运行中的活动和所涉及的各种信息<br>流程实例（工作）：一个流程定义的运行实例<br>工作流管理系统：这个程序存储流程的定义，按照所使用的流程定义来触发流程状态的改变，推动流程的运转</p></blockquote><blockquote><p>流程定义工具：这个软件和工作流管理系统的关系就如同数据库设计工具和数据库管理系统的关系一样。<br>参与者：参加工作的主体<br>活动：是流程定义中的一个元素<br>活动所有者：参与者之一<br>工作所有者：是有权整体控制流程实例执行过程的参与<br>工作项：流程实例中活动的参与者将要执行的工作</p></blockquote><p>（4）工作流管理系统</p><blockquote><p>定义：是一种“在工作流形式化表示的驱动下，通过软件的执行而完成工作流定义、管理及执行的系统”<br>目的：对业务过程中各活动发生的先后次序及与活动相关的相应人力或信息资源的调用进行管理，而实现业务过程的自动化</p></blockquote><p>6个基本模块参考模型</p><blockquote><p>流程定义工具<br>工作流执行服务<br>其他工作流执行服务<br>客户应用程序<br>被调用应用程序<br>管理和监控工具</p></blockquote><p><br></p><h2 id="7-简单分布式计算机应用系统的设计"><a href="#7-简单分布式计算机应用系统的设计" class="headerlink" title="7.简单分布式计算机应用系统的设计"></a>7.简单分布式计算机应用系统的设计</h2><blockquote><p>基于实例的协作<br>基于服务的协作</p></blockquote><p><br></p><h2 id="8-系统运行环境的集成与设计"><a href="#8-系统运行环境的集成与设计" class="headerlink" title="8.系统运行环境的集成与设计"></a>8.系统运行环境的集成与设计</h2><p>（1）集中式系统</p><blockquote><p>单计算机结构<br>集群机构<br>多计算机结构</p></blockquote><p>（2）分布式系统<br>（3）C/S 结构<br>（4）多层结构<br>（5）Internet、Intranet 和 Extranet</p><p><br></p><h2 id="7-系统过渡计划"><a href="#7-系统过渡计划" class="headerlink" title="7.系统过渡计划"></a>7.系统过渡计划</h2><p>（1）遇到问题</p><blockquote><p>开销大<br>风险大<br>遇到问题的措施<br>不利因素<br>人员培训.</p></blockquote><p>（2）过渡方案：</p><blockquote><p>直接过渡：当新系统运行时，立即关闭原来的系统<br>并行过渡：，让新系统和旧系统在一段时间里同时运行，通过这样的旧系统作为新系统的备份，可以大大降低系统过渡的风险</p></blockquote><blockquote><p>阶段过渡:系统复杂无法一次过度，设计一系列步骤和过程来完成整个系统的过渡</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 软考架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
            <tag> 架构师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（软考架构师笔记七）系统规划</title>
      <link href="/2019/05/23/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E4%B8%83%EF%BC%89%E7%B3%BB%E7%BB%9F%E8%A7%84%E5%88%92/"/>
      <url>/2019/05/23/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E4%B8%83%EF%BC%89%E7%B3%BB%E7%BB%9F%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p>（软考架构师笔记七）系统规划<br><a id="more"></a></p><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><blockquote><p>用于描述从项目提出、选择到确立的过程，包括系统项目的提出与可行性分析，系统方案的制订、评价和改进，新旧系统的分析和比较，以及现有软件、硬件和数据资源的有效利用等问题</p></blockquote><p><br><br>2.项目提出与选择<br>（1）定义：</p><blockquote><p>根据这些动机，提出和确定信息系统的工作范围，确定项目立项，提出系统选择方案，给出选择结果</p></blockquote><p>（2）立项动机：</p><blockquote><p>进行基础研究并获取技术<br>进行应用研发并获得产品<br>提供技术服务<br>信息技术产品的使用者</p></blockquote><p>（3）项目选择方向<br>① 选择有核心价值的产品/项目或开发方向</p><blockquote><p>生产制造业：面向订单的生产（ERP,MIS）<br>金融行业：数据业务系统与风险评控系统<br>教育行业：与教育有关的系统，如电子图书馆</p></blockquote><p>② 评估项目风险、收益和代价</p><blockquote><p>在判断出一个潜在的软件项目后，还应评估项目实施的风险、收益和维护付出的代价</p></blockquote><p>③ 评估项目的多种实施方式</p><blockquote><p>项目决定实施后，由项目的负责人和企业中高层经理进行决策，决策结果决定了项目的实施优先级及具体的实施方式</p></blockquote><p>④ 平衡地选择适合的方案<br>问题：</p><blockquote><p>新技术风险大<br>无快速开发平台的产品时间开销大<br>不考虑业务扩展的情况下修改需求会导致之前实施的受阻<br>价格低的产品往往不尽人意</p></blockquote><p> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/seven/ruankao7-1.png" height="40%" width="60%"></p><p>（4）项目选择结果<br>① 最终结果以产品/项目建议书形式体现，场景：</p><blockquote><p>在投标项目中，产品/项目建议书通常是乙方提交给甲方竞标方案的一部分<br>企业单位在确立了要开发某类型产品后，对该产品进行多角度的评估，最终项目立项人向上级提交供决策的建议报告的主要内容就是“产品/项目建议书”</p></blockquote><p>② 项目建议书包含：</p><blockquote><p>用户单位、项目或产品的立项背景、需求来源和目标性的介绍；<br>用户的内外部环境、组织机构、现有的 IT 设施情况等；<br>用户的业务模型和业务规划；<br>预期要建设的技术系统在用户业务中的位置和作用；<br>信息化后的用户业务模型、软件应用方式、相关的部署环境、运行规则、管理规范等；<br>为实现信息化业务模型，技术系统的产品需求定义（功能、性能、约束）和部署方式等；<br>产品或项目的技术框架；<br>项目的要点、技术难点、主要实施障碍等；<br>项目或产品的可行性研究结果；<br>项目可选择的实施方式、组织方式、沟通和协调机制等；<br>项目的资源范围和预算（人、财、物、时间等）；<br>项目的成本/收益分析；</p></blockquote><blockquote><p>项目风险及影响评估；<br>项目进度计划；<br>项目质量计划；<br>项目过渡期资金的获得方式、财务计划；<br>产品或项目的商务模式、盈利模式论述；<br>同类产品或公司的市场调查结果，以及竞争性比较；<br>企业成功案例、资质等；<br>商务条款或供应商/客户合同；</p></blockquote><p><br></p><h2 id="3-可行性研究与效益分析"><a href="#3-可行性研究与效益分析" class="headerlink" title="3.可行性研究与效益分析"></a>3.可行性研究与效益分析</h2><p>（1）研究内容：</p><blockquote><p>经济可行性：收益分析<br>技术可行性：技术、资源、目标<br>法律可行性<br>执行可行性（操作可行性）：评估预期的软件系统在真实环境中能够被应用的程度和实施过程中障碍<br>方案的选择</p></blockquote><p>（2）效益分析<br>① 目的：</p><blockquote><p>对项目开发目标的成本及可度量的项目现金收入和无形收益进行一次专门化的评估</p></blockquote><p>② 项目成本：</p><blockquote><p>基础建设支出<br>一次性支出：如咨询费、管理费</p></blockquote><p>③ 项目收益：</p><blockquote><p>一次性收益：支出的减少，价值的提升<br>非一次性收益：按时间段获取的收益或按时间端减少的支出<br>不可定量的收益：无法直接用人民币表示的收益（如公司形象提升）</p></blockquote><p>④ 效益分析指标：</p><blockquote><p>收益/投资比：软件项目实施后整个系统生命期的收益/投资比值<br>投资回收周期：收益的累计数开始超过支出的累计数的时间<br>敏感性分析：系统生命期长度、系统的工作负荷量、工作负荷的类型、处理速度、设备和软件的配置等</p></blockquote><p>（3）可行性分析报告<br>其报告必具备的内容：</p><blockquote><p>项目背景：包括问题描述、实现环境和限制条件<br>管理概要和建议：包括重要的研究结果、说明、建议和影响<br>候选方案：包括候选系统的配置和最终方案的选择标准<br>系统描述：包括系统工作范围的简要说明和被分配系统元素的可行性<br>经济可行性（成本/效益分析）：包括经费概算和预期的经济效益<br>技术可行性（技术风险评价）：包括技术实力、已有工作基础和设备条件<br>法律可行性：包括系统开发可能导致的侵权，违法和责任等<br>用户使用可行性：包括用户单位的行政管理，工作制度和使用人员的素质<br>其他与项目有关的问题：例如，其他方案介绍和未来可能的变化</p></blockquote><p><br></p><h2 id="4-方案的制订和改进"><a href="#4-方案的制订和改进" class="headerlink" title="4.方案的制订和改进"></a>4.方案的制订和改进</h2><p>（1）系统方案制定的主要内容</p><p>① 确定软件架构：</p><blockquote><p>分析模型的结构<br>一些对应于系统目标的最基本、最重要的实现要素<br>特性和要点的解释</p></blockquote><p>② 关键性要素和实现手段关键性的实现：</p><blockquote><p>关键的用例、最主要的控制类、功能和服务的首要组织方式（例如网站首页）；<br>对象的组织模式；<br>常用和最关键的实现算法模型。关键性的实现手段通常包括：<br>选定基础计算平台，如操作系统、数据库、Web 服务器、中间件平台等；<br>选定开发工具和开发环境，如计算机语言、构件库、工具软件等</p></blockquote><p>③ 归结目标到最适合的计算体系</p><blockquote><p>表示层：用户的界面部分,前端界面<br>事务逻辑层：业务层，接受和返回数据给用户<br>数据服务层：数据持久层</p></blockquote><p><br></p><h2 id="5-新旧系统的分析和比较"><a href="#5-新旧系统的分析和比较" class="headerlink" title="5.新旧系统的分析和比较"></a>5.新旧系统的分析和比较</h2><p>（1）遗留系统（老系统）特点：</p><blockquote><p>能正常工作，但不满足要求<br>系统性能落后<br>技术过时<br>大型系统已融入企业业务中，维护困难<br>无文档，未使用现在工程方法开发，难理解</p></blockquote><p>（2）遗留系统评价方法：<br>① 目的：为了获得对遗留系统更好的理解</p><p>② 评价方法组成</p><p> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/seven/ruankao7-2.png" height="40%" width="60%"></p><blockquote><p>启动评价：遗留系统是否还是重要的；企业的目标是什么；需求是什么；系统寿命多久；系统技术如何；企业是否同意改变；企业是否能承受改变。</p></blockquote><blockquote><p>商业价值评价：概要级评价（咨询、评级问卷、进行评价）和详细级别评价</p></blockquote><p>③ 外部环境：</p><blockquote><p>硬件<br>支撑软件<br>企业基础设施</p></blockquote><p>④ 评价级别</p><blockquote><p>系统级。把整个系统看作是不可分的原子，评价时不考虑系统的任何部分<br>部件级。关注系统的每个子系统，考虑每个子系统的特征，包括复杂性、数据、文档、外部依赖性、合法性、维护记录、大小、安全性等</p></blockquote><p>⑤ 分析评价结果评价活动将产生硬件、支撑软件、企业基础设施和应用软件的特征值矩阵，这些特征值体现了遗留系统当前的技术因素，其加权平均值代表了系统的技术水平。</p><blockquote><p>OR=(P1ORH+P2ORS+P3OAF+ P4ORA)/4</p></blockquote><p>ORH 是硬件的评价值，ORS 是支撑软件的评价值，ORF 是企业基础设施的评价值，<br>ORA 是应用软件的评价值，Pi (1 i  4) 分别是它们的权系数，即第 i 个评价值对遗留系<br>统的影响因子</p><p>评价结果：<br> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/seven/ruankao7-3.png" height="50%" width="60%"></p><p>（3）遗留系统的演化策略（根据上图判断）<br>① 淘汰策略：第三象区<br>② 继承策略：第四象区<br>③ 改造策略：第一象区<br>④ 集成策略：第二象区</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 软考架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
            <tag> 架构师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（软考架构师笔记六）开发方法</title>
      <link href="/2019/05/22/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E5%85%AD%EF%BC%89%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/"/>
      <url>/2019/05/22/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E5%85%AD%EF%BC%89%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>（软考架构师笔记六）开发方法<br><a id="more"></a></p><h2 id="1-软件生命周期"><a href="#1-软件生命周期" class="headerlink" title="1.软件生命周期"></a>1.软件生命周期</h2><p>（1）定义：软件自开始构思与研发到不再使用而消亡的过程</p><p>（2）生命周期阶段：</p><blockquote><p>可行性研究与计划<br>需求分析<br>概要设计<br>详细设计<br>实现<br>集成测试<br>确认测试<br>使用和维护</p></blockquote><h2 id="2-软件开发模型"><a href="#2-软件开发模型" class="headerlink" title="2.软件开发模型"></a>2.软件开发模型</h2><p>（1）瀑布模型<br>定义：</p><blockquote><p>软件开发是一个阶段化的精确的过程,要经过需求分析、总体设计、详细设计、编码、调试、集成测试和系统测试阶段才能够被准确地实现,在软件开发中当在后续阶段发现缺陷的时候，可以把这个缺陷反馈到上一阶段进行修正,如图：</p></blockquote><p> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/six/ruankao6-1.png" height="50%" width="60%"></p><p>缺陷：当软件需求不明确或变动剧烈时，成后期修改代价太大，难以控制开发的风险。</p><p>（2）瀑布V模型</p><blockquote><p>定义：同标准瀑布模型，但除总体设计外，需求分析还有一条虚线指向系统测试，需求分析的结果将作为系统测试的准则，即需求分析阶段也将产生同软件需求一致的系统测试<br> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/six/ruankao6-2.png" height="50%" width="80%"></p></blockquote><p>缺点：</p><blockquote><p>需求分析阶有偏差，对后续影响大<br>每阶段依赖上阶段，如后续变化，每个阶段都将改变<br>瀑布模型只有在所有阶段完成后客户才能看到结果，时间久<br>文档驱动型的瀑布模型文档冗余，大多对客户无用</p></blockquote><p>（3）演化模型</p><blockquote><p>一般情况下，一个演化模型可以看做若干次瀑布模型的迭代，当完成一个瀑布模型后，重新进入下一个迭代周期，软件在这样的迭代过程中得以演化、完善。根据不同的迭代特点，演化模型可以演变为螺旋模型、增量模型和原型法开发</p></blockquote><p>（4）螺旋模型<br>定义：</p><blockquote><p>结合了瀑布模型和演化模型，每一周期都包括需求定义、风险分析、工程实现和评审 4 个阶段，需进行风险分析，其把项目分为众多小项目，每个小项目都有风险评估</p></blockquote><p> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/six/ruankao6-3.png" height="40%" width="50%"></p><p>缺点：</p><blockquote><p>需要丰富的风险评估经验<br>迭代次数会增加成本和时间</p></blockquote><p>（5）增量模型<br>定义：</p><blockquote><p>演化模型的另一表现形式，适用于技术架构成熟、风险较低的场景，可以有效的缩短周期，保证用户对系统的可见性</p></blockquote><p>策略： </p><blockquote><p>增量发布：分析系统，划分版本，后版本为前版本的扩充（每个版完整可用，版本之间增量均匀）。<br>原型法：目的是获得精确的用户需求，或验证架构的可用性，每次迭代都是完整周期，始于技术不明确的场景</p></blockquote><p>（6）构件组装模型<br>定义：</p><blockquote><p>分析功能，划分结构，完整单个构件</p></blockquote><p> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/six/ruankao6-4.png" height="10%" width="80%"></p><p>优点：</p><blockquote><p>易扩展<br>可重用<br>构件独立而灵活</p></blockquote><p>缺点：</p><blockquote><p>需经验丰富<br>对其他方面的需求需让步<br>需研发人员技术强<br>第三方构件开发人员难以控制<br><br></p></blockquote><h2 id="2-统一过程（UP）"><a href="#2-统一过程（UP）" class="headerlink" title="2.统一过程（UP）"></a>2.统一过程（UP）</h2><p>（1）定义</p><blockquote><p>由Rational研发的软件迭代过程，提供完整开发过程解决方案，降低开发风险</p></blockquote><p>（2）UP的二维模型</p><blockquote><p>时间主线是横轴，开发经过初始、细化、构建和交付这4阶段<br>描述不同阶段的主要工作在纵轴</p></blockquote><p> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/six/ruankao6-5.png" height="55%" width="80%"></p><p>横轴阶段：</p><blockquote><p>初始阶段：业务建模和需求（2次细化）<br>细化阶段：分析设计<br>构建阶段：实施和测试（3阶段构建）<br>交付（转移）阶段：重构、修改、测试和部署</p></blockquote><p>每个阶段可能执行其他阶段的工作，与瀑布模型不同，不严格</p><p>纵轴阶段（9个核心工作流）： </p><blockquote><p>业务建模、需求、分析设计、实施、测试、部署、配置与变更管理、项目管理、环境</p></blockquote><p>（3）UP的生命周期</p><blockquote><p>目标里程碑：明确软件系统的目标和范围<br>架构里程碑：确定稳定的系统架构<br>能力里程碑：系统足够稳定和成熟并完成 Alpha 测试<br>发布里程碑：完成系统测试、完成系统发布和用户培训</p></blockquote><p>（4）UP特点</p><blockquote><p>给出了生命周期与迭代指南<br>不同迭代方式的up可以演变模型<br>风险控制更简单<br>UP为重载过程<br>可对UP裁剪，适应各种团队与软件</p></blockquote><p>（5）UP如何使用</p><blockquote><p>建立系统架构模型<br>同需求人员和项目管理人员密切协作<br>细化软件架构<br>保持架构概念完整性<br><br></p></blockquote><h2 id="3-敏捷方法"><a href="#3-敏捷方法" class="headerlink" title="3.敏捷方法"></a>3.敏捷方法</h2><blockquote><p>快而持续的交付任务<br>变化能力强<br>时间周期短<br>业务与开发人员密切联系<br>开发环境好<br>沟通方便<br>进度<br>可持续开发<br>良好的技术与设计<br>工作量少<br>架构优秀<br>高效的自我总结<br><br></p></blockquote><h3 id="3-1-极限编程（XP）"><a href="#3-1-极限编程（XP）" class="headerlink" title="3.1.极限编程（XP）"></a>3.1.极限编程（XP）</h3><p>（1）特点</p><blockquote><p>反馈信息周期短<br>迭代的计划编制<br>依赖自动程序捕获缺陷<br>依赖口头交流<br>倡导演化设计<br>依赖紧密协作<br>开发人员短期盈利，项目长期盈利平衡</p></blockquote><p>（2）四大价值观</p><blockquote><p>沟通<br>简单<br>反馈<br>勇气<br>隐藏属性：尊重</p></blockquote><p>（3）十二个最佳实践</p><blockquote><p>计划游戏<br>小型发布<br>隐喻<br>简单设计<br>测试先行<br>重构<br>结对编程<br>集体代码所有制<br>持续集成<br>每周工作40h<br>现场客户<br>编码标准<br><br></p></blockquote><h3 id="3-2-特征驱动开发-FDD"><a href="#3-2-特征驱动开发-FDD" class="headerlink" title="3.2.特征驱动开发(FDD)"></a>3.2.特征驱动开发(FDD)</h3><p>（1）定义：</p><blockquote><p>是一个迭代的开发模型。FDD 的每一步都强调质量，不断地交付可运行的软件，并以很小的开发提供精确的项目进度报告和状态信息.</p></blockquote><p>（2）角色定义<br>人：</p><blockquote><p>项目经理<br>首席架构师<br>开发经理<br>主程序员<br>程序员<br>领域专家</p></blockquote><p>核心过程</p><blockquote><p>开发整体对象模型<br>构造特征列表<br>计划特征开发<br>特征设计<br>特征构建</p></blockquote><p>实践：</p><blockquote><p>领域对象建模、根据特征进行开发、类的个体所有、组成特征小组、审查、定期构造、配置管理、结果的可见性<br><br></p></blockquote><h3 id="3-3-Scrum"><a href="#3-3-Scrum" class="headerlink" title="3.3.Scrum"></a>3.3.Scrum</h3><p>（1）定义：</p><blockquote><p>用于开发和维持复杂产品的框架，是一个增量的、迭代的开发过程，整个开发周期划分许多个短的迭代周期（Sprint，2-4周），而在一个周期中选择最高优先级的先开发，Sprint会议经过讨论、分析和估算得到相应的任务列表，我们称它为 Sprint backlog。</p></blockquote><p>（2）五个活动</p><blockquote><p>产品待办事项列表梳理<br>Sprint计划会议<br>每日Sprint会议<br>Sprint评审会议<br>Sprint回顾会议</p></blockquote><p>（3）Scrum的5大价值观</p><blockquote><p>承诺：愿意对目标做出承诺。<br>专注：把你的心思和能力都用到你承诺的工作上去。<br>开放：Scrum把项目中的一切开放给每个人看。<br>尊重：每个人都有他独特的背景和经验。<br>勇气：有勇气做出承诺，履行承诺，接受别人的尊重。<br><br></p></blockquote><h3 id="3-4-水晶方法"><a href="#3-4-水晶方法" class="headerlink" title="3.4.水晶方法"></a>3.4.水晶方法</h3><p>（1）定义：</p><blockquote><p>由 Alistair Cockburn 和 Jim Highsmith 建立的敏捷方法系列，其目的是发展一种提倡“机动性的”方法，包含具有共性的核心元素，每个都含有独特的角色、过程模式、工作产品和实践。使用频度较高的是 Crystal Clear——透明水晶方法（适合小团队&lt;6）</p></blockquote><p>（2）透明水晶方法七大体系特征</p><blockquote><p>经常交付<br>反思改进<br>渗透式交流<br>个人安全<br>焦点<br>与专家用户建立方便的联系<br>配有自动测试、配置管理和经常集成功能的技术环境<br><br></p></blockquote><h3 id="3-5-其他敏捷方法"><a href="#3-5-其他敏捷方法" class="headerlink" title="3.5.其他敏捷方法"></a>3.5.其他敏捷方法</h3><blockquote><p>开放式源码：开放式源码指的是开放源码界所用的一种运作方式(查错排障（debug）的高度并行性)</p></blockquote><blockquote><p>ASD 方法：核心是三个非线性的、重叠的开发阶段：猜测、合作与学习<br><br></p></blockquote><h2 id="4-软件重用"><a href="#4-软件重用" class="headerlink" title="4.软件重用"></a>4.软件重用</h2><p>（1）定义：</p><blockquote><p>利用已经存在的软件元素建立新的软件系统，这其中的软件元素既可以是软件产品、源程序，也可以是文档、设计思想甚至是领域知识。软件重用可以直接提高软件的开发效率、降低软件的开发成本、缩短软件的开发周期、提高软件质量</p></blockquote><p>（2）常见的软件重用形式</p><blockquote><p>源代码重用<br>架构重用<br>应用框架的重用<br>业务建模重用<br>文档及过程的重用<br>软构建重用<br>软件服务重用</p></blockquote><p>（3）构件技术<br>定义：</p><blockquote><p>构件又称为组件，是一个自包容、可复用的程序集</p></blockquote><p>两特征</p><blockquote><p>自包容：构件的本身是一个功能完整的独立体，构件内部与外部的功能界限清晰明确，可以独立配置与使用<br>可重用：构件的特点，也是构件出现的目的</p></blockquote><h2 id="5-基于架构的软件设计-ABSD"><a href="#5-基于架构的软件设计-ABSD" class="headerlink" title="5.基于架构的软件设计(ABSD)"></a>5.基于架构的软件设计(ABSD)</h2><p>（1）其为架构驱动方法，三基础：</p><blockquote><p>功能的分解<br>选择架构风格来实现质量和业务需求<br>软件模板的使用</p></blockquote><p>软件模板:是一个特殊类型的软件元素，包括描述所有这种类型的元素在共享服务和底层构造的基础上如何进行交互.其还包含该类型的所有元素功能。</p><p>（2）方法与生命周期</p><p> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/six/ruankao6-6.png" height="70%" width="40%"></p><p>ABSD 方法的输入组成：</p><blockquote><p>抽象功能需求，包括变化的需求和通用的需求<br>用例（实际功能需求）<br>抽象的质量和业务需求<br>质量因素（实际质量和业务需求）<br>架构选项<br>约束</p></blockquote><p>ABSD 方法的输入组成：</p><blockquote><p>抽象功能需求<br>用例<br>抽象的质量和业务需求<br>架构选项<br>质量场景<br>约束</p></blockquote><p>（3）基于架构的软件开发模型（ABSDM）</p><p> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/six/ruankao6-7.png" height="60%" width="50%"></p><p>过程：<br>① 架构需求：用户对目标软件系统在功能、行为、性能、设计约束等方面的期望<br> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/six/ruankao6-8.png" height="50%" width="50%"></p><blockquote><p>需求获取<br>表示构件：生成类图-&gt;对类进行分组-&gt;把类打包成构件<br>需求评审</p></blockquote><p>② 架构设计：激发和调整设计决策，不同的视图被用来表达与质量目标有关的信息（迭代过程）</p><p> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/six/ruankao6-9.png" height="40%" width="40%"></p><blockquote><p>提出软件架构模型<br>把已标识的构件映射到软件架构中<br>分析构件之间的相互作用<br>产生软件架构<br>设计评审</p></blockquote><p>③ 架构文档化：主要输出结果是架构需求规格说明和测试架构需求的质量设计说明书这两个文档</p><p>④ 架构复审</p><blockquote><p>目的是标识潜在的风险，以及早发现架构设计中的缺陷和错误，包括架构能否满足需求、质量需求是否在设计中得到体现、层次是否清晰、构件的划分是否合理、文档表达是否明确、构件的设计是否满足功能与性能的要求</p></blockquote><p>⑤ 架构实现：</p><blockquote><p>用实体来显示出一个软件架构，即要符合架构所描述的结构性设计决策，分割成规定的构件，按规定方式互相交互。</p></blockquote><p> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/six/ruankao6-10.png" height="50%" width="50%"></p><p>⑥ 架构演化：按需求变动修改</p><p> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/six/ruankao6-11.png" height="50%" width="50%"></p><blockquote><p>对需求变动归类<br>在原架构修改之前，制定修改计划<br>开发人员决定是否增删改构件<br>更新构件后，相互关系需更新<br>完成构件合成<br>技术评审<br>演化的架构修改添加到原架构上</p></blockquote><p><br></p><h2 id="6-形式化方法"><a href="#6-形式化方法" class="headerlink" title="6.形式化方法"></a>6.形式化方法</h2><p>（1）定义：</p><blockquote><p>形式化方法：采用严格的数学方法，使用形式化规约语言来精确定义软件系统</p><p>非形式化方法：通过自然语言、图形或表格描述软件系统的行为和特性，然后基于这些描述进行设计和开发，而形式化开发则是基于数学的方式描述、开发和验证系统</p></blockquote><p>（2）形式化方法</p><blockquote><p>形式化描述（形式化规约）：用形式化语言进行描绘，建立软件需求和特性，即解决软件“做什么”的问题，形式化描述主要可以分为两类，一类是通过建立计算模型来描述系统的行为特性，另一类则通过定义系统必须满足的一些属性来描述系统</p><p>基于形式化描述的形式化验证：验证已有的程序是否满足形式化描述的定义</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 软考架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
            <tag> 架构师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（软考架构师笔记五）系统性能评价</title>
      <link href="/2019/05/22/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E4%BA%94%EF%BC%89%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%AF%84%E4%BB%B7/"/>
      <url>/2019/05/22/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E4%BA%94%EF%BC%89%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%AF%84%E4%BB%B7/</url>
      
        <content type="html"><![CDATA[<p>（软考架构师笔记五）系统性能评价<br><a id="more"></a></p><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><p>系统性能是一个系统提供给用户的众多性能指标的混合体，它既包括硬件性能，也包括软件性能</p><blockquote><p>性能指标：描述当前流行系统主要涉及的性能指标<br>性能计算：描述当前使用到的主要性能指标的计算方法<br>性能设计：描述如何对现有系统进行性能上的调整优化，并介绍几个已经成熟的设计规则和解决方案<br>性能评估：描述如何对当前取得的性能指标进行评价和改进。<br><br></p></blockquote><h2 id="2-性能指标"><a href="#2-性能指标" class="headerlink" title="2.性能指标"></a>2.性能指标</h2><p>（1）定义：</p><blockquote><p>硬件：计算机、各种通信交换设备、以及其他网络硬件<br>软件：操作系统、各种通信协议、各种参与到通信中的应用程序</p></blockquote><p>（2）计算机指标</p><blockquote><p>时钟频率（主频）：其越高cpu工作越快<br>高速缓存：<br>运算速度<br>运算精度<br>内存的存储容量<br>存储器的存取周期<br>数据处理速率<br>响应时间<br>RASIS 特性：可靠性、可用性、可维护性、完整性、安全性<br>平均故障响应时间<br>兼容性</p></blockquote><p>（3）网络的性能指标</p><blockquote><p>设备级性能指标：吞吐量、延迟、丢包率和转发速度<br>网络级性能指标：可达性、网络系统的吞吐量、传输速率、信道利用率、信道容量、带宽利用率、丢包率、平均传输延迟、平均延迟抖动、延迟/吞吐量的关系、延迟抖动/吞吐量的关系、丢包率/吞吐量的关系</p></blockquote><blockquote><p>应用级性能指标：网络对语言应用的支持程度、网络对视频应用的支持程度、延迟/服务质量的关系、丢包率/服务质量的关系、延迟抖动/服务质量的关系</p></blockquote><blockquote><p>用户级：可靠性、可用性<br>吞吐量：设备能够接受的最大速率</p></blockquote><p>（4）操作系统吸能指标</p><blockquote><p>系统的可靠性<br>系统的吞吐量<br>系统响应时间<br>系统资源利用率<br>可移植性</p></blockquote><p>（5）数据库性能指标</p><blockquote><p>数据库和数据库管理系统的性能指标包括数据库的大小、单个数据库文件的大小、数据库中表的数量、单个表的大小、表中允许的记录（行）数量、单个记录（行）的大小、表上所允许的索引数量、数据库所允许的索引数量、最大并发事务处理能力、负载均衡能力、最大连接数</p></blockquote><p>（6）Web服务器性能指标</p><blockquote><p>最大并发连接数、响应延迟、吞吐量（每秒处理的请求数）、成功请求数、失败请求数、每秒点击次数、每秒成功点击次数、每秒失败点击次数、尝试连接数、用户连接数等<br><br></p></blockquote><h2 id="3-性能计算"><a href="#3-性能计算" class="headerlink" title="3.性能计算"></a>3.性能计算</h2><p>（1）主要方法：</p><blockquote><p>定义法:定义直接获取其理想数据<br>公式法:根据基本定义所衍生出的复合性能指标的计算<br>程序检测法:通过实际的测试来得到其实际值<br>仪器检测法:与程序相同</p></blockquote><p>（2）MIPS计算（单字长定点指令平均执行速度）<br>公式：Fz 为处理机的工作主频，CPI为每条指令所需的平均时钟周期数，IPC 为每个时钟周期平均执行的指令条数<br> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/five/ruankao5-1.png" height="10%" width="50%"></p><p>（3）峰值计算<br>定义：指计算机每秒钟能完成的浮点计算最大次数。包括理论浮点峰值和实测浮点峰值</p><p>公式：理论浮点峰值 = CPU 主频′CPU 每个时钟周期执行浮点运算的次数′系统中 CPU 数</p><p>（4）等效指令速度</p><blockquote><p>静态指令使用频度指的是在程序中直接统计的计算机速度<br>动态指令使用频度指的是在程序执行过程中统计的指令速度。<br><br></p></blockquote><h2 id="4-性能设计"><a href="#4-性能设计" class="headerlink" title="4.性能设计"></a>4.性能设计</h2><p>（1）阿姆达尔解决方案<br>定义：</p><blockquote><p>系统中对某部件采用某种更快的执行方式，所获得的系统性能的改变程度，取决于这种方式被使用的频率，或所占总执行时间的比例</p></blockquote><p>加速比=不使用加强部件完成整个任务的时间/使用增强部件</p><p>加速比决定因素</p><blockquote><p>能被改进并增强的部分在总执行时间中所占的比例,称之为增强比例，它永远小于等于 1<br>通过增强的执行方式所取得的改进<br>执行时间等于未改进部分的执行时间加上改进部分的执行时间</p></blockquote><p>（2）负载均衡<br>定义：</p><blockquote><p>由多台服务器以对称的方式组成一个服务器集合，每台服务器都具有等价的地位，都可以单独对外提供服务而无须其他服务器的辅助,通过某种负载分担技术，将外部发送来的请求均匀地分配到对称结构中的某一台服务器上，而接收到请求的服务器独立地回应客户的请求</p></blockquote><p>类型：</p><blockquote><p>基于特定服务器软件的负载均衡<br>基于DNS的负载均衡<br>反向代理负载均衡<br>基于 NAT（网络地址转换）的负载均衡技术<br>扩展的负载均衡技术</p></blockquote><p>服务器负载均衡：</p><blockquote><p>目的：提高服务器的整体处理能力，并提高可靠性、可用性和可维护性，最终目的是加快服务器的响应速度，从而提高用户的体验度<br>结构上分类：本地负载均衡（对本地的服务器群做负载均衡）和全域负载均衡（对分别放置在不同的地理位置、有不同的网络及服务器群之间做负载均衡）</p></blockquote><p>全域负载均衡特点：</p><blockquote><p>解决网络拥塞问题，服务就近提供，实现地理位置无关性<br>对用户提供更好的访问质量<br>提高服务器响应速度<br>提高服务器及其他资源的利用效率<br>避免了数据中心单点失效。<br><br></p></blockquote><h2 id="5-性能评估"><a href="#5-性能评估" class="headerlink" title="5.性能评估"></a>5.性能评估</h2><p>（1）定义</p><blockquote><p>性能评估是对一个系统进行各项检测，并形成一份直观的文档，因此性能评估是通过各项测试来完成的</p></blockquote><p>（2）目的：为性能的优化提供参考</p><p>（3）基准测试程序</p><p>定义：</p><blockquote><p>应用程序中用得最多、最频繁的那部分核心程序作为评价计算机性能的标准程序</p></blockquote><p>类别：</p><blockquote><p>整数测试程序<br>浮点测试程序<br>SPEC基准测试程序<br>TPC基准程序<br>Linpack测试：Linpack100、Linpack1000 和 HPL</p></blockquote><p>（4）Web服务器的性能评估<br>主要性能指标：</p><blockquote><p>最大并发连接数<br>响应延迟和吞吐量（每秒处理的请求数）</p></blockquote><p>常用设计方法：</p><blockquote><p>有基准性能测试：采用各种基准程序对其进行测试<br>压力测试：采用一些测试工具来测试 Web 服务器的一些性能指标<br>可靠性测试 </p></blockquote><p>IxWeb：</p><blockquote><p>美国 IXIA 公司的一个有关 Web 测试的解决方案，它是一个高性能业务负 载生成与分析应用系统，可在 TCP 和应用层模拟现实世界的业务负载方案，能够对设备 进行强度测试、检验转发策略和验证 4～7 层的性能</p></blockquote><p>（5）系统监视<br>性能数据：</p><blockquote><p>常规性能数据<br>比较基准的性能数据<br>服务水平报告数据</p></blockquote><p>系统监视方式：</p><blockquote><p>通过系统本身提供的命令<br>通过系统记录文件查阅系统在特定时间内的运行状态<br>集成状态</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 软考架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
            <tag> 架构师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（软考架构师笔记四）计算机网络</title>
      <link href="/2019/05/21/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E5%9B%9B%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2019/05/21/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E5%9B%9B%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<p>（软考架构师笔记四）计算机网络<br><a id="more"></a></p><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><blockquote><p>由通信线路互相连接的许多独立自主工作的计算机构成的资源共享集合体<br><br></p></blockquote><h2 id="2-网络架构与协议"><a href="#2-网络架构与协议" class="headerlink" title="2.网络架构与协议"></a>2.网络架构与协议</h2><blockquote><p>网络架构：计算机网络的各层及其协议的集合<br>网络协议：规定信息的格式及如何发送和接收信息的一套规则<br><br></p></blockquote><h2 id="3-网络互联模型"><a href="#3-网络互联模型" class="headerlink" title="3.网络互联模型"></a>3.网络互联模型</h2><p>（1） 网络架构的国际标准：开放系统互联参考模型（OSI/RM）<br>（2）OSI/RM七层模型</p><blockquote><p>物理层：透明地完成相邻节点之间原始比特流的传输<br>数据链路层：传送以帧为单位的数据，把不可靠的物理层变为无差错的数据通道<br>网络层：通信子网的最高层，实现通信子网的连接，并通过网络连接交换网络服务数据单元（packet）<br>传输层：网络通信的最高层，是资源子网和通信子网的桥梁，为两台计算机的通信提供可靠的端到端的数据传输服务<br>会话层：利用传输层提供的端到端数据传输服务<br>表示层：用户信息的表示问题<br>应用层：计算机网络与最终用户之间的界面</p></blockquote><p>（3）TCP/IP 结构模型 （传输控制协议/网际协议）</p><blockquote><p>网络接口层：对应于数据链路层和物理层，负责管理为物理网络准备数据所需的全部服务程序和功能<br>网络互联层：对应于网络层，负责将数据报独立地从信源传送到信宿<br>传输层：对应于传输层，负责在信源和信宿之间提供端到端的数据传输服务<br>应用层：对应于会话层与表示层，为用户方便地提供对各种网络资源的访问服务<br><br></p></blockquote><h2 id="4-常见的网络协议"><a href="#4-常见的网络协议" class="headerlink" title="4.常见的网络协议"></a>4.常见的网络协议</h2><p>（1）应用层协议</p><blockquote><p>1.文件传输协议（FTP）-（TCP）：用于传输文件，有bin与ASCII两种方式，两条连接：控制信息（21），传输文件信息（20）<br>2.简单文件传输协议（TFTP）-(UDP)：用于开销不大的文件传输<br>3.超文本传输协议（HTTP）-(TCP)：从 WWW 服务器传输超文本到本地浏览器的传送协议<br>4.简单又见传输协议（SMTP）-(TCP)：用于传输系统之间的邮件信息，并提供与电子邮件有关的通知<br>5.动态主机配置协议（DHCP）-（UDP）:管理IP网络设置数据<br>6.远程登录协议（Telnet）-（tcp）：将所有用户输入送到远程计算机进行处理的简单的终端程序<br>7.域名系统（DNS）:进行域名解析的服务器,将名称解析为与之相关的其他信息<br>8.简单网络管理协议（SNMP）：解决 Internet上的路由器管理的问题，指一系列网络管理规范的集合</p></blockquote><p>（2）传输层协议<br>UDP：</p><blockquote><p>是面向无连接, 将数据及源的封装成数据包中,不需要建立建立连接<br>每个数据报的大小在限制64k内<br>因无连接,是不可靠协议<br>不需要建立连接,速度快</p></blockquote><p>TCP：</p><blockquote><p>建立连接，形成传输数据的通道.<br>在连接中进行大数据量传输，以字节流方式<br>通过三次握手完成连接,是可靠协议<br>必须建立连接m效率会稍低</p></blockquote><p>（3）网络层协议</p><blockquote><p>1.IP：无连接的和不可靠的，<br>2.地址解析协议（ARP）：用于动态地完成 IP 地址向物理地址（MAC，网卡地址）的转换<br>3.网际控制报文协议（ICMP）：用于发送差错报文的协议<br>4.网际组管理协议（IGMP）：计算机用作向相邻多目路由器报告多目组成员的协议，允许 Internet 中的计算机参加多播<br><br></p></blockquote><h2 id="5-IPv6"><a href="#5-IPv6" class="headerlink" title="5.IPv6"></a>5.IPv6</h2><p>（1）出现缘由：</p><blockquote><p>为了解决IPv4地址空间耗尽、路由表急剧膨胀、缺乏对 QoS 的支持、本身并不提供任何安全机制、移动性差等问题，推出了互联网协议第 6 版</p></blockquote><p>（2）表示方式</p><blockquote><p>一个 32 位的 IPv4 地址以 8 个位为一段分成 4 段，每段之间用点“.”分开。而 IPv6地址的 128 位是以 16 位为一段，共分为 8 段，每段的 16 位转换为一个 4 位的 16 进制数字，每段之间用冒号“：”分开。<br>例如：2001：0da8：d001：0001：0000：0000：0000：0001</p></blockquote><p>（3）压缩地址表示</p><blockquote><p>在 IPv6 中，常见到使用包含一长串 0 的地址，为了方便书写，对于每一段中的前导 0可以进行省略。如前面的首选格式地址经过一次压缩<br>例如：2001：da8：d001：1：0：0：0：1<br>对于连续 2 段以上都为 0 的字段，可以使用“：：”（两个冒号）来表示，这样再次压缩<br>例如：2001：da8：d001：1：：1</p></blockquote><p>（4）内嵌 IPv4 地址的 IPv6 地址<br>（5）IPv6地址类型</p><blockquote><p>单播IPv6地址：<br>多播IPv6地址：<br>泛播IPv6地址：</p></blockquote><p>（6）IPv6优势</p><blockquote><p>具有更大地址空间<br>使用更小路由表<br>增加组播和对流的支持<br>加入自动配置支持<br>安全性更高</p></blockquote><p>（7）IPv4／IPv6 过渡技术</p><blockquote><p>双协议栈技术:两种协议共存<br>隧道技术：在IPv4部署隧道，实现对IPv6的支持<br>NAT-PT技术：使用网关设备连接IPv6和 IPv4网络<br><br></p></blockquote><h2 id="6-局域网与广域网"><a href="#6-局域网与广域网" class="headerlink" title="6.局域网与广域网"></a>6.局域网与广域网</h2><p>（1）定义：</p><blockquote><p>局域网（LAN）：将分散在有限地理范围内的多台计算机通过传输媒体连接起来的通信网络，通过功能完善的网络软件，实现计算机之间的相互通信和资源共享；<br>广域网（WAN）：在传输距离较长的前提下所发展的相关技术的集合，用于将大区域范围内的各种计算机设备和通信设备互联在一起，组成一个资源共享的通信网络</p></blockquote><p>（2）局域网<br>特点：</p><blockquote><p>范围小<br>数率高<br>数据误码率低<br>不架设骨干网<br>协议相对简单、结构灵活，建网成本低、周期短，便于管理和扩充</p></blockquote><p>结构：</p><blockquote><p>星形结构<br>总线结构<br>环形结构<br>网状结构</p></blockquote><p>（3）无限局域网（WLAN）<br>定义：</p><blockquote><p>运用射频（Radio Frequency，RF）技术取代原来局域网系统中必不可少的传输介质（例如，同轴电缆、双绞线等）来完成数据的传送任务</p></blockquote><p>拓扑结构：</p><blockquote><p>基础设施网络：使用无线通信，存在接入点，通过接入点将一组节点逻辑上联系在一起，形成一个局域网<br>Adhoc网络：使用无限通信，通关无线网卡点对点连接</p></blockquote><p>IEEE 802.11 标准</p><blockquote><p>定义了媒体访问控制层（MAC 层）和物理层,采用主动避免碰撞而非被动侦测的方式来解决冲突问题</p></blockquote><p>3G 通信技术:</p><blockquote><p>3G 是第三代移动通信及其技术的简称，其主流标准包括：WCDMA、CDMA 2000 和TD-SCDMA</p></blockquote><p>4G 通信技术</p><blockquote><p>4G 是第四代移动通信及其技术的简称，是集 3G 与 WLAN 于一体并能够传输高质量视频图像且图像传输质量与高清晰度电视不相上下的技术产品<br>4G 标准主要有两大方向，即 LTE（Long Term Evolution）与 WiMAX，而 LTE 又可进一步分为 TD-LTE 与 FDD-LTE</p></blockquote><p>（4）广域网</p><blockquote><p>主要提供面向通信的服务，支持用户使用计算机进行远距离的信息交换</p></blockquote><p>（5）网络接入技术<br>PSTN 接入（公用交换电话网络）：</p><blockquote><p>利用电话线拨号接入 Internet</p></blockquote><p>ISDN 接入（综合业务数字网）：</p><blockquote><p>在电话网络的基础上构造的纯数字方式的综合业务数字网,俗称一线通</p></blockquote><p>ADSL 接入（非对称数字用户线路）：</p><blockquote><p>通过普通的电话线连接，无须对入户线缆进行改造，就可以为现有的大量电话用户提供 ADSL 宽带入</p></blockquote><p>FTTx+LAN 接入:</p><blockquote><p>利用光导纤维（简称为光纤）传输光波信号的一种通信方法</p></blockquote><p>同轴+光纤接入：</p><blockquote><p>将光缆敷设到小区，然后通过光电转换节点，利用有线电视（Community Antenna Television，CATV）的总线式同轴电缆连接到用户，提供综合电信业务的技术<br><br></p></blockquote><h2 id="7-网络互连与常用设备"><a href="#7-网络互连与常用设备" class="headerlink" title="7.网络互连与常用设备"></a>7.网络互连与常用设备</h2><p>（1）定义：</p><blockquote><p>为了将两个以上具有独立自治能力、同构或异构的计算机网络连接起来，实现数据流通，扩大资源共享的范围，或者容纳更多的用户</p></blockquote><p>（2）网络互连设备</p><blockquote><p>中继器：实现物理层协议转换，在电缆间转换二进制信号<br>网桥：实现物理层和和数据链路层协议转换<br>路由器：实现网络层和以下各层协议转换<br>网关：提供从最底层到传输层或以上各层的协议转换<br>交换机</p></blockquote><p>（3）交换技术<br>定义：</p><blockquote><p>当用户较多而传输的距离较远时，通常不采用两点固定连接的专用线路，而是采用交换技术，使通信传输线路为各个用户公用，以提高传输设备的利用率，降低系统费用</p></blockquote><p>特点：</p><blockquote><p>电路交换：在数据传送之前必须先设置一条通路。在线路释放之前，该通路将由一对用户独占<br>报文交换：报文从源点传送到目的地采用存储转发的方式，不满足实时性<br>分组交换：报文被分成分组传送，并规定了最大的分组长度，与报文交换类似</p></blockquote><p>（4）路由技术<br>功能：进行路由选择，根据目的地址信息，选择合适的路由</p><p>路由选择协议的应用范围划分：</p><blockquote><p>内部网关协议(IGP):指在一个自治系统（Autonomous System，AS）内运行的路由选择协议<br>外部网关协议(EGP):指在两个 AS 之间使用的路由选择协议,主要功能是控制路由策略<br>核心网关协议(GGP):AS 全联接在主网干，主网干的网关称为核心网关，核心网关之间交换路由信息时使用的是 GGP</p></blockquote><p>从路由协议使用的算法划分：</p><blockquote><p>距离向量协议<br>链路状态协议<br>平衡型协议<br><br></p></blockquote><h2 id="8-网络工程"><a href="#8-网络工程" class="headerlink" title="8.网络工程"></a>8.网络工程</h2><p>（1）网络规划</p><blockquote><p>网络需求分析：深入调查用户网络建设的背景、必要性、上网的人数和信息量<br>可行性分析：从技术可行性、经济可行性、法律可行性和用户使用可行性等方面进行论证<br>对现有网络的分析与描述：对现有网络进行分析，并系统化地描述出来。对现有网络系统进行调研</p></blockquote><p>（2）网络设计</p><blockquote><p>网络逻辑结构设计:<br>网络物理结构设计<br>分层设计</p></blockquote><p>（3）网络实施</p><blockquote><p>工程实施计划<br>网络设备到货验收<br>设备安装<br>系统测试<br>系统试运行<br>用户培训<br>系统转换</p></blockquote><p>（4）网络存储技术</p><blockquote><p>直接附加存储<br>网络附加存储<br>存储区域网络</p></blockquote><p>（5）综合布线</p><blockquote><p>工作区<br>配线子系统<br>干线子系统<br>建筑群子系统<br>设备间<br>进线间<br>管理</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 软考架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
            <tag> 架构师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（软考架构师笔记三）数据库系统</title>
      <link href="/2019/05/20/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E4%B8%89%EF%BC%89%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/05/20/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E4%B8%89%EF%BC%89%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>（软考架构师笔记三）数据库系统<br><a id="more"></a></p><h2 id="1-数据库类别"><a href="#1-数据库类别" class="headerlink" title="1.数据库类别"></a>1.数据库类别</h2><p>概念：</p><blockquote><p>存放数据库的仓库</p></blockquote><blockquote><p>关系型数据库（sql）：mysql、oracle等<br>非关系型数据库（nosql）：memcached、redis等<br><br></p></blockquote><h2 id="2-数据库模式"><a href="#2-数据库模式" class="headerlink" title="2.数据库模式"></a>2.数据库模式</h2><p>（1）模式三级划分示例图：<br> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/three/ruankao3-1.png" height="70%" width="100%"></p><p>（2）三级抽象</p><blockquote><p>用户级数据库：也称用户视图，作用于外模式，被用户所操作，一个数据库能有多个不同的用户视图<br>概念级数据库：也称DBA视图，作用于概念模式，一个数据库只能有一个DBA视图<br>物理级数据库：也称内部视图，作用于内模式，其不是真正的物理存储而是金结余物理存储的级别</p></blockquote><p>（3）三级模式：</p><blockquote><p>外模式：用户使用条件语句操作数据库（可多个）<br>概念模式：描述数据库的逻辑关系（唯一）<br>内模式：物理结构和存储方式的描述（唯一）</p></blockquote><p>（4）三者关系</p><blockquote><p>程序依赖外模式，独立于模式与内模式<br>外模式面向应用，独立于内模式和存储设备<br>模式是数据库的中心与关键<br>内模式依赖于模式，独立于外模式和存储设备</p></blockquote><p>（5）两级独立性</p><blockquote><p>三个抽象级间通过两级映射（外模式—模式映射，模式—内模式映射）进行相互转换</p></blockquote><blockquote><p>物理独立性：应用程序和存储在磁盘上的数据库的数据是独立性，一方改变不会影响另一方（概念模式与内模式的映射）<br>逻辑独立性：应用程序和数据库的逻辑结构是独立性，一方改变不会影响另一方（概念模式与内】外模式的映射）<br><br></p></blockquote><h2 id="3-概念数据模型"><a href="#3-概念数据模型" class="headerlink" title="3.概念数据模型"></a>3.概念数据模型</h2><p>（1）分类</p><blockquote><p>概念数据模型：按照用户的观点来对数据和信息建模，主要用于数据库设计（E-R模型）<br>基本数据模型：按照计算机系统的观点来对数据和信息建模，主要用于 DBMS 的实现</p></blockquote><p>（2）基本数据模型</p><blockquote><p>组成：基本数据模型通常由数据结构、数据操作和完整性约束三部分组成<br>常用模型：层次模型（1：n）、网状模型(m：n)、关系模型和面向对象模型<br><br>  </p></blockquote><h2 id="4-关系代数（基本运算类型）"><a href="#4-关系代数（基本运算类型）" class="headerlink" title="4.关系代数（基本运算类型）"></a>4.关系代数（基本运算类型）</h2><p>（1）并：如R与S的并集<br>（2）差：R与S的差集<br>（3）交：R与S的交集<br>（4）笛卡尔积：<br> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/three/ruankao3-2.png" height="70%" width="100%"><br>（5）投影<br>（6）选择<br>（7）连接<br>（8）除<br><br></p><h2 id="5-关系模型方式"><a href="#5-关系模型方式" class="headerlink" title="5.关系模型方式"></a>5.关系模型方式</h2><p>（1）概念：关系模型满足的确定约束条件称为范式，范式由低到高分为 1NF（第一范式）、2NF（第二范式）、3NF（第三范式）、BCNF（BC 范式）、4NF（第四范式）等</p><p>（2）范式准则</p><blockquote><p>无损连接性：信息不失真（不增减信息）<br>函数依赖保持性：不破坏属性间存在的依赖关系</p></blockquote><p>（3）规范化理论</p><blockquote><p>用数据依赖的概念分析和表示各数据项之间的关系<br>消除 E-R 图中的冗余联系</p></blockquote><p>（4）函数依赖<br>一个表：学号，姓名，年龄，身份证，班级号</p><blockquote><p>定义：一个值确定，依赖它的值也确定<br>码（候选码）：数据库中唯一一行的属性集，相当于主键集合（学号和身份证）<br>主码：也称主键，人为从候选码（主键集合）中选择的唯一区分其他行属性集（学号）<br>外码：也称外键，该表出现的外表的主键（班级号）<br>主属性：候选码（主键集合）的属性（学号和身份证）<br>非主属性：不包含在主键中的属性（姓名，年龄，班级号）</p></blockquote><blockquote><p>第一范式：不可再分，任何关系必须满足第一范式（如住址可分为省与市，其不满足）<br>第二范式：满足第一范式，所有非主属性完全依赖主属性（常见不符合的例子为部分依赖）<br>第三范式：满足第二范式，非主属性不传递依赖主属性（解决方法先出传递依赖，如投影分表）<br>BC范式：非主属性完全依赖于候选码；候选码中不存在依赖关系；非主属性不依赖于候选码中的其中一个属性（消除主属性对主码的部分依赖和传递依赖）</p></blockquote><p>（5）反规范化<br>定义：为了提高某些查询或应用的性能而破坏规范规则</p><blockquote><p>增加冗余列<br>增加派生列<br>重新组表<br>分割表</p></blockquote><p>（6）完整性约束</p><blockquote><p>实体完整性：主键的任意属性不能为空<br>参照完整性：两表关联，其主外键对应<br>用户自定义完整性：用户定义的条件约束</p></blockquote><p><br></p><h2 id="6-数据库设计"><a href="#6-数据库设计" class="headerlink" title="6.数据库设计"></a>6.数据库设计</h2><p>（1）面临的困难与问题</p><blockquote><p>同时具备数据库知识与应用业务知识的人很少<br>项目初期往往不能确定应用业务的数据库系统的目标<br>缺乏完善的设计工具和设计方法<br>需求的不确定性<br>应用业务系统千差万别</p></blockquote><p>(2)设计方法</p><blockquote><p>直观设计法：单步逻辑设计法<br>规范设计法<br>计算机辅助设计法<br>自动化设计法</p></blockquote><p>缺点：缺乏工程规范的支持和科学根据，设计质量也不稳定，因此越来越不适应信息管理系统发展的需要<br>新奥尔良方法（4阶段）：</p><blockquote><p>1.需求分析：收集和分析用户对系统的信息需求和处理需求，得到设计系统所必需的需求信息，建立系统说明文档<br>2.概念结构设计：对需求说明书提供的所有数据和处理要求进行抽象与综合处理，按一定的方法构造反映用户环境的数据及其相互联系的概念模型，即用户的数据模型或企业数据模型<br>3.逻辑结构设计：把上一阶段得到的与 DBMS 无关的概念数据模型转换成等价的，并为某个特定的 DBMS 所接受的逻辑模型所表示的概念模式，同时将概念设计阶段得到的应用视图转换成外部模式，即特定 DBMS 下的应用视图<br>4.物理结构设计：把逻辑设计阶段得到的满足用户需求的已确定的逻辑模型在物理上加以实现，其主要内容是根据 DBMS 提供的各种手段，设计数据的存储形式和存取路径，如文件结构、索引设计等，即设计数据库的内模式或存储模式</p></blockquote><p> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/three/ruankao3-4.png" height="70%" width="100%"></p><p>基于其的设计： </p><blockquote><p>3NF的设计方法（重点）<br>LRA方法<br>面向对象的数据库设计方法<br>基于视图概念的数据库设计方法</p></blockquote><p>（3）3NF的设计方法<br>定义：基本思想是在需求分析的基础上，识别并确认数据库模式中的全部属性和属性间的依赖，将它们组织成一个单一的关系模型，然后再分析模式中不符合 3NF 的约束条件，用投影和连接的办法将其分解，使其达到 3NF 条件</p><p>设计步骤（5阶段）：</p><blockquote><p>设计企业模式<br>设计数据库逻辑模式<br>设计数据库物理模式（存储模式）<br>评价物理模式<br>数据库实现</p></blockquote><p> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/three/ruankao3-3.png" height="80%" width="100%"><br><br></p><h2 id="7-事务管理"><a href="#7-事务管理" class="headerlink" title="7.事务管理"></a>7.事务管理</h2><p>（1）事务特性</p><blockquote><p>原子性（Atomicity）：数据库的逻辑工作单位。<br>一致性（Consistency）：使数据库从一个一致性状态变到另一个一致性状态。<br>隔离性（Isolation）：不能被其他事务干扰。<br>持续性（永久性）（Durability）：一旦提交，改变就是永久性的。</p></blockquote><blockquote><p>事务开始：BEGIN TRANSACTION<br>事务提交：COMMIT<br>事务回滚：ROLLBACK</p></blockquote><p>(2)并发控制<br>定义：在多用户共享系统中，许多事务可能同时对同一数据进行操作，称为“并发操作”</p><p>并发出线的问题：</p><blockquote><p>丢失更新<br>数据过期被读取（重复读）<br>脏数据（数据已提交但读取了旧的数据）</p></blockquote><p>解决方案：封锁技术</p><blockquote><p>排它锁（X封锁）：只允许事务 T 读取和修改数据 A，其他事务要等事务 T 解除 X 封锁以后，才能对数据 A 实现任何类型的封锁<br>共享锁（S封锁）：区别于X锁，S锁可读数据但不可修改（也不可加入X锁），除非解除</p></blockquote><p>封锁协议：</p><blockquote><p>1.一级封锁协议：加X锁，防止数据丢失更新<br>2.二级封锁协议：加S锁，防止数据丢失更新和脏数据<br>3.三级封锁协议：在1基础性上加入S锁，三者皆可防止<br>4.两段锁协议：所有事务必须分两个阶段对数据项加锁和解锁。其可能发生死锁请注意。<br><br></p></blockquote><h2 id="8-故障与恢复"><a href="#8-故障与恢复" class="headerlink" title="8.故障与恢复"></a>8.故障与恢复</h2><p>（1）故障类别</p><blockquote><p>事务故障（操作）<br>系统故障<br>介质故障（硬件）<br>计算机病毒</p></blockquote><p>（2）故障的恢复</p><blockquote><p>事务故障的恢复：事务为进行到终点时撤销<br>系统故障：根据日志找到已完成和未完成的事务，对事务进行逆操作，重新执行事务<br>介质故障：找到备份恢复，找到日志反向进行操作，正向阅读日志，重做已完成事务，回到事务之前<br>计算机病毒：检查点恢复<br>br&gt;</p></blockquote><h2 id="9-备份与恢复"><a href="#9-备份与恢复" class="headerlink" title="9.备份与恢复"></a>9.备份与恢复</h2><p>（1）遵守的原则</p><blockquote><p>保证数据丢失的情况尽量少或完全不丢失<br>备份和恢复时间尽量短，保证系统最大的可用性</p></blockquote><p>（2）物理备份</p><blockquote><p>冷备份：将数据库正常关闭，在停止状态下利用操作系统的 copy、cp、tar、 cpio等命令将数据库的文件全部备份下来，当数据库发生故障时，将数据文件复制回来，进行恢复<br>热备份：①备份软件备份；②不关闭数据库，将数据置为备份状态然后备份，再讲备份状态置为正常。</p></blockquote><blockquote><p>完全备份：将数据库的内容全部备份，作为增量、累积的基础<br>增量备份：只备份上次完全、增量或累积备份以来修改的数据<br>累计备份：备份自上次完全或累积备份以来修改过的数据</p></blockquote><p>周期：一个完全备份和多个增量、累积备份组成<br>恢复：首先从完全备份恢复数据库，然后按照时间顺序从早到晚依次导入多个增量和累积备份文件</p><p>（3）逻辑备份：利用各数据库系统自带的工具软件备份和恢复数据库的内容<br><br></p><h2 id="10-分布式数据库系统"><a href="#10-分布式数据库系统" class="headerlink" title="10.分布式数据库系统"></a>10.分布式数据库系统</h2><p>（1）定义</p><blockquote><p>分布式数据库是由一组数据组成的，这组数据分布在计算机网络的不同计算机上，网络中的每个结点具有独立处理的能力，成为场地自治，它可以执行局部应用，同时，每个结点也能通过网络通信子系统执行全局应用。负责分布式数据库的建立、查询、更新、复制、管理和维护的软件称为分布式数据库管理系统。</p></blockquote><p>（2）分布式数据库系统特点</p><blockquote><p>数据的分布性<br>统一性<br>透明性<br>坚固性好<br>可扩充性好<br>可改善性能<br>自治性好</p></blockquote><p>(3)分布式数据库系统分类</p><blockquote><p>按 DDBMS 软件同构度来分:当所有服务器软件（或每个 LDBMS）和所有客户软件均用相同的软件时称为同构型分布式数据库；反之，则称为异构型分布式数据库</p><p>按局部自治度来分:当对 DDBMS 的存取必须通过客户软件，则系统称为无局部自治；当局部事务允许对服务器软件进行直接存取，则系统称为有一定的局部自治</p><p>按分布透明度来分:若用户可以对集成模式操作不需要涉及任何片段、重复、分布等信息时，则这类 DDBMS 称为有高度分布透明（或高度模式集成）；若用户必须知道所有关于片段、分配、重复等信息时，则这类 DDBMS没有分布透明，没有模式集成度</p></blockquote><p>(4)分布式数据库的目标</p><blockquote><p>局部结点自治性<br>不依赖中心结点<br>能连续操作<br>具有位置独立性（或称位置透明性）<br>分片独立性（或称分片透明性）<br>数据复制独立性<br>支持分布式查询处理<br>支持分布事务管理<br>具有硬件独立性<br>具有操作系统独立性<br>具有网络独立性<br>具有 DBMS 独立性</p></blockquote><p>(5)分布式数据库的架构<br>（1）示例图（下半部分是集中式数据库的模式结构，上半部分是分布式数据库系统增加的模式<br>级别）：<br> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/three/ruankao3-5.png" height="60%" width="100%"></p><blockquote><p>1.全局外模式。它们是全局应用的用户视图。<br>2.全局概念模式。定义分布式数据库中数据的整体逻辑结构向其他层次的模式映像。<br>3.分片模式。每一个全局关系可以划分为若干不相交的部分，每一部分称为一个片<br>段，即“数据分片”。<br>4.分布模式。由数据分片得到的片断仍然是 DDB 的全局数据，是全局关系的逻辑<br>部分<br>5.局部概念模式。一个全局关系经逻辑划分成一个或多个逻辑片断，每个逻辑片断<br>被分配在一个或多个场地上，称为该逻辑片断在某场地上的物理映像或物理片断。<br>6.局部内模式。</p></blockquote><p>（2）其特点：</p><blockquote><p>数据分片和数据分配概念的分离，形成了“数据分布独立型”概念。<br>数据冗余的显示控制。<br>局部 DBMS 的独立性。这个特征也称为“局部映射透明性”。</p></blockquote><h2 id="11-数据仓库"><a href="#11-数据仓库" class="headerlink" title="11.数据仓库"></a>11.数据仓库</h2><p>（1）概念</p><blockquote><p>数据仓库（Data Warehouse）是一个面向主题的、集成的、相对稳定的、且随时间变化的数据集合，用于支持管理决策.主题性数据仓库，面向数据处理的数据仓库，稳定性数据仓库，随时间变化的数据仓库。</p></blockquote><p>（2）数据仓库的结构</p><blockquote><p>数据源<br>数据准备区<br>数据仓库数据库<br>数据集市/知识挖掘库<br>各种管理工具和应用工具</p></blockquote><p> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/three/ruankao3-6.png" height="40%" width="100%"></p><p>（3）数据仓库的参考架构</p><blockquote><p>数据仓库基本功能层：功能是从数据源抽取数据，对所抽取的数据进行筛选、清理，将处理过的数据导入或者说加载到数据仓库中，根据用户的需求设立数据集市，完成数据仓库的复杂查询、决策分析和知识的挖掘等</p></blockquote><blockquote><p>数据仓库管理层：对这些基本功能进行管理与支持的结构框架</p></blockquote><blockquote><p>数据仓库的环境支持层：由数据仓库数据传输层和数据仓库基础层组成</p></blockquote><p>（4）数据仓库的实现方法<br>自顶向下法适用情况：</p><blockquote><p>实现单位比较熟悉技术，并具有根据商业需求采用自顶向下方法开发应用程序的丰富经验。<br>决策层（总经理、决策者、投资者）完全清楚数据仓库的预测目标。<br>决策层（总经理、决策者、投资者）完全清楚数据仓库用作哪些机构的决策支持工具。<br>决策层（总经理、决策者、投资者）完全清楚数据仓库已经是商业过程中的一个子过程。</p></blockquote><p>自底向上法适用情况：</p><blockquote><p>企业还没有确实掌握数据仓库技术，希望进行技术评估来决定运行该技术的方式、地点和时间。<br>企业希望了解实现和运行数据仓库所需要的各种费用情况。<br>企业在对数据仓库进行投资选择。自底向上方法对于希望从数据仓库投资中快速得到回报的用户是非常有效的。该方法可以使企业充分利用各种技术，无须冒很大风险。</p></blockquote><p>联合方法适用情况：</p><blockquote><p>实现企业拥有经验丰富的设计师，有能力建立、证明、应用和维护数据结构、技术结构及企业模型，可以很容易地从具体（运作系统中的元数据）转移到抽象。<br>企业拥有固定的项目小组，完全清楚数据仓库技术应用的场所。他们可以清楚地看到当前的商务需求。<br><br></p></blockquote><h2 id="11-数据挖掘"><a href="#11-数据挖掘" class="headerlink" title="11.数据挖掘"></a>11.数据挖掘</h2><p>（1）定义：按企业既定业务目标，对大量的企业数据进行探索和分析，揭示隐藏的、未知的或验证已知的规律性，并进一步将其模型化的先进有效的方法</p><p>（2）数据挖掘的功能</p><blockquote><p>自动预测趋势和行为数据挖掘自动在大型数据库中寻找预测性信息，以往需要进行大量手工分析的问题如今可以迅速直接由数据本身得出结论<br>关联分析数据关联是数据库中存在的一类重要的可被发现的知识<br>聚类数据库中的记录可被划分为一系列有意义的子集，即聚类<br>概念描述概念描述就是对某类对象的内涵进行描述，并概括这类对象的有关特征<br>偏差检测数据库中的数据常有一些异常记录，从数据库中检测这些偏差很有意义</p></blockquote><p>(3)数据挖掘常用技术</p><blockquote><p>关联分析<br>序列分析<br>分类分析<br>聚类分析<br>预测<br>时间序列</p></blockquote><p>（4）数据挖掘的流程</p><blockquote><p>问题定义在开始数据挖掘之前，最先的也是最重要的要求就是熟悉背景知识，弄清用户的需求<br>建立数据挖掘库<br>分析数据<br>调整数据<br>模型化<br>评价和解释</p></blockquote><p>（5）数据挖掘人员类别</p><blockquote><p>业务分析人员<br>数据分析人员<br>数据管理人员<br><br></p></blockquote><h2 id="12-NoSQL"><a href="#12-NoSQL" class="headerlink" title="12.NoSQL"></a>12.NoSQL</h2><p>（1）定义：全称Not Only SQL，NoSQL数据存储不需要固定的表结构，通常也不存在连接操作。</p><p>（2）NOSQL特点</p><blockquote><p>易扩展<br>大数据量，高性能<br>灵活的数据模型<br>高可用</p></blockquote><h2 id="13-大数据"><a href="#13-大数据" class="headerlink" title="13.大数据"></a>13.大数据</h2><p>（1）定义</p><blockquote><p>无法在一定时间范围内用常规软件工具进行捕捉、管理和处理的数据集合，是需要新处理模式才能具有更强的决策力、洞察发现力和流程优化能力的海量、高增长率和多样化的信息资产</p></blockquote><p>（2）特点</p><blockquote><p>Volume：数据体量巨大<br>Variety：数据类型繁多<br>Value：价值密度低<br>Velocity：处理速度快</p></blockquote><p>（3）大数据处理关键技术</p><blockquote><p>大数据处理关键技术一般包括：大数据采集、大数据预处理、大数据存储及管理、大数据分析及挖掘、大&gt;数据展现和应用（大数据检索、大数据可视化、大数据应用、大数据安全等）。</p></blockquote><p>（4）大数据应用<br>4．大数据应用</p><blockquote><p>大数据可以在各行各业得以应用，如金融服务、医疗保健、零售业、制造业、政府机构等。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 软考架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
            <tag> 架构师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（软考架构师笔记二（5））作业管理</title>
      <link href="/2019/05/17/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%885%EF%BC%89%EF%BC%89%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86/"/>
      <url>/2019/05/17/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%885%EF%BC%89%EF%BC%89%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>（软考架构师笔记二（5））作业管理<br><a id="more"></a></p><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><blockquote><p>从用户的角度看，作业是系统为完成一个用户的计算任务（或一次事务处理）所做的工作总和</p><p>从系统的角度看，作业则是一个比程序更广的概念。它由程序、数据和作业说明书组成。系统通过作业说明书控制文件形式的程序和数据，使之执行和操作。而且，在批处理系统中，作业是占据内存的基本单位</p></blockquote><blockquote><p>联机方式：由用户自己按照作业步顺序操作（直接方式）<br>脱机方式：由用户率先编写的作业步依次执行的说明，一次交给操作系统，由系统按照说明依次处理（间接方式）</p></blockquote><h2 id="2-作业状态及转换"><a href="#2-作业状态及转换" class="headerlink" title="2.作业状态及转换"></a>2.作业状态及转换</h2><p>（1）状态</p><blockquote><p>1.提交：作业由输入设备进入外存储器（也称输入井）的过程<br>2.后备：当作业的全部信息进入外存后，系统就为该作业建立一个作业控制块（Job Control Block，JCB）。系统通过 JCB 感知作业的存在。JCB 主要内容包括作业名、作业状态、资源要求、作业控制方式、作业类型及作业优先权等</p><p>3.执行：个后备作业被作业调度程序选中而分配了必要的资源并进入了内存，作业调度程序同时为其建立了相应的进程后，该作业就由后备状态变成了执行状态<br>4.完成：当作业正常运行结束，它所占用的资源尚未全部被系统回收时的状态为完成状态。</p></blockquote><p> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/five/ruankao2.5-1.png" height="50%" width="100%"></p><h2 id="3-用户接口（用户界面）"><a href="#3-用户接口（用户界面）" class="headerlink" title="3.用户接口（用户界面）"></a>3.用户接口（用户界面）</h2><p>（1）定义</p><blockquote><p>操作系统的接口：用户与操作系统交互的途径和通道<br>操作环境：指这种交互环境的控制方式</p></blockquote><p>（2）详情</p><blockquote><p>操作系统的接口：操作系统的接口又可分成命令接口和程序接口。命令接口包含键盘命令和作业控制命令；程序接口又称为编程接口或系统调用，程序经编程接口请求系统服务，即通过系统调用程序与操作系统通信。系统调用是操作系统提供给编程人员的唯一接口。系统调用对用户屏蔽了操作系统的具体动作而只提供有关功能。系统调用大致分为设备管理、文件管理、进程控制、进程通信和存储管理等</p></blockquote><blockquote><p>操作环境：操作环境支持命令接口和程序接口，提供友好的、易用的操作平台。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 软考架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
            <tag> 架构师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（软考架构师笔记二（4））文件管理</title>
      <link href="/2019/05/17/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%884%EF%BC%89%EF%BC%89%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
      <url>/2019/05/17/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%884%EF%BC%89%EF%BC%89%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>（软考架构师笔记二（4））文件管理<br><a id="more"></a></p><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><blockquote><p>硬件管理：CPU 的管理、存储器的管理、设备管理等<br>软件管理：系统程序、各种应用程序、各种用户程序，也包括大量的文档材料、库函数等<br>文件管理的功能：建立、修改、删除文件</p></blockquote><h2 id="2-文件的保护与保密"><a href="#2-文件的保护与保密" class="headerlink" title="2.文件的保护与保密"></a>2.文件的保护与保密</h2><blockquote><p>定义：用户对文件的存取权限控制问题</p></blockquote><blockquote><p>两级控制：第1级别访问者识别，谁可以访问；第二级别，存取权限识别，谁有权限对文件处理</p></blockquote><h2 id="3-文件的逻辑结构"><a href="#3-文件的逻辑结构" class="headerlink" title="3.文件的逻辑结构"></a>3.文件的逻辑结构</h2><p>（1）类别：</p><blockquote><p>无结构的字符流文件<br>有结构的记录文件</p></blockquote><p>（2）记录</p><p>定义：记录文件由记录组成，即文件内的信息划分成多个记录，以记录为单位组织和使用信息</p><p>类别：</p><blockquote><p>顺序文件：按键值的约定次序组织的<br>索引顺序文件：基于键的约定次序组织的，而且维护键的索引和溢出区域<br>索引文件：基于记录的一个键数据项组织的<br>直接（哈希）文件：记录以它们在直接访问存储设备上的物理地址直接（随机地）访问</p></blockquote><h2 id="4-文件的物理结构"><a href="#4-文件的物理结构" class="headerlink" title="4.文件的物理结构"></a>4.文件的物理结构</h2><p>文件的存储设备通常划分为大小相同的物理块，物理块是分配和传输信息的基本单位。文件的物理结构涉及文件存储设备的组块策略和文件分配策略，决定文件信息在存储设备上的存储位置。常用的文件分配策略有：</p><blockquote><p>1.顺序分配：开始新建连续物理块，把信息按顺序存入，其存取速度快，但新建时需指定长度，不利于修改<br>2.链接分配：每个物理块有一个指针指向下一个物理块形成链接队列，修改快，读取较慢<br>3.索引分配：文件不连续存储，建立索引表，逻辑号与物理号一一对应，存取快，修改快，但易产生分配问题和增加存取空间的开销（访问了两次磁盘：索引表和索引表提供的物理块号访问文件信息，可把索引表放入内存加快速度）</p></blockquote><h2 id="5-文件存储设备管理"><a href="#5-文件存储设备管理" class="headerlink" title="5.文件存储设备管理"></a>5.文件存储设备管理</h2><p>（1）定义</p><blockquote><p>文件存储设备管理，就是操作系统要有效地进行存储空间的管理，文件存储设备分成许多大小相同的物理块，因此实质上是对空闲块的组织和管理</p></blockquote><p>（2）空闲块管理方法</p><blockquote><p>1.索引法：磁盘上每一个空闲块区都对应于索引表中一个条目<br>2.链接法：链接法使用链表把空闲块组织在一起，当申请者需要空闲块时，分配程 序从链首开始摘取所需的空闲块<br>3.位示图法：在外存建立位示图记录数据</p></blockquote><h2 id="6-树型目录结构"><a href="#6-树型目录结构" class="headerlink" title="6.树型目录结构"></a>6.树型目录结构</h2><p>（1）定义</p><blockquote><p>在树型目录结构中，树的根结点为根目录，数据文件作为树叶，其他所有目录均作为树的结点，根目录隐含于一个硬盘的一个分区中，根目录在最顶层。它包含的子目录是一级子目录。每一个一级子目录又可以包含若干二级子目录，…，这样的组织结构就叫作目录树。</p><p>当前盘和当前目录是系统默认的操作对象。如果用户没有指明操作对象，系统就将用户命令指向当前盘和当前目录。</p><p>路径是指从根目录或者当前目录开始到访问对象（目录或者文件），在目录树中路经的所有目录的序列</p></blockquote><blockquote><p>绝对路径：从树根开始的路径<br>相对路径：由目录结构中的当前位置开始<br>父目录：当前路径的上一层目录</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 软考架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
            <tag> 架构师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（软考架构师笔记二（3））设备管理</title>
      <link href="/2019/05/17/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%883%EF%BC%89%EF%BC%89%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86/"/>
      <url>/2019/05/17/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%883%EF%BC%89%EF%BC%89%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>（软考架构师笔记二（3））设备管理<br><a id="more"></a></p><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><blockquote><p>定义：除了处理器和内存之外，其他的大部分硬设备<br>主要任务：控制设备和内存或 CPU 之间的数据传送</p></blockquote><h2 id="2-数据传输控制方式"><a href="#2-数据传输控制方式" class="headerlink" title="2.数据传输控制方式"></a>2.数据传输控制方式</h2><p>（1）选择和衡量控制方式的原则：</p><blockquote><p>数据传送速度足够高，能满足用户的需要但又不丢失数据。<br>系统开销小，所需的处理控制程序少。<br>能充分发挥硬件资源的能力，使得 I/O 设备尽量处于使用状态中，而 CPU 等待时间少</p></blockquote><p>(2)外围设备和内存之间常用的数据传送控制方式:</p><blockquote><p>程序控制<br>中断方式<br>直接存储访问方式（DMA）<br>通道方式</p></blockquote><h2 id="3-虚设备与-SPOOLING-技术"><a href="#3-虚设备与-SPOOLING-技术" class="headerlink" title="3.虚设备与 SPOOLING 技术"></a>3.虚设备与 SPOOLING 技术</h2><blockquote><p>假脱机（SPOOLING）:外部设备同时联机操作，又称为假脱机输入/输出操作，采用一组程序或进程模拟一台输入/输出处理器<br>作用：将低速的独占设备改造成一种可共享的设备</p></blockquote><p> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/three/ruankao2.3-1.png" height="50%" width="100%"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 软考架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
            <tag> 架构师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（软考架构师笔记二（2））存储管理</title>
      <link href="/2019/05/17/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%882%EF%BC%89%EF%BC%89%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/"/>
      <url>/2019/05/17/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%882%EF%BC%89%EF%BC%89%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>（软考架构师笔记二（2））存储管理<br><a id="more"></a></p><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>存储管理主要是指对内存储器的管理，负责对内存的分配和回收、内存的保护和内存的扩充。存储管理的目的是尽量提高内存的使用效率</p><h2 id="2-类别"><a href="#2-类别" class="headerlink" title="2.类别"></a>2.类别</h2><p>存储器分为内存与外存</p><blockquote><p>内存：系统实际提供的存储单元（常指字节）组成的一个连续地址空间<br>外存：软盘、硬盘、光盘和磁带等一些外部存储部件，常用来存放暂不执行的程序和数据</p></blockquote><h2 id="3-内存"><a href="#3-内存" class="headerlink" title="3.内存"></a>3.内存</h2><blockquote><p>1.大小：由硬件决定，受硬件条件限制<br>2.速度：处理机直接访问，速度较快<br>3.虚拟存储器：不考虑实际内存的大小和数据存取的实际地址，只考虑相互有关的数据之间的相对位置，其容量由计算机地址的位数决定<br>4.分类：系统空间，存放于操作系统相关的数据与程序；用户空间，用户的数据与程序</p></blockquote><h2 id="4-段页式存储管理"><a href="#4-段页式存储管理" class="headerlink" title="4.段页式存储管理"></a>4.段页式存储管理</h2><p>（1）页式存储管理</p><blockquote><p>分页：把程序的逻辑空间和内存的物理空间按照同样的大小划分成若干页面，并以页面为单位进行分配<br>虚地址形式：（页号，偏移量）-&gt;（p，d）<br>动态地址转换：指令访问虚存地址（p，d）时，首先根据页号 p 查页表，由状态可知，这个页是否已经调入内存。若已调入内存，则得到该页的内存位置 p’，然后，与页内相对位移 d 组合，得到物理地址 r。如果该页尚未调入内存，则产生缺页中断，以装入所需的页</p></blockquote><p>（2）页面调度</p><blockquote><p>定义：当内存中无空闲块时，为了装入一个页面而必须按某种算法从已在内存的页中选择一页，将它暂时调出内存，让出内存空间以存&gt; 放所需装入的页面</p></blockquote><blockquote><p>抖动现象：刚被调出的页面又立即要用，因而又要把它装入，而装入不久又被选中调出，调出不久又被装入，如此反复，使调度非常频繁</p></blockquote><p>避免抖动现象常用的调度算法：</p><blockquote><p>1.最有算法：选择不再使用或最远的将来才被使用的页<br>2.随机算法：随机地选择被淘汰的页<br>3.先进先出算法<br>4.最近最少使用</p></blockquote><p>（3）段式存储管理</p><blockquote><p>分段：把用户作业按逻辑意义上有完整意义的段来划分，并以段为单位作为内外存交换的空间尺度<br>虚地址形式：（段号，偏移量）-&gt;（s，d）<br>动态地址转换：执行的指令访问虚存（s，d）（取指令或取操作数）时，首先根据段号 s 查段表，若段已经调入内存，则得到该段的内存起始地址，然后与段内相对地址（段内偏移量 d）相加，得到实地址。如果该段尚未调入内存，则产生缺段中断，以装入所需要的段。段式存储与页式存储的地址转换方式类似</p></blockquote><blockquote><p>在内存连续空间不足的情况下，可以把段分到不连续的空闲空间存放</p></blockquote><p>（4）段页式存储管理</p><blockquote><p>定义：把每一段再分成若干页面，那么，每一段不必占用连续的存储空间；甚至当内存块不够时，可只将一段中的部分页面装入内存<br>模式：有段与页组成，程序模块分段，段内再分页<br>虚地址形式：（段号，页号，偏移量）-&gt;（s，p，d）<br>动态地址转换：作业执行时按段号查段表，找到相应的页表再根据页号查页表，由标志位判定该页是否已在内存，若是，则进行地址转换；否则进行页面调度</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 软考架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
            <tag> 架构师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（软考架构师笔记二（1））进程管理</title>
      <link href="/2019/05/16/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%881%EF%BC%89%EF%BC%89%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
      <url>/2019/05/16/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%881%EF%BC%89%EF%BC%89%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>（软考架构师笔记二（1））进程管理<br><a id="more"></a></p><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><blockquote><p>处理机管理也被称为进程管理,处理机管理的功能就是组织和协调用户对处理机的争夺使用，把处理机分配给进程，对进程进行管理和控制，最大限度也发挥处理机的作用。其为并发执行。</p></blockquote><h2 id="2-顺序程序"><a href="#2-顺序程序" class="headerlink" title="2.顺序程序"></a>2.顺序程序</h2><p>程序按照先后顺序执行，为了增强计算机系统的处理能力和提高机器的利用率，其发生了变化</p><blockquote><p>资源共享，多程序共享资源<br>程序并发运行或交替运行</p></blockquote><p>程序大多是时间上有次序，但也有同时进行的</p><h2 id="3-进程状态的转化"><a href="#3-进程状态的转化" class="headerlink" title="3.进程状态的转化"></a>3.进程状态的转化</h2><p>1.三状态</p><blockquote><p>就绪状态：进入就绪队列，等待获取资源<br>执行状态：得到资源，开始执行<br>阻塞状态：由于某些原因暂停执行，进入阻塞队列，其也称为等待或睡眠状态</p></blockquote><p>2.由于自身或外部的原因，状态发生变化<br> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/two/ruankao2.1-1.png" height="50%" width="100%"></p><p>3.挂机状态<br>（1）产生的原因</p><blockquote><p>对换的需求：进程等待期盼被执行，但不具备执行的条件无法进入就绪状态<br>终端用户的请求：进程被暂停进行研究或修改<br>父进程请求：父进程对子进程挂机，对其协调或修改操作<br>负荷调节：保证工作正常进行，把非主要的进程挂机<br>系统的需要：系统挂起程序检查资源或记录数据</p></blockquote><p>（2）挂机状态三属性</p><blockquote><p>就绪被挂起称为挂起就绪，阻塞被挂起称为挂起阻塞，其进程都不能被调度而被执行<br>静止阻塞状态转换为挂起就绪状态后才可被调度而执行<br>进程可由任意对象挂起，目的是组织进程执行，但只能显示激活进程</p></blockquote><p> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/two/ruankao2.1-2.png" height="50%" width="100%"></p><p>（3）进程互斥与进程同步</p><blockquote><p>进程同步：进程之间是异步执行的，各进程按一定的制约顺序和速度执行（协同关系）<br>进程互斥：临界资源在某一时刻只被一个进程访问（竞争关系）</p></blockquote><h2 id="4-临界区"><a href="#4-临界区" class="headerlink" title="4.临界区"></a>4.临界区</h2><p>1.概念：一次仅允许一个进程使用的资源（包含物力资源：如打印机）<br>2.临界区的互斥：禁止两个或两个以上的进程同时进入访问同一临界资源的临界区<br>3.解决方法（协调准则）</p><blockquote><p>空闲让进：临界区无进程，新进程可进入<br>忙则等待：临界区有进程，新进程需等待旧进城离开<br>有限等待：解决进程相互等待而都无法进入临界区的问题<br>让权等待：等待进去临界区的进程必须释放其占有的资源</p></blockquote><p>3.信号量（sem）<br>（1）概念：实现进程的同步与互斥<br>（2）表示：</p><pre><code>①sem&gt;0时：表示可使用的资源数量 ②sem&lt;0时：表示等待资源的进程数  </code></pre><p>（3）P操作和V操作</p><blockquote><p>P操作：sem-1，sem&lt;0,P进程暂停（资源不足）<br>V操作：sem+1，sem&lt;=0，唤醒相关V进程（唤醒等待的进程）</p></blockquote><h2 id="5-前趋图"><a href="#5-前趋图" class="headerlink" title="5.前趋图"></a>5.前趋图</h2><p>概念：一个由结点和有向边构成的有向无循环图，有先后制约关系<br> <img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/two/ruankao2.1-3.png" height="50%" width="100%"></p><pre><code>①直接制约：同步的进程之间的制约关系，如A1,B1,C1 ②间接制约：互斥的进程之间的制约关系，如A1,A2,A3</code></pre><h2 id="6-进程调度与死锁"><a href="#6-进程调度与死锁" class="headerlink" title="6.进程调度与死锁"></a>6.进程调度与死锁</h2><p>（1）进程调度</p><pre><code>①定义：处理机调度，控制进程执行顺序 ②引起调度的原因：    进程执行完毕    运行状态转成阻塞状态    执行P操作。资源不足；执行V操作唤醒等待的进程    分时系统，进程用完时间片    优先级高的进程抢占了当前执行的进程 ③进程调度算法    先来先服务：按队列顺序    优先数调度：按优先级顺序    轮转发：每个j进程按规定时间，超过则等待下一次调度</code></pre><p>（2）死锁</p><pre><code>①定义：进程间相互抢占对方资源，无法释放也无法获取资源，陷入无限等待 ②解决策略：发生前防止与避免；发生后检测与恢复 ③建议：系统出现死锁的概率很小，故从系统所花的代价上看，采用死锁发生后的检测与恢复策略要比采用死锁发生前的预防与避免策略代价小一些</code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 软考架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
            <tag> 架构师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（软考架构师笔记二）操作系统</title>
      <link href="/2019/05/15/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%89%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/05/15/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%89%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>（软考架构师笔记二）操作系统<br><a id="more"></a></p><h2 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.原理</h2><p>一观点两线索</p><blockquote><p>一观点：以资源管理的观点来定义操作系统<br>两线索：操作系统如何管理计算机各类资源和控制程序的执行</p></blockquote><p><br></p><h2 id="2-定义"><a href="#2-定义" class="headerlink" title="2.定义"></a>2.定义</h2><blockquote><p>计算机系统中的核心系统软件，<br>负责管理和控制计算机系统中的硬件和软件资源<br>合理地组织计算机工作流程和有效地利用资源，在计算机与用户之间起接口的作用.</p></blockquote><p>（1）引入操作系统的目的：</p><p>① 用户角度：</p><blockquote><p>可以透明的使用计算机软硬件<br>调用操作系统服务</p></blockquote><p>② 资源管理角度：</p><blockquote><p>操作系统管理和分配计算机软硬件资源<br>合理组织计算机工作流程<br>为多用户共享资源，合理分配</p></blockquote><p>③ 进程角度：</p><blockquote><p>由系统核心和多个进程并发组成<br>系统核心控制和协调进程</p></blockquote><p>④ 分层角度：</p><blockquote><p>采用分层结构实现<br>各层次按一定次序组织协调工作</p></blockquote><p><br></p><h2 id="3-硬件-软件关系图"><a href="#3-硬件-软件关系图" class="headerlink" title="3.硬件/软件关系图"></a>3.硬件/软件关系图</h2><p><img src="https://newblog-1255583673.cos.ap-guangzhou.myqcloud.com/ruankao/two/ruankao2-1.png" height="50%" width="100%"></p><p><br></p><h2 id="4-操作系统分类"><a href="#4-操作系统分类" class="headerlink" title="4.操作系统分类"></a>4.操作系统分类</h2><blockquote><p>批处理操作系统、<br>分时操作系统<br>实时操作系统、<br>网络操作系统<br>分布式操作系统<br>嵌入式操作系统<br>微内核操作系统等</p></blockquote><p>（1）批处理操作系统(作业处理系统)：</p><blockquote><p>成批的装入计算机，由计算机输入井处理好，按一定算法选择一个或多个作业，调入内存运行，把结果放入输出井，输出给用户</p></blockquote><p>（2）分时操作系统：</p><blockquote><p>把CPU的时间划分为很短的时间片，轮流分配给各终端作业使用（如果某个作业再改时间片未完成，需等待下一轮时间再次进行）<br>多路性、及时性、独立性、交互性、及时性</p></blockquote><p>（3）实施擦做系统：</p><blockquote><p>当外界数据或事件产生时，系统能快速的接收和处理，其结果又能快速的生产和响应<br>高可靠性，实时响应性</p></blockquote><p>（4）网络操作系统：</p><blockquote><p>居右网络功能的操作系统，主要处理资讯共享和通信问题<br>共享性</p></blockquote><p>（5）分布式操作系统：</p><blockquote><p>多台计算机组成，共同合作完成同一个任务（每台计算机都能与其他计算机交换信息，资源共享）<br>把一个大任务划分为多个小任务给不同的计算机处理<br>自治性、透明性，协调性</p></blockquote><p>（6）嵌入式操作系统：</p><blockquote><p>把操作系统放入嵌入式智能芯片中，最整个智能芯片和它所操作、控制的资源进行协调、处理、指挥、控制<br>其系统能及时响应外部事件，在规定时间完成外部事件响应处理，并控制所有实时任务协调一致运行<br>微型化、可定制、有效性、实时性，可靠性、易移植性</p></blockquote><p>（7）微内核操作系统：</p><blockquote><p>将操作系统最基本的部分放入内核中，而绝大部分功能放入外部服务器中实现<br>可扩展性，移植性</p></blockquote><p><br></p><h2 id="5-原理"><a href="#5-原理" class="headerlink" title="5.原理"></a>5.原理</h2><blockquote><p>进行处理机与进程管理、存储管理、设备管理、文件管理和作业管理的工作</p></blockquote><blockquote><p>5.1<a href="https://www.yiyuclub.club/2019/05/16/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%881%EF%BC%89%EF%BC%89%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/">进程管理</a><br>5.2<a href="https://www.yiyuclub.club/2019/05/17/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%882%EF%BC%89%EF%BC%89%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/">存储管理</a><br>5.3<a href="https://www.yiyuclub.club/2019/05/17/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%883%EF%BC%89%EF%BC%89%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86/">设备管理</a><br>5.4<a href="https://www.yiyuclub.club/2019/05/17/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%884%EF%BC%89%EF%BC%89%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/">文件管理</a><br>5.5<a href="https://www.yiyuclub.club/2019/05/17/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%885%EF%BC%89%EF%BC%89%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86/">作业管理</a></p></blockquote><p><br></p><h2 id="6-操作系统的结构设计模式"><a href="#6-操作系统的结构设计模式" class="headerlink" title="6.操作系统的结构设计模式"></a>6.操作系统的结构设计模式</h2><p>（1）模块化结构</p><p>（2）层次化结构</p><p>（3）客户/服务器结构</p><p>（4）对象模式</p><p>（5）对称多处理模式</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 软考架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
            <tag> 架构师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（软考架构师笔记一）计算机组成与体系</title>
      <link href="/2019/05/14/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E4%BD%93%E7%B3%BB/"/>
      <url>/2019/05/14/%EF%BC%88%E8%BD%AF%E8%80%83%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E4%BD%93%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<p>（软考架构师笔记一）计算机组成与体系<br><a id="more"></a></p><h2 id="1-计算机组成"><a href="#1-计算机组成" class="headerlink" title="1.计算机组成"></a>1.计算机组成</h2><ol><li>运算器</li><li>控制器</li><li>存储器</li><li>输入设备</li><li>输出设备</li></ol><blockquote><p>由运算器为中心转向存储器为中心<br>存储器概念由冯诺依曼于1946年提出<br><br></p></blockquote><h2 id="2-表示方式"><a href="#2-表示方式" class="headerlink" title="2.表示方式"></a>2.表示方式</h2><blockquote><p>其采用二进制来表示指令与数据<br><br></p></blockquote><h2 id="3-flynn分类"><a href="#3-flynn分类" class="headerlink" title="3.flynn分类"></a>3.flynn分类</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>根据指令流与数据流的多倍性特征分类</p><blockquote><p>指令流：机器执行的指令序列<br>数据流：指令流执行时调用的数据序列。（输入与中间结果，不包含输出结果）</p></blockquote><h3 id="2-类别"><a href="#2-类别" class="headerlink" title="2.类别"></a>2.类别</h3><blockquote><p>单指令流单数据流 （SISD）：对一指令译码对一对象分配数据（传统计算机）<br>单指令流多数据流 （SIMD）：由但指令流控制对多个对象分配所需数据（并行处理机）<br>多指令流单数据流 （MISD）：对多条指令处理输出单一数据流（不常见-&gt;流水线计算机）<br>多指令流多数据流 （MIMD）：对各级全面并行处理（多核处理器）<br><br></p></blockquote><h2 id="4-指令系统"><a href="#4-指令系统" class="headerlink" title="4.指令系统"></a>4.指令系统</h2><h3 id="1-类别"><a href="#1-类别" class="headerlink" title="1.类别"></a>1.类别</h3><p>复杂指令集系统（CISI）和精简指令集系统（RISI）  </p><h3 id="2-CISI指令系统特点"><a href="#2-CISI指令系统特点" class="headerlink" title="2.CISI指令系统特点"></a>2.CISI指令系统特点</h3><blockquote><p>指令数量多<br>使用频率相差悬殊<br>支持多种寻址方式<br>指令长度不固定<br>由微程序控制为主<br>可对主单元数据直接处理</p></blockquote><h3 id="3-RISI指令系统特点"><a href="#3-RISI指令系统特点" class="headerlink" title="3.RISI指令系统特点"></a>3.RISI指令系统特点</h3><p>单周期完成，简化指令，加快速度</p><blockquote><p>指令数量少<br>寻址方式少<br>长度固定<br>以硬布线逻辑控制为主（即组合逻辑构建控制器）<br>流水线技术，单周期指令执行<br>优化编译器（由于简化了指令、寻址方式等，编译更为简单）<br>cpu通用寄存器多<br>RISI使用cache来改善性能：指令cache和数据cache，互不干扰<br><br></p></blockquote><h2 id="5-总线"><a href="#5-总线" class="headerlink" title="5.总线"></a>5.总线</h2><h3 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1.概念"></a>1.概念</h3><p>为多个部件分时共享的公共信息传输线路</p><blockquote><p>共享：多个部件相互交换的信息可以通过这组公共线路传输<br>分时：用一时段只允许一条线路向总线发送消息，超则信号冲突，但接收消息可允许多个</p></blockquote><h3 id="2-按位置分类"><a href="#2-按位置分类" class="headerlink" title="2.按位置分类"></a>2.按位置分类</h3><p>内部总线和外部总线</p><blockquote><p>内部总线：寄存器之间和算术逻辑部件ALU与控制部件之间传输数据所用的总线<br>外部总线：CPU与内存RAM、ROM和输入/输出设备接口之间进行通信的通路<br>在实际中，总线速度是制约计算机性能的最大因素</p></blockquote><h3 id="3-按功能划分"><a href="#3-按功能划分" class="headerlink" title="3.按功能划分"></a>3.按功能划分</h3><p>地址总线、数据总线、控制总线<br><br></p><h2 id="6-存储器系统"><a href="#6-存储器系统" class="headerlink" title="6.存储器系统"></a>6.存储器系统</h2><h3 id="1-概念-2"><a href="#1-概念-2" class="headerlink" title="1.概念"></a>1.概念</h3><p>存放程序和数据的组件</p><h3 id="2-分类"><a href="#2-分类" class="headerlink" title="2.分类"></a>2.分类</h3><p>高速缓冲存储器(cache)、主存、辅存（计算机采用多级存储体系）</p><blockquote><p>cache：cpu与主存之间，速度更快、容量更小<br>主存：cpu直接访问，速度快、容量小<br>辅存：不可直接访问，速度慢、容量大</p></blockquote><h3 id="3-局部性原理"><a href="#3-局部性原理" class="headerlink" title="3.局部性原理"></a>3.局部性原理</h3><p>程序在执行时呈现出局部性规律</p><blockquote><p>时间局部性：当指令执行后，短时间内将可能再次执行<br>空间局部性：存储单元被访问后，周围的也将可能被访问</p></blockquote><h3 id="4-存取方式"><a href="#4-存取方式" class="headerlink" title="4.存取方式"></a>4.存取方式</h3><blockquote><p>顺序存取：以记录的形式进行组织。对数据的访问必须按特定的线性顺序进行（磁带存储器）<br>直接存取：使用一个共享的读写装置对所有的数据进行访问，每个数据块都拥有唯一的地址标识，读写装置可以直接移动到目的数据块所在位置进行访问，时间可改变（磁盘存储器）</p><p>随机存取：每一个可寻址单元都具有自己唯一的地址和读写装置，系统可以在相同的时间内对任意一个存储单元的数据进行访问，而与先前的访问序列无关（主存存储器）</p><p>间接存取：随机的形式，某一单元进行读写是取决于其内容而不是其地址，每个单元都有自己的读写装置，读写时间也是一个常数（cache）</p></blockquote><h3 id="5-主存储器"><a href="#5-主存储器" class="headerlink" title="5.主存储器"></a>5.主存储器</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>存放计算机运行期间所需要的程序和数据，CPU 可直接随机地进行读/写</p><h4 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h4><p>随机存取存储器（RAM）和只读存储器(ROM)</p><blockquote><p>RAM（断电后无法保存）：有DRAM（动态）和SRAM（静态）。DRAM随时间消失，需刷新，较便宜；SRAM不断电能一直保持，速度较快<br>ROM：可读不可写，断电不会消失</p></blockquote><h4 id="存储器编址的方式"><a href="#存储器编址的方式" class="headerlink" title="存储器编址的方式"></a>存储器编址的方式</h4><p>字编址和字节编址</p><h3 id="6-辅助存储器"><a href="#6-辅助存储器" class="headerlink" title="6.辅助存储器"></a>6.辅助存储器</h3><p>1.磁带：存取时间长，容量大，价格低<br>2.硬盘：<br>3.磁盘访问时间=寻道时间+旋转延迟时间</p><h3 id="7-缓存存储器（cache）"><a href="#7-缓存存储器（cache）" class="headerlink" title="7.缓存存储器（cache）"></a>7.缓存存储器（cache）</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>采用相联存储器（ContentAddressable Memory，CAM）。CAM 是一种基于数据内容进行访问的存储设备。当对其写入数据时，CAM 能够自动选择一个未用的空单元进行存储；当要读出数据时，不是给出其存储单元的地址，而是直接给出该数据或者该数据的一部分内容，CAM 对所有存储单元中的数据同时进行比较，并标记符合条件的所有数据以供读取。</p><h4 id="cache基本原理"><a href="#cache基本原理" class="headerlink" title="cache基本原理"></a>cache基本原理</h4><p>根据程序的局部性特征改善性能，把近期或未来要使用的或与正在使用的临近单元上的数据，放入cache中，cpu访问cache或未命中从把要读取的数据放入cache中，加快读取速度。</p><blockquote><p>“Cache+主存储器”的系统的平均周期=Cache命中<em>Cache访问周期时间+Cache未命中（主存）</em>主存周期时间</p></blockquote><h4 id="映射机制（Cache-的地址映射）"><a href="#映射机制（Cache-的地址映射）" class="headerlink" title="映射机制（Cache 的地址映射）"></a>映射机制（Cache 的地址映射）</h4><p>当 CPU 发出访存请求后，存储器地址先被送到 Cache 控制器以确定所需数据是否已在 Cache 中，若命中则直接对 Cache 进行访问</p><h4 id="映射方式"><a href="#映射方式" class="headerlink" title="映射方式"></a>映射方式</h4><p>直接映射，全相联映射，组相连映射</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 软考架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
            <tag> 架构师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>置顶说明</title>
      <link href="/2019/05/07/%E7%BD%AE%E9%A1%B6%E8%AF%B4%E6%98%8E/"/>
      <url>/2019/05/07/%E7%BD%AE%E9%A1%B6%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<p>基本格式<br><a id="more"></a></p><blockquote><p>代码块</p></blockquote><blockquote><p>aaaaaaaaa</p><blockquote><p>bbbbbbbbb</p><blockquote><p>cccccccccc</p></blockquote></blockquote></blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h2 id="我也许裂变"><a href="#我也许裂变" class="headerlink" title="我也许裂变"></a>我也许裂变</h2><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
          <category> 测试文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习从安装开始之maven</title>
      <link href="/2018/01/04/%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%AE%89%E8%A3%85%E5%BC%80%E5%A7%8B%E4%B9%8Bmaven/"/>
      <url>/2018/01/04/%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%AE%89%E8%A3%85%E5%BC%80%E5%A7%8B%E4%B9%8Bmaven/</url>
      
        <content type="html"><![CDATA[<p>学习从安装开始之maven<br><a id="more"></a></p><h1 id="maven下载"><a href="#maven下载" class="headerlink" title="maven下载"></a>maven下载</h1><p>1.本机系统：win10 64位<br>2.本机jdk版本：jdk1.8<br>3.maven下载地址：<a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">http://maven.apache.org/download.cgi</a><br><img src="http://hhsyy-1255583673.file.myqcloud.com/maven/1.PNG" alt>  </p><h1 id="maven安装"><a href="#maven安装" class="headerlink" title="maven安装"></a>maven安装</h1><p>1.解压maven压缩包，我这maven路径为E:\maven\apache-maven-3.5.2。<br>2.配置环境变量，打开我的电脑-属性-高级系统设置-环境变量–系统变量，新建 M2_HOME（E:\maven\apache-maven-3.5.2），编辑path（%M2_HOME%\bin），注意前后分号。<br><img src="http://hhsyy-1255583673.file.myqcloud.com/maven/2.PNG" alt><br>3.win+r输入cmd，进到命令行输入mvn -v，出现如图即安装成功。<br><img src="http://hhsyy-1255583673.file.myqcloud.com/maven/3.PNG" alt>  </p><h1 id="maven仓库配置"><a href="#maven仓库配置" class="headerlink" title="maven仓库配置"></a>maven仓库配置</h1><p>1.新建仓库，在合适位置创建文件夹（E:\maven\maven_repo\repository）。<br>2.打开maven根目录下的conf，打开settings.xml，找到如图localRepository并复制一行如图设置仓库地址。<br><img src="http://hhsyy-1255583673.file.myqcloud.com/maven/4.PNG" alt><br>3.由于国外的下载速度慢，在settings.xml中添加一个镜像地址mirro。复制如下粘贴进入mirros即可（阿里云的）。</p><pre><code>&lt;mirror&gt;    &lt;!--This sends everything else to /public --&gt;    &lt;id&gt;nexus-aliyun&lt;/id&gt;    &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;    &lt;name&gt;Nexus aliyun&lt;/name&gt;    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;&lt;/mirror&gt;</code></pre><p><img src="http://hhsyy-1255583673.file.myqcloud.com/maven/5.PNG" alt><br>4.复制一份settings.xml进入E:\maven\maven_repo（E:\maven\maven_repo\repository的上一级）<br><img src="http://hhsyy-1255583673.file.myqcloud.com/maven/6.PNG" alt><br>5.win+r输入cmd，进到命令行输入mvn help:system，会下载文件到你设置的仓库中，第一次会比较久。<br><img src="http://hhsyy-1255583673.file.myqcloud.com/maven/7.PNG" alt><br>6.仓库配置结束。  </p><h1 id="4-eclipse添加maven"><a href="#4-eclipse添加maven" class="headerlink" title="4.eclipse添加maven"></a>4.eclipse添加maven</h1><p>1.打开eclipse–&gt;Window–&gt;Preferences，找到maven。<br>2.如图添加maven安装路径。<br><img src="http://hhsyy-1255583673.file.myqcloud.com/maven/8.PNG" alt><br>3.点击Maven下面的User Settings选项，如图配置（global settings：本机器的配置，使用这台机器的所有用户都是用这个配置，user settings：当前用户的配置）<br><img src="http://hhsyy-1255583673.file.myqcloud.com/maven/9.PNG" alt><br>4.Apply即可。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习从安装开始之mysql（解压版）</title>
      <link href="/2018/01/03/%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%AE%89%E8%A3%85%E5%BC%80%E5%A7%8B%E4%B9%8Bmysql/"/>
      <url>/2018/01/03/%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%AE%89%E8%A3%85%E5%BC%80%E5%A7%8B%E4%B9%8Bmysql/</url>
      
        <content type="html"><![CDATA[<p>学习从安装开始之mysql（解压版）<br><a id="more"></a></p><embed src="//music.163.com/style/swf/widget.swf?sid=36303718&type=2&auto=1&width=320&height=66" width="340" height="86" allownetworking="all"><h1 id="1-mysql下载"><a href="#1-mysql下载" class="headerlink" title="1.mysql下载"></a>1.mysql下载</h1><ol><li>打开<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a>  </li><li>选择对应本机电脑的版本（我这64位，现在最新mysql为5.7.20），Dowbload。<br><img src="http://hhsyy-1255583673.cosgz.myqcloud.com/mysql/1.PNG" alt></li><li>点击No thanks, just start my download，完成下载。<br><img src="http://hhsyy-1255583673.cosgz.myqcloud.com/mysql/2.PNG" alt></li></ol><p><br></p><h1 id="2-mysql的安装（5-7-20（解压版））"><a href="#2-mysql的安装（5-7-20（解压版））" class="headerlink" title="2.mysql的安装（5.7.20（解压版））"></a>2.mysql的安装（5.7.20（解压版））</h1><p>1.解压mysql压缩包，如图设置环境变量（我这mysql bin路径为E:\mysql\mysql-5.7.20-winx64\bin）。<br><img src="http://hhsyy-1255583673.cosgz.myqcloud.com/mysql/3.PNG" alt><br>2.由于mysql5.7.20版本没有ini文件和data目录，所以在mysql根目录新建文本更改为my.ini。复制以下内容并更改basedir和datadir路径。data后面会说明。</p><pre><code>[client]port=3306default-character-set=utf8[mysqld] # 设置为自己MYSQL的安装目录 basedir=E:\mysql\mysql-5.7.20-winx64# 设置为MYSQL的数据目录 datadir=E:\mysql\mysql-5.7.20-winx64\dataport=3306character_set_server=utf8sql_mode=NO_ENGINE_SUBSTITUTION,NO_AUTO_CREATE_USER#开启查询缓存explicit_defaults_for_timestamp=trueskip-grant-tables</code></pre><p>3.使用管理员权限打开cmd，在cmd中进入mysql bin目录。<br>4.输入 mysqld –initialize-insecure –user=mysql 回车，看到mysql目录下出现了data目录。<br>5.再输入mysqld -install回车，成功后如图。<br><img src="http://hhsyy-1255583673.cosgz.myqcloud.com/mysql/4.PNG" alt><br>6.最后输入net start mysql启动mysql即可。<br><img src="http://hhsyy-1255583673.cosgz.myqcloud.com/mysql/5.PNG" alt><br>7.观察mysql是否开启，可以win+r后输入services.msc，找到MySQL服务即可看到。<br><img src="http://hhsyy-1255583673.cosgz.myqcloud.com/mysql/6.PNG" alt><br>8.命令：  </p><blockquote><p>启动: net start MySQL<br>停止: net stop MySQL<br>卸载: sc delete MySQL  </p></blockquote><p><br></p><h1 id="3-安装mysql遇到的问题"><a href="#3-安装mysql遇到的问题" class="headerlink" title="3.安装mysql遇到的问题"></a>3.安装mysql遇到的问题</h1><ol><li><p>找不到dll（win10）  </p><pre><code>解决方案:1.打开https://www.microsoft.com/zh-cn/download/details.aspx?id=48145，下载vc_redist.x64.exe和vc_redist.x86.exe安装          2.以上不行的话，下载对应dll放于对应文件夹中（或者使用安全软件修复）        3.以上不行的话，下载DirectXRepair35修复即可（更新c++库）</code></pre></li><li>mysql不是内部或外部命令<br> <code>解决方案：环境变量中path路径错误，更改即可。</code><br><br><h1 id="4-mysql的简单设置（密码）"><a href="#4-mysql的简单设置（密码）" class="headerlink" title="4.mysql的简单设置（密码）"></a>4.mysql的简单设置（密码）</h1>1.在cmd输入mysql即可进入mysql数据库。<br><img src="http://hhsyy-1255583673.file.myqcloud.com/mysql/7.PNG" alt><br>2.show databases展示数据库，use mysql使用名为mysql数据库。<br><img src="http://hhsyy-1255583673.file.myqcloud.com/mysql/8.PNG" alt><br>3.show tables观看表，然后找到user表，select user,host,authentication_string from user; 后可看到数据。（5.7password改为authentication_string）。<br><img src="http://hhsyy-1255583673.file.myqcloud.com/mysql/9.PNG" alt><br><img src="http://hhsyy-1255583673.file.myqcloud.com/mysql/10.PNG" alt><br>4.根据mysql知识更改user表的数据即可。如： update user set authentication_string=’root’ where user=’root’ and host=’localhost’;   再输入FLUSH PRIVILEGES;可更改密码。<br>5.quit；退出后输入mysql  –uroot –proot即可密码登陆。<br><img src="http://hhsyy-1255583673.file.myqcloud.com/mysql/11.PNG" alt><br>6.如果遗忘密码，可net stop MySQL停止MySQL服务，在net start MySQL –skip-grant-tables无密码登陆即可解决。<br><img src="http://hhsyy-1255583673.file.myqcloud.com/mysql/12.PNG" alt>  </li></ol>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
          <category> MYSQL基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习从安装开始之tomcat</title>
      <link href="/2017/12/05/%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%AE%89%E8%A3%85%E5%BC%80%E5%A7%8B%E4%B9%8Btomcat/"/>
      <url>/2017/12/05/%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%AE%89%E8%A3%85%E5%BC%80%E5%A7%8B%E4%B9%8Btomcat/</url>
      
        <content type="html"><![CDATA[<p>学习从安装开始之tomcat<br><a id="more"></a></p><h1 id="1-tomcat是什么"><a href="#1-tomcat是什么" class="headerlink" title="1.tomcat是什么"></a>1.tomcat是什么</h1><p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。（出自百度百科  <a href="https://baike.baidu.com/item/tomcat/255751?fr=aladdin）" target="_blank" rel="noopener">https://baike.baidu.com/item/tomcat/255751?fr=aladdin）</a></p><p><br></p><h1 id="2-tomcat的安装"><a href="#2-tomcat的安装" class="headerlink" title="2.tomcat的安装"></a>2.tomcat的安装</h1><p>1.打开链接： <a href="https://tomcat.apache.org/download-90.cgi" target="_blank" rel="noopener">https://tomcat.apache.org/download-90.cgi</a><br>2.如图，在1处选择版本，在2处选择windows解压版，下载。<br><img src="https://i.imgur.com/4sbqgGQ.png" alt><br>3.放到合适位置解压，得到如图：<br><img src="https://i.imgur.com/DMpyOUW.png" alt><br>4.打开bin目录，双击startup.bat，会弹出如图的命令窗口，（如果闪现则是jdk没配置好）<br><img src="https://i.imgur.com/FIsoO29.png" alt><br>5.打开浏览器输入：<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a>   ，出现如图猫咪则安装成功<br><img src="https://i.imgur.com/B9I930N.png" alt><br>6.关闭命令窗口或者双击bin目录下的shutdown.bat即可关闭tomcat<br>7.如果出现端口被占用，打开%tomcat%/conf/server.xml文件，找到如图修改port即可<br><img src="https://i.imgur.com/R0JHOCU.png" alt></p><p><br></p><h1 id="3-tomcat目录结构"><a href="#3-tomcat目录结构" class="headerlink" title="3.tomcat目录结构"></a>3.tomcat目录结构</h1><blockquote></blockquote><p>1.bin：  tomcat的命令（含有启动和关闭命令）<br>2.bonf： tomcat的配置信息，有server.xml核心配置文件<br>3.lib：  tomcat所需jar包和扩展包<br>4.logs： 运日志文件<br>5.temp： 临时目录<br>6.wepapps：  共享资源目录 （不可单个文件）<br>7.work：  运行目录，运行时临时产生的临时文件  </p><p><br></p><h1 id="4-分析"><a href="#4-分析" class="headerlink" title="4.分析"></a>4.分析</h1><p>举例：<a href="http://localhost:8080/xiaoyi/xiaoyi.html" target="_blank" rel="noopener">http://localhost:8080/xiaoyi/xiaoyi.html</a></p><blockquote><p>1.http：协议<br>2.localhost:域名（会解析成本机ip）<br>3.8080：端口号<br>4.xiaoyi： webapps下的文件夹<br>5.xiaoyi.html：xiaoyi文件夹下的html文件</p></blockquote><blockquote><p>tips：webapps下的不能为单个文件，如没有xiaoyi这个文件夹（如：<a href="http://localhost:8080/xiaoyi.html），会报404。" target="_blank" rel="noopener">http://localhost:8080/xiaoyi.html），会报404。</a></p></blockquote><p><br></p><h1 id="5-http常见网络状态码"><a href="#5-http常见网络状态码" class="headerlink" title="5.http常见网络状态码"></a>5.http常见网络状态码</h1><blockquote><p>200：客户端请求成功，服务器正确处理了请求<br>400：请求有误，服务器不能理解<br>403：服务器拒绝请求<br>404：服务器找不到请求的网页<br>500：服务器错误（服务器程序问题）  </p></blockquote><p>更多状态码请点击（来自开源中国）：  <a href="http://tool.oschina.net/commons?type=5" target="_blank" rel="noopener">http://tool.oschina.net/commons?type=5</a></p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
          <category> tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习从安装开始之jdk</title>
      <link href="/2017/12/05/%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%AE%89%E8%A3%85%E5%BC%80%E5%A7%8B%E4%B9%8Bjdk/"/>
      <url>/2017/12/05/%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%AE%89%E8%A3%85%E5%BC%80%E5%A7%8B%E4%B9%8Bjdk/</url>
      
        <content type="html"><![CDATA[<p>学习从安装开始之jdk<br><a id="more"></a></p><h1 id="1-jdk是什么？"><a href="#1-jdk是什么？" class="headerlink" title="1.jdk是什么？"></a>1.jdk是什么？</h1><p>jdk是java语言开发工具包，含有java的运行环境与java工具。<br><br></p><h1 id="2-如何下载jdk-（以windows为例）"><a href="#2-如何下载jdk-（以windows为例）" class="headerlink" title="2.如何下载jdk （以windows为例）"></a>2.如何下载jdk （以windows为例）</h1><ol><li>搜索网页：<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a>      （或者百度：搜索“jdk”，第一个）</li><li>勾选Accept….，选择windows下载。<br><img src="https://i.imgur.com/qUZrsmZ.png" alt><br><br><br><br><h1 id="3-安装jdk"><a href="#3-安装jdk" class="headerlink" title="3.安装jdk"></a>3.安装jdk</h1>双击下好的文件，更改jdk和jre地址（如jdk:E:\css\java\jdk,  jre:E:\css\java\jre）（把jre安装进jdk文件夹里，我这后面会出问题）<br><img src="https://i.imgur.com/EdSKDWf.png" alt><br><img src="https://i.imgur.com/z0JTRAq.png" alt><br><br><br><br><h1 id="4-配置jdk"><a href="#4-配置jdk" class="headerlink" title="4.配置jdk"></a>4.配置jdk</h1>1.右键单击我的电脑左键，打开“属性”，左侧“高级系统设置”，打开环境设置<br><br><br><img src="https://i.imgur.com/YQtgbHF.png" alt><br>2.在系统变量中单击“新建”，如图设置变量名（JAVA_HOME）和变量值（你的jdk地址，不是jre）<br><img src="https://i.imgur.com/2Z2UNJT.png" alt><br>3.在系统变量中找到“path”，点击编辑，在末尾添加：%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;（如果之前没有分号，请添加英文下的分号）<br><img src="https://i.imgur.com/TI5iA1k.png" alt><br>4.一路确定即可，打开cmd（win+r后输入cmd），在命令窗口欧输入javac（编译环境）和java（运行环境），看到如图界面环境就安装好了。<br><img src="https://i.imgur.com/pwCv0eG.png" alt><br><img src="https://i.imgur.com/pqQQMWk.png" alt></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jdk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
